---
layout: post
title: Persistence specification testing combined with AutoFixture
published: 1
categories: [Unit Testing, NHibernate]
comments: [disqus]
slug: "Fluent NHibernate's PersistenceSpecification<T> class properties filled with values generated by AutoFixture."
alias: /bonus-bits/2011/03/persistence-specification-testing-combined-with-autofixture.html
---
<p>When working with NHibernate you need to make sure that your mappings are correct. At least, you have to make sure that when you&nbsp;save an item you can also qet that item back.</p>
<p>If you are using FluentNHibernate you can use the <a href="https://github.com/jagregory/fluent-nhibernate/tree/master/src/FluentNHibernate/Testing" target="_blank">PersistenceSpecification&lt;T&gt; class</a>. However, the&nbsp;PersistenceSpecification&lt;T&gt; class requires that you pass the property to check and also a value for that property.</p>
<p>By using <a title="AutoFixture makes it easier for developers to do Test-Driven Development by automating non-relevant Test Fixture Setup, allowing the Test Developer to focus on the essentials of each test case." href="http://autofixture.codeplex.com/" target="_blank">AutoFixture</a> you can easily create objects that you can pass inside the CheckXx methods:</p>

```
[Fact]
public void ShouldVerifyTheMappings()
{
    var fixture = new Fixture();

    using (session)
    {
        new PersistenceSpecification<EventType>(session)
            .CheckProperty(x => x.EventTypeId, 
                fixture.CreateAnonymous<long>())
            .CheckProperty(x => x.EventTypeName, 
                fixture.CreateAnonymous<string>())
            .CheckProperty(x => x.ExchangeServerId, 
                fixture.CreateAnonymous<int>())
            .CheckProperty(x => x.LastUpdatedOn, 
                DateTime.Today)
            .CheckProperty(x => x.NextMarketId, 
                fixture.CreateAnonymous<long>())
            .CheckReference(x => x.Bookmaker, 
                fixture.CreateAnonymous<Bookmaker>())
            .VerifyTheMappings();
    }
}
```

<p>Combining&nbsp;AutoFixture with the PersistenceSpecification&lt;T&gt; class results in&nbsp;writing less code when testing NHibernate mappings, specially when dealing with complex types.</p>

