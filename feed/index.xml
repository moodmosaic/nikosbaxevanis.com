<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nikosbaxevanis.com</title>
  <subtitle>Published works of Nikos Baxevanis</subtitle>
  <author>
    <name>Nikos Baxevanis</name>
  </author>
  <updated>2014-02-13T16:00:57+02:00</updated>
  <link href="http://nikosbaxevanis.com/" rel="alternate"/>
  <link href="http://nikosbaxevanis.com/feed/" rel="self"/>
  <id>http://nikosbaxevanis.com/</id>
  <entry>
    <title>Levels of open-source code</title>
    <link rel="alternate" href="/blog/2014/02/13/levels-of-open-source-code"/>
    <id>http://nikosbaxevanis.com/blog/2014/02/13/levels-of-open-source-code</id>
    <updated>2014-02-13T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;I couldn&amp;#39;t tweet this text into 140 characters so I blogged it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A maturity model for open-source code:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 0&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Only &lt;strong&gt;snapshots&lt;/strong&gt; are available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every single commit is available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every single commit is available, &lt;em&gt;contributions&lt;/em&gt; are accepted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every single commit is available, &lt;em&gt;contributions&lt;/em&gt; are accepted and &lt;em&gt;discussions&lt;/em&gt; are taking place in the open.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>TeamCity, Git, and Karma, on Windows Azure</title>
    <link rel="alternate" href="/blog/2014/01/08/teamcity-git-and-karma-on-windows-azure"/>
    <id>http://nikosbaxevanis.com/blog/2014/01/08/teamcity-git-and-karma-on-windows-azure</id>
    <updated>2014-01-08T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;u&gt;Note&lt;/u&gt;: After following this post, the end result is pretty awesome:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-17.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Radio Edit (tl;dr)&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new Virtual Machine on Windows Azure to install and access TeamCity.&lt;/li&gt;
&lt;li&gt;Install NodeJS (x86) and make sure the installation adds Node, npm, and modules to the PATH environment variable.&lt;/li&gt;
&lt;li&gt;Install Karma and karma-teamcity-reporter plugin.&lt;/li&gt;
&lt;li&gt;Install Chrome.&lt;/li&gt;
&lt;li&gt;Install Git and add its binaries folder to the PATH environment variable.&lt;/li&gt;
&lt;li&gt;Log in to TeamCity.

&lt;ol&gt;
&lt;li&gt;Create a Build Configuration on TeamCity.&lt;/li&gt;
&lt;li&gt;Create and attach new VCS root to the newly created Build Configuration.&lt;/li&gt;
&lt;li&gt;Add a Build Step and attach the newly created Build Configuration.&lt;/li&gt;
&lt;li&gt;In the runner type select Command Line.&lt;/li&gt;
&lt;li&gt;Set the working directory to Karma&amp;#39;s config folder.&lt;/li&gt;
&lt;li&gt;In the run option select &amp;ldquo;Executable with parameters&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;In the command executable option enter &lt;code&gt;karma&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the command parameters option enter &lt;code&gt;start karma.conf.js --reporters teamcity --single-run&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Include the &lt;code&gt;karma-teamcity-reporter&lt;/code&gt; plugin in the karma.conf.js file triggering that way also the build process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Club Mix (long version)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new Virtual Machine on Windows Azure to install and access TeamCity.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-1.png?1392300051" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Turn off Internet Explorer&amp;#39;s Enhanced Security Configuration.&lt;/li&gt;
&lt;li&gt;Download and install NodeJS (x86).

&lt;ul&gt;
&lt;li&gt;Make sure the installation adds Node, npm, and modules to the PATH environment variable.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-3.png?1392300051" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Karma and karma-teamcity-reporter plugin:&lt;br&gt;&lt;pre&gt;&lt;code&gt;  npm install -g karma
  npm install -g karma-teamcity-reporter
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;Install Chrome (if you want to use Chrome with Karma).&lt;/li&gt;
&lt;li&gt;Install Git.

&lt;ul&gt;
&lt;li&gt;Make sure the installation adds Git to the PATH environment variable.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-4.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Optional&lt;/u&gt;: &lt;a href="https://help.github.com/articles/generating-ssh-keys"&gt;Generate SSH keys&lt;/a&gt; if you use SSH keys to establish a secure connection between the Virtual Machine and Git.&lt;/p&gt;

&lt;p&gt;Install TeamCity and choose a port so it can be accessed from a browser (e.g. port 80).&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-5.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;If you use SSH keys to establish a secure connection between the Virtual Machine and Git, make sure to run TeamCity Server under a user account that can access the path where the SSH keys are saved.&lt;/p&gt;

&lt;p&gt;Use the &lt;code&gt;whoami&lt;/code&gt; command in the Command Prompt to find out the Virtual Machine&amp;#39;s domain name.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-6.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;Add a new inbound rule to Windows Firewall with the TeamCity Server port that was entered during installation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The remaining steps can be also done from the browser.&lt;/em&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;On Windows Azure Management Portal add a new endpoint with the selected TeamCity Server port that was entered during installation.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-7.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;Log in to the TeamCity Server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new project.&lt;/li&gt;
&lt;li&gt;Create a Build Configuration on TeamCity.&lt;/li&gt;
&lt;li&gt;Attach a new VCS root on Build Configuration for Git.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-8.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;For the demo, I forked the &lt;a href="https://github.com/moodmosaic/angular-phonecat"&gt;angular-phonecat&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-9.png?1392300050" /&gt;&lt;/p&gt;

&lt;p&gt;Select an authentication method and test the connection.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-10.png?1392300051" /&gt;
&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-11.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;Add a Build Step and attach the newly created Build Configuration.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-12.png?1392300051" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the runner type select Command Line.&lt;/li&gt;
&lt;li&gt;Set the working directory to Karma&amp;#39;s config folder.&lt;/li&gt;
&lt;li&gt;In the run option select &amp;ldquo;Executable with parameters&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;In the command executable option enter &lt;code&gt;karma&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the command parameters option enter &lt;code&gt;start karma.conf.js --reporters teamcity --single-run&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-13.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;As a last step, include the &lt;code&gt;karma-teamcity-reporter&lt;/code&gt; plugin in the karma.conf.js file.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-14.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;Push to Git to trigger the build process and see the commit on TeamCity Server.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-15.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;The end result is pretty awesome:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-16.png?1392300051" /&gt;
&lt;img alt="Image" src="/images/articles/2014-01-08-azure-teamcity-angular-karma-17.png?1392300051" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Do you need help with your project?</title>
    <link rel="alternate" href="/blog/2014/01/04/do-you-need-help-with-your-project"/>
    <id>http://nikosbaxevanis.com/blog/2014/01/04/do-you-need-help-with-your-project</id>
    <updated>2014-01-04T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Why not use my experience for the benefit of your project?&lt;/p&gt;

&lt;p&gt;You can view my background here, in the &lt;a href="/blog"&gt;blog&lt;/a&gt;, and also on &lt;a href="http://stackoverflow.com/users/467754/nikos-baxevanis"&gt;stack overflow&lt;/a&gt;, &lt;a href="http://www.ohloh.net/accounts/moodmosaic"&gt;ohloh&lt;/a&gt; and &lt;a href="https://github.com/moodmosaic"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am available from February 1, 2014.&lt;/p&gt;

&lt;p&gt;Contact me via &lt;a href="mailto:code@nikosbaxevanis.com"&gt;email&lt;/a&gt; or &lt;a href="http://twitter.com/nikosbaxevanis"&gt;twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Semantic Equality Comparison in F#</title>
    <link rel="alternate" href="/blog/2013/12/07/semantic-equality-comparison-in-f-number"/>
    <id>http://nikosbaxevanis.com/blog/2013/12/07/semantic-equality-comparison-in-f-number</id>
    <updated>2013-12-07T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;This post demonstrates a way to perform semantic equality for complex object graphs with &lt;a href="https://github.com/AutoFixture/AutoFixture/blob/master/Src/SemanticComparison/SemanticComparer.cs#L175"&gt;SemanticComparer&lt;/a&gt; including Structural Types, Entities, Value Objects, as well as Primitive Types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The equality algorithm for &lt;code&gt;ComplexType&lt;/code&gt; should use the default equality for &lt;code&gt;record&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;, while it should use custom equality for &lt;code&gt;os&lt;/code&gt; and &lt;code&gt;entity&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight text"&gt;type ComplexType(entity, value, record, number, text, version, os) = 
    member this.Entity  = entity
    member this.Value   = value
    member this.Record  = record
    member this.Number  = number
    member this.Text    = text
    member this.Version = version
    member this.OS      = os
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;record&lt;/code&gt; is a simple aggregate of named values (an F# Record type) with an explicit implementation of &lt;code&gt;Equals&lt;/code&gt; and no auto-generated comparisons:&lt;/p&gt;
&lt;pre class="highlight text"&gt;[&amp;lt;CustomEquality; NoComparison&amp;gt;]
type StructuralType =
    { Value: int;
      Other: string } 

    override this.Equals(y) =
        match y with
        | :? StructuralType as other -&amp;gt; (this.Value = other.Value)
        | _ -&amp;gt; false

    override x.GetHashCode() = hash x.Value
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; follows &lt;strong&gt;value semantics&lt;/strong&gt; and has no conceptual identity:&lt;/p&gt;
&lt;pre class="highlight text"&gt;type ValueObject(x: int, y: int) =
    member this.X = x
    member this.Y = y

    override this.Equals(other) =  
        match other with 
        | :? ValueObject as other -&amp;gt; 
            this.X = other.X &amp;amp;&amp;amp; 
            this.Y = other.Y
        | _  -&amp;gt; Object.Equals(this, other)

    override this.GetHashCode() = 
        hash this.X ^^^ 
        hash this.Y
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;entity&lt;/code&gt; type has a &lt;strong&gt;conceptual identity&lt;/strong&gt; as the following (rather incomplete) implementation demonstrates:&lt;/p&gt;
&lt;pre class="highlight text"&gt;type Entity(name: string) = 
    member this.Name = name
    member this.Id   = Guid.NewGuid()

    override this.Equals(other) = 
        match other with
        | :? Entity as other -&amp;gt; this.Id = other.Id
        | _  -&amp;gt; Object.Equals(this, other)

    override this.GetHashCode() = hash this.Id
&lt;/pre&gt;
&lt;p&gt;The remaining types are defined in BCL: &lt;code&gt;version&lt;/code&gt; overrides its Equals method using value semantics while &lt;code&gt;os&lt;/code&gt; represents instances of the &lt;code&gt;OperatingSystem&lt;/code&gt; type which uses its default reference equality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample test data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All the following tests are parameterized with xUnit.net&amp;#39;s &lt;code&gt;[&amp;lt;PropertyData&amp;gt;]&lt;/code&gt; attribute which means that the test data is coming from a property.&lt;/p&gt;

&lt;p&gt;The property below yields &lt;strong&gt;3&lt;/strong&gt; tests cases:&lt;/p&gt;
&lt;pre class="highlight text"&gt;let RecursiveComparisonTestCases : seq&amp;lt;obj[]&amp;gt; = 
    seq {
            yield 
                [| 
                    ComplexType(
                        Entity(&amp;quot;abc&amp;quot;),
                        ValueObject(1, 2),
                        { Value = 1; 
                          Other = &amp;quot;foo&amp;quot; },
                        1,
                        &amp;quot;Anonymous Text&amp;quot;,
                        Version(4, 0, 0),
                        OperatingSystem(
                            PlatformID.Unix,
                            Version(3, 9, 8)))

                    ComplexType(
                        Entity(&amp;quot;abc&amp;quot;),
                        ValueObject(1, 2),
                        { Value = 1; 
                          Other = &amp;quot;bar&amp;quot; },     // Difference
                        1,
                        &amp;quot;Anonymous Text&amp;quot;,
                        Version(4, 0, 0),
                        OperatingSystem(
                            PlatformID.Xbox,   // Difference
                            Version(3, 9, 8)))

                    true // Expected result
                |]

            yield 
                [| 
                    ComplexType(
                        Entity(&amp;quot;abc&amp;quot;),
                        ValueObject(1, 2),
                        { Value = 2;
                          Other = &amp;quot;foo&amp;quot; },
                        1,
                        &amp;quot;123&amp;quot;,
                        Version(4, 0, 0),
                        OperatingSystem(
                            PlatformID.Unix,
                            Version(3, 9, 8)))

                    ComplexType(
                        Entity(&amp;quot;ABC&amp;quot;),         // Difference
                        ValueObject(1, 2),
                        { Value = 2;
                          Other = &amp;quot;foo&amp;quot; },
                        1,
                        &amp;quot;123&amp;quot;,
                        Version(4, 0, 0),
                        OperatingSystem(
                            PlatformID.Xbox,   // Difference
                            Version(3, 9, 8)))

                    true // Expected result
                |]

            yield 
                [| 
                    ComplexType(
                        Entity(&amp;quot;abc&amp;quot;),
                        ValueObject(1, 2),
                        { Value = 3;
                          Other = &amp;quot;foo&amp;quot; },
                        1,
                        &amp;quot;Anonymous Text&amp;quot;,
                        Version(4, 0, 0),
                        OperatingSystem(
                            PlatformID.Unix,
                            Version(3, 9, 8)))

                    ComplexType(
                        Entity(&amp;quot;abc&amp;quot;),
                        ValueObject(1, 2),
                        { Value = 4;           // Difference
                          Other = &amp;quot;foo&amp;quot; },
                        1,
                        &amp;quot;Anonymous Text&amp;quot;,
                        Version(4, 0, 0),
                        OperatingSystem(
                            PlatformID.Xbox,   // Difference
                            Version(0, 0, 0))) // Difference

                    false // Expected result
                |] }
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Semantic equality can be modeled with &lt;a href="https://github.com/AutoFixture/AutoFixture/blob/master/Src/SemanticComparison/SemanticComparer.cs#L175"&gt;SemanticComparer&lt;/a&gt;, as the following parameterized xUnit.net test demonstrates:&lt;/p&gt;
&lt;pre class="highlight text"&gt;[&amp;lt;Theory; PropertyData(&amp;quot;RecursiveComparisonTestCases&amp;quot;)&amp;gt;]
let ``Equals returns correct result for ComplexType`` value other expected =

    // Fixture setup
    let valueObjectComparer() = { 
        new IMemberComparer with 
            member this.IsSatisfiedBy(request: PropertyInfo) = true
            member this.IsSatisfiedBy(request: FieldInfo) = true
            member this.GetHashCode(obj) = hash obj
            member this.Equals(x, y) = x.Equals(y) }

    let entityComparer() = { 
        new IMemberComparer with 
            member this.IsSatisfiedBy(request: PropertyInfo) = 
                request.PropertyType = typedefof&amp;lt;Entity&amp;gt;
            member this.IsSatisfiedBy(request: FieldInfo) = 
                request.FieldType = typedefof&amp;lt;Entity&amp;gt;
            member this.GetHashCode(obj) = hash obj
            member this.Equals(x, y) = 
                StringComparer.OrdinalIgnoreCase.Equals(
                    (x :?&amp;gt; Entity).Name, 
                    (y :?&amp;gt; Entity).Name) }

    let osComparer() = { 
        new IMemberComparer with 
            member this.IsSatisfiedBy(request: PropertyInfo) = 
                request.PropertyType = typedefof&amp;lt;OperatingSystem&amp;gt;
            member this.IsSatisfiedBy(request: FieldInfo) = 
                request.FieldType = typedefof&amp;lt;OperatingSystem&amp;gt;
            member this.GetHashCode(obj) = hash obj
            member this.Equals(x, y) = 
                (x :?&amp;gt; OperatingSystem).Version.Equals(
                 (y :?&amp;gt; OperatingSystem).Version) }

    let sut = 
        SemanticComparer&amp;lt;ComplexType&amp;gt;(
            valueObjectComparer(), 
            entityComparer(), 
            osComparer())

    // Exercise system
    let actual = sut.Equals(value, other)

    // Verify outcome
    Assert.Equal(expected, actual)

    // Teardown
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;How it works&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SemanticComparer&amp;lt;T&amp;gt;&lt;/code&gt; is a boolean &amp;#39;AND&amp;#39; composite over &lt;a href="https://github.com/AutoFixture/AutoFixture/blob/master/Src/SemanticComparison/IMemberComparer.cs"&gt;IMemberComparer&lt;/a&gt; instances.&lt;/li&gt;
&lt;li&gt;It uses &lt;code&gt;valueObjectComparer&lt;/code&gt; for everything &lt;strong&gt;except&lt;/strong&gt; &lt;code&gt;entity&lt;/code&gt; (where it uses &lt;code&gt;entityComparer&lt;/code&gt;) and &lt;code&gt;os&lt;/code&gt; (where it uses &lt;code&gt;osComparer&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;For each property and field, it finds the appropriate &lt;code&gt;IsSatisfiedBy&lt;/code&gt; method of the appropriate &lt;code&gt;IMemberComparer&lt;/code&gt; instance, and then invokes its &lt;code&gt;Equals&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Packing into a test-specific Equality Assertion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The described behavior can be also packed into a &lt;a href="http://xunitpatterns.com/Custom%20Assertion.html"&gt;Custom Assertion&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The idiomatic way of turning a Custom Assertion into a test-specific override of an object&amp;#39;s equality method is called &lt;a href="http://blog.ploeh.dk/2012/06/21/TheResemblanceidiom/"&gt;Resemblance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A Resemblance &lt;a href="http://nikosbaxevanis.com/blog/2012/02/20/dynamic-proxy-overriding-equals-in-autofixture-likeness/"&gt;can be emitted dynamically&lt;/a&gt; as the following test demonstrates:&lt;/p&gt;
&lt;pre class="highlight text"&gt;[&amp;lt;Theory; PropertyData(&amp;quot;RecursiveComparisonTestCases&amp;quot;)&amp;gt;]
let ``Likeness returns correct result for ComplexType`` value other expected =

    // (Same setup code as above.)

    let likeness = 
        Likeness&amp;lt;ComplexType&amp;gt;(
            value, 
            SemanticComparer&amp;lt;ComplexType&amp;gt;(
                valueObjectComparer(),
                entityComparer(),
                osComparer()))

    let sut = likeness.ToResemblance()

    // Exercise system
    let actual = sut.Equals(other)

    // Verify outcome
    Assert.Equal(expected, actual)

    // Teardown
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Running the tests&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The tests require SemanticComparison and xUnit.net data theories. Both can be installed through NuGet:&lt;/p&gt;
&lt;pre class="highlight text"&gt;PM&amp;gt; Install-Package SemanticComparison
PM&amp;gt; Install-Package Xunit.Extensions
&lt;/pre&gt;
&lt;p&gt;For added convinience all the above code is also stored in a &lt;a href="https://gist.github.com/moodmosaic/7838293"&gt;Gist&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AutoFixture/AutoFixture: Core contributor</title>
    <link rel="alternate" href="http://github.com/autofixture"/>
    <id>http://nikosbaxevanis.comhttp://github.com/autofixture</id>
    <updated>2013-11-27T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Dealing with Legacy Systems</title>
    <link rel="alternate" href="/blog/2013/11/20/dealing-with-legacy-systems"/>
    <id>http://nikosbaxevanis.com/blog/2013/11/20/dealing-with-legacy-systems</id>
    <updated>2013-11-20T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;An overview of some things to consider when dealing with existing &lt;a href="http://en.wikipedia.org/wiki/Legacy_system"&gt;legacy systems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can help and suggest on when to say: &lt;em&gt;NO!&lt;/em&gt; &lt;a href="http://blog.8thlight.com/uncle-bob/2013/11/12/Healthcare-gov.html"&gt;loud enough for the right people to hear&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Can help in performing &lt;a href="http://c2.com/cgi/wiki?DoubleEntryBookkeeping"&gt;double entry bookkeepings&lt;/a&gt; when necessary.&lt;/li&gt;
&lt;li&gt;May contain core team members that can provide valuable information - kindly ask for a review of your work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Maintenance&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code review everything.&lt;/li&gt;
&lt;li&gt;Avoid big, coarse-grained, Pull Requests - Prefer small, fine-grained, Pull Requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;10 lines of code = 10 issues.&amp;#10;&amp;#10;500 lines of code = &amp;ldquo;looks fine.&amp;rdquo;&amp;#10;&amp;#10;Code reviews.&lt;/p&gt;&amp;mdash; I Am Devloper (@iamdevloper) &lt;a href="https://twitter.com/iamdevloper/statuses/397664295875805184"&gt;November 5, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;Always leave the campground cleaner than you found it - a technique known as &lt;a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule"&gt;The Boy Scout Rule&lt;/a&gt; coined by Robert C. Martin.&lt;/li&gt;
&lt;li&gt;Decide when to &lt;a href="http://git-scm.com/book/en/Git-Branching-Rebasing"&gt;rebase&lt;/a&gt; and when not - you may &lt;a href="http://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html"&gt;read about Linus Torvalds&amp;#39; opinion&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Quality assurance (QA)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The non-automated version of &lt;a href="http://en.wikipedia.org/wiki/Continuous_delivery"&gt;Continuous Delivery&lt;/a&gt; - performed by humans.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each team member adding a new Pull Request must provide the necessary steps for manual testing.&lt;/li&gt;
&lt;li&gt;The QA will be busy executing non-automated tests to verify (as much as possible) that the new code doesn&amp;#39;t break anything.&lt;/li&gt;
&lt;li&gt;Requires a medium-to-high level of experience to perform this process effectively and identify potential bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;For complicated systems, adding more people to the QA doesn&amp;#39;t necessarily means that the QA process scales.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Discussions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use GitHub everywhere - Consider GitHub discussions on each Pull Request instead of Skype conversations. That way there will always be a team-wide searchable trace where everyone may participate.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The problem with Skype (and any other instant messaging client) is that the history of the conversation gets lost after some point and there is no permanent URL to track the messages.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>ploeh/Albedo: Core contributor</title>
    <link rel="alternate" href="http://github.com/ploeh/albedo"/>
    <id>http://nikosbaxevanis.comhttp://github.com/ploeh/albedo</id>
    <updated>2013-11-13T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>moodmosaic/Fare: Creator</title>
    <link rel="alternate" href="http://github.com/moodmosaic/fare"/>
    <id>http://nikosbaxevanis.comhttp://github.com/moodmosaic/fare</id>
    <updated>2013-11-07T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Replacing a few LINQ query operators with F# Sequences</title>
    <link rel="alternate" href="/blog/2013/10/24/replacing-a-few-linq-query-operators-with-f-number-sequences"/>
    <id>http://nikosbaxevanis.com/blog/2013/10/24/replacing-a-few-linq-query-operators-with-f-number-sequences</id>
    <updated>2013-10-24T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;ToArray&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/bb298736.aspx"&gt;Enumerable.ToArray&lt;/a&gt; &amp;#8594; &lt;a href="http://msdn.microsoft.com/en-us/library/ee340263.aspx"&gt;Seq.toArray&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2013-10-24-replacing-a-few-linq-query-operators-with-fsharp-sequences-1.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AsEnumerable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/bb335435.aspx"&gt;Enumerable.AsEnumerable&lt;/a&gt; &amp;#8594; &lt;code&gt;seq { }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2013-10-24-replacing-a-few-linq-query-operators-with-fsharp-sequences-2.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/bb291976.aspx"&gt;Enumerable.First&lt;/a&gt; &amp;#8594; &lt;a href="http://msdn.microsoft.com/en-us/library/ee340330.aspx"&gt;Seq.head&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2013-10-24-replacing-a-few-linq-query-operators-with-fsharp-sequences-3.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Count&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/bb338038.aspx"&gt;Enumerable.Count&lt;/a&gt; &amp;#8594; &lt;a href="http://msdn.microsoft.com/en-us/library/ee370547.aspx"&gt;Seq.length&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2013-10-24-replacing-a-few-linq-query-operators-with-fsharp-sequences-4.png?1392300051" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SequenceEqual&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/bb348567.aspx"&gt;Enumerable.SequenceEqual&lt;/a&gt; &amp;#8594; &lt;a href="http://msdn.microsoft.com/en-us/library/ee353659.aspx"&gt;Seq.compareWith&lt;/a&gt; &lt;a href="http://msdn.microsoft.com/en-us/library/ee353429.aspx"&gt;Operators.compare&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2013-10-24-replacing-a-few-linq-query-operators-with-fsharp-sequences-5.png?1392300051" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Auto-Mocking with Foq and AutoFixture</title>
    <link rel="alternate" href="/blog/2013/10/19/auto-mocking-with-foq-and-autofixture"/>
    <id>http://nikosbaxevanis.com/blog/2013/10/19/auto-mocking-with-foq-and-autofixture</id>
    <updated>2013-10-19T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;A new Auto-mocking extension have been recently added to &lt;a href="http://github.com/autofixture/autofixture"&gt;AutoFixture&lt;/a&gt; allowing the mock instances to be created by &lt;a href="http://foq.codeplex.com/"&gt;Foq&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This brings the total number of Auto-mocking extensions for AutoFixture up to five:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nuget.org/packages/AutoFixture.AutoMoq"&gt;AutoFixture.AutoMoq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nuget.org/packages/AutoFixture.AutoRhinoMocks"&gt;AutoFixture.AutoRhinoMocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nuget.org/packages/AutoFixture.AutoFakeItEasy"&gt;AutoFixture.AutoFakeItEasy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nuget.org/packages/AutoFixture.AutoNSubstitute"&gt;AutoFixture.AutoNSubstitute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nuget.org/packages/AutoFixture.AutoFoq"&gt;AutoFixture.AutoFoq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To install AutoFixture with Auto Mocking using Foq, run the following command in the Package Manager Console:&lt;/p&gt;
&lt;pre class="highlight text"&gt;PM&amp;gt; Install-Package AutoFixture.AutoFoq
&lt;/pre&gt;
&lt;p&gt;To use it, add an &lt;code&gt;AutoFoqCustomization&lt;/code&gt; to the &lt;code&gt;Fixture&lt;/code&gt; instance:&lt;/p&gt;
&lt;pre class="highlight text"&gt;let fixture = Fixture().Customize(AutoFoqCustomization())
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Typical usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the test below the mocked instance is created automatically by Foq:&lt;/p&gt;
&lt;pre class="highlight text"&gt;[&amp;lt;Fact&amp;gt;]
let AutoMockInterfaceAndSetupExpectations() =
    // Fixture setup
    let fixture = Fixture().Customize(AutoFoqCustomization())
    let dummy = obj()
    // Exercise system
    let sut = fixture.Create&amp;lt;IInterface&amp;gt;()
    sut.MakeIt(dummy) |&amp;gt; ignore
    // Verify outcome
    Mock.Verify(&amp;lt;@ sut.MakeIt(dummy) @&amp;gt;, Times.Once)
    // Teardown
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Declarative usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The above test can be written declaratively using &lt;a href="http://blog.ploeh.dk/2010/10/08/AutoDataTheoriesWithAutoFixture.aspx"&gt;AutoData&lt;/a&gt; theories:&lt;/p&gt;
&lt;pre class="highlight text"&gt;[&amp;lt;Theory&amp;gt;][&amp;lt;AutoFoqData&amp;gt;]
let AutoMockInterfaceAndSetupExpectationsDeclaratively 
  (sut: IInterface, dummy: obj) =
    sut.MakeIt(dummy) |&amp;gt; ignore
    Mock.Verify(&amp;lt;@ sut.MakeIt(dummy) @&amp;gt;, Times.Once)
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;[AutoFoqData]&lt;/code&gt; attribute is defined as:&lt;/p&gt;
&lt;pre class="highlight text"&gt;type AutoFoqDataAttribute() = 
    inherit AutoDataAttribute(
        Fixture().Customize(AutoFoqCustomization()))
&lt;/pre&gt;
&lt;p&gt;An automatically published release created from the latest successful build can be also downloaded from &lt;a href="http://autofixture.codeplex.com/releases/"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to configure MSBuild to locate the F# build targets</title>
    <link rel="alternate" href="/blog/2013/10/04/how-to-configure-msbuild-to-locate-the-f-number-build-targets"/>
    <id>http://nikosbaxevanis.com/blog/2013/10/04/how-to-configure-msbuild-to-locate-the-f-number-build-targets</id>
    <updated>2013-10-04T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When the &lt;a href="http://nuget.org/packages/AutoFixture.AutoFoq"&gt;AutoFixture.AutoFoq&lt;/a&gt; build run on the &lt;a href="http://teamcity.codebetter.com/"&gt;CodeBetter CI&lt;/a&gt; server for the first time, the following error message appeared:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MSB4057: The target &amp;ldquo;Build&amp;rdquo; does not exist in the project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That was strange since the build run successfully in a development workstation with VS 2012 and .NET 4.5 installed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (CI Server)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://twitter.com/codebetterCI/status/379618879846100992"&gt;moving the project to a different agent&lt;/a&gt;, with .NET 4.5 installed, the problem was solved on the CodeBetter CI server.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;However, the same issue was &lt;a href="https://github.com/AutoFixture/AutoFixture/issues/177"&gt;reported&lt;/a&gt; again - this time in a development workstation with VS 2013 RC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (Workstation)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/adamchester"&gt;Adam Chester&lt;/a&gt; has &lt;a href="https://github.com/AutoFixture/AutoFixture/pull/178"&gt;provided a solution&lt;/a&gt; which seems to work pretty well for VS 2012, VS 2013, and the CodeBetter CI server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The solution can be applied to all F# projects using the MSBuild platform.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The most important changes are shown below. You can also see the diff as an image &lt;a href="/images/articles/2013-10-04-how-to-configure-msbuild-to-locate-the-fsharp-build-targets.png"&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image" src="/images/articles/2013-10-04-how-to-configure-msbuild-to-locate-the-fsharp-build-targets.png?1392300050" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A note for VS 2012 users&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While VS 2013 RC applies these changes automatically for F# projects, in VS 2012 the project file must be tweaked manually:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; - Append:&lt;/p&gt;
&lt;pre class="highlight text"&gt;&amp;lt;TargetFSharpCoreVersion&amp;gt;4.3.0.0&amp;lt;/TargetFSharpCoreVersion&amp;gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt; - Find and Replace:&lt;/p&gt;
&lt;pre class="highlight text"&gt;&amp;lt;Import Project=&amp;quot;$(MSBuildExtensionsPath32)\..\Microsoft SDKs\F#\3.0\Framework\v4.0\Microsoft.FSharp.Targets&amp;quot; Condition=&amp;quot; Exists('$(MSBuildExtensionsPath32)\..\Microsoft SDKs\F#\3.0\Framework\v4.0\Microsoft.FSharp.Targets')&amp;quot; /&amp;gt;
&lt;/pre&gt;
&lt;p&gt;With:&lt;/p&gt;
&lt;pre class="highlight text"&gt;&amp;lt;Choose&amp;gt;
  &amp;lt;When Condition=&amp;quot;'$(VisualStudioVersion)' == '11.0'&amp;quot;&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
      &amp;lt;FSharpTargetsPath&amp;gt;$(MSBuildExtensionsPath32)\..\Microsoft SDKs\F#\3.0\Framework\v4.0\Microsoft.FSharp.Targets&amp;lt;/FSharpTargetsPath&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;
  &amp;lt;/When&amp;gt;
  &amp;lt;Otherwise&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
      &amp;lt;FSharpTargetsPath&amp;gt;$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\FSharp\Microsoft.FSharp.Targets&amp;lt;/FSharpTargetsPath&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;
  &amp;lt;/Otherwise&amp;gt;
&amp;lt;/Choose&amp;gt;
&amp;lt;Import Project=&amp;quot;$(FSharpTargetsPath)&amp;quot; Condition=&amp;quot;Exists('$(FSharpTargetsPath)')&amp;quot; /&amp;gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; - Find and Replace:&lt;/p&gt;
&lt;pre class="highlight text"&gt;&amp;lt;Reference Include='FSharp.Core, Version=4.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'&amp;gt;
&lt;/pre&gt;
&lt;p&gt;With:&lt;/p&gt;
&lt;pre class="highlight text"&gt;&amp;lt;Reference Include='FSharp.Core, Version=$(TargetFSharpCoreVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The F# build targets, compiler, and run time should be located successfully now.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PLoPD 3 - Part 9</title>
    <link rel="alternate" href="/blog/2013/09/15/plopd-3-part-9"/>
    <id>http://nikosbaxevanis.com/blog/2013/09/15/plopd-3-part-9</id>
    <updated>2013-09-15T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;This post is part of the notes I kept while reading the &lt;a href="http://www.amazon.com/Pattern-Languages-Program-Design-v/dp/0201310112"&gt;Pattern Languages of Program Design 3&lt;/a&gt; book.&lt;/p&gt;

&lt;p&gt;The notes I kept in this post come from the Process Patterns section of the book.&lt;/p&gt;

&lt;h2&gt;The Selfish Clash, by Brian Foote and Joseph Yoder&lt;/h2&gt;

&lt;h3&gt;p. 453&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;artifacts embody architecture&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;p. 454&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;code that is easy to read is easier to modify&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Works Out Of The Box&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;p. 456&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;if an artifact, such as class, framework, component, or application, can&amp;#39;t be made to work at all, or requires elaborate preparation in order to work, the designer may become discourages, and look to other options&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;p. 457&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;users should not be left frustrated on Christmas Day because the batteries were &lt;em&gt;not&lt;/em&gt; included&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Low Surface-To-Volume Ratio&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;p. 459&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;objects that allow a user to control a large volume of complex machinery with a small, simple interface are more likely to flourish than those that don&amp;#39;t&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;p. 460&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;design objects with low surface-to-volume ratios, that is, objects with small external interfaces, or surface areas, that encapsulate a large 
volume of internal complexity&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;a good abstraction becomes an element of the vocabulary of a domain-specific language&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.laputan.org/selfish/selfish.html"&gt;http://www.laputan.org/selfish/selfish.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joeyoder.com/PDFs/selfish.pdf"&gt;http://joeyoder.com/PDFs/selfish.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>How to enable Code Analysis for F# projects</title>
    <link rel="alternate" href="/blog/2013/09/08/how-to-enable-code-analysis-for-f-number-projects"/>
    <id>http://nikosbaxevanis.com/blog/2013/09/08/how-to-enable-code-analysis-for-f-number-projects</id>
    <updated>2013-09-08T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;As of today, in Visual Studio 2012 the &lt;em&gt;Run Code Analysis&lt;/em&gt; command is not available for F# projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/3z0aeatx.aspx"&gt;Code Analysis&lt;/a&gt; is a Visual Studio feature for analyzing managed code assemblies and gathering information such as possible design, localization, performance, and security improvements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Code Analysis can be used as a stand-alone tool with the &lt;a href="http://msdn.microsoft.com/en-us/library/bb429474.aspx"&gt;FxCopCmd&lt;/a&gt; command-line application and  it is also possible to be included to automated build processes such is &lt;a href="http://msdn.microsoft.com/en-us/library/wea2sca5.aspx"&gt;MSBuild&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enable Code Analysis in MSBuild&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To enable Code Analysis in MSBuild, include the following elements in the project file:&lt;/p&gt;
&lt;pre class="highlight text"&gt;&amp;lt;CodeAnalysisModuleSuppressionsFile&amp;gt;GlobalSuppressions.fs&amp;lt;/CodeAnalysisModuleSuppressionsFile&amp;gt;
&amp;lt;RunCodeAnalysis&amp;gt;true&amp;lt;/RunCodeAnalysis&amp;gt;
&amp;lt;CodeAnalysisRuleSet&amp;gt;My.ruleset&amp;lt;/CodeAnalysisRuleSet&amp;gt;    
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, even with the above elements, Code Analysis will not run for F# projects during the MSBuild process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Edit the Microsoft.CodeAnalysis.Targets file which is located at:&lt;br&gt;
C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v11.0\CodeAnalysis&lt;/p&gt;

&lt;p&gt;Append &amp;ldquo;&lt;strong&gt;or &amp;#39;$(Language)&amp;#39;==&amp;#39;F#&amp;#39;&lt;/strong&gt;&amp;rdquo; at the following locations:&lt;/p&gt;
&lt;pre class="highlight text"&gt;&amp;lt;DefineConstants Condition=&amp;quot;'$(Language)'=='C#' &amp;quot;&amp;gt;CODE_ANALYSIS;$(DefineConstants)&amp;lt;/DefineConstants&amp;gt;
&amp;lt;PropertyGroup Condition=&amp;quot;'$(Language)'=='C#' or '$(Language)'=='VB'&amp;quot;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;You may also download the modified Microsoft.CodeAnalysis.Targets file from &lt;a href="/downloads/Microsoft.CodeAnalysis.Targets.zip"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PLoPD 3 - Part 1</title>
    <link rel="alternate" href="/blog/2013/08/15/plopd-3-part-1"/>
    <id>http://nikosbaxevanis.com/blog/2013/08/15/plopd-3-part-1</id>
    <updated>2013-08-15T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;This post is part of the notes I kept while reading the &lt;a href="http://www.amazon.com/Pattern-Languages-Program-Design-v/dp/0201310112"&gt;Pattern Languages of Program Design 3&lt;/a&gt; book.&lt;/p&gt;

&lt;p&gt;The notes I kept in this post come from the General Purpose Design Patterns section of the book.&lt;/p&gt;

&lt;h2&gt;Null Object, by Bobby Woolf&lt;/h2&gt;

&lt;h3&gt;p. 1&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;avoid cluttering your code with conditionals that check for a null value&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;implements an interface with entirely null operations&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;is another example of how polymorphism can simplify and regularize you code&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;p. 5&lt;/h3&gt;

&lt;p&gt;In the Model-View-Controller, a view uses its controller to gather input from the user. This is a &lt;a href="http://en.wikipedia.org/wiki/Strategy_pattern"&gt;Strategy&lt;/a&gt; since the controller is the view&amp;#39;s strategy for how it will gather input [&lt;a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612"&gt;Gamma+95&lt;/a&gt;, p. 315].&lt;/p&gt;

&lt;h2&gt;Product Trader, by Dirk Bäumer and Dirk Riehle&lt;/h2&gt;

&lt;h3&gt;p. 29&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;create objects by naming an interface and by providing a specification&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;p. 31&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Applicability&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decoupling argument&lt;/li&gt;
&lt;li&gt;Dynamic selection argument&lt;/li&gt;
&lt;li&gt;Evolution argument&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DO NOT user a Product Trader as a replacement for &lt;a href="http://en.wikipedia.org/wiki/Factory_method_pattern"&gt;Factory Methods&lt;/a&gt; or direct object creation. &lt;/p&gt;

&lt;p&gt;See also &lt;a href="http://libra.msra.cn/Publication/12728810/product-trader"&gt;http://libra.msra.cn/Publication/12728810/product-trader&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Sponsor-Selector, by Eugene Wallingford&lt;/h2&gt;

&lt;h3&gt;p. 2&lt;/h3&gt;

&lt;p&gt;The &lt;a href="http://en.wikipedia.org/wiki/Strategy_pattern"&gt;Strategy&lt;/a&gt; pattern  [&lt;a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612"&gt;Gamma+95&lt;/a&gt;] lets you switch algorithms easily, even at runtime. But it says little about the ramifications of switching or the criteria on which to base the switch. That&amp;#39;s where the Sponsor-Selector comes in.&lt;/p&gt;

&lt;h3&gt;p. 67&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;a mechanism for selecting the best resource for a task from a set of resources that change dynamically&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;p. 69&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each resource has a sponsor to recommend when the resource can be used. The  selector takes these recommendations as input and decides which resource should be used.&lt;/p&gt;

&lt;p&gt;The selector broadcasts the request to all of the sponsors. Each sponsor evaluates the applicability of its recourse and sends a &lt;strong&gt;rating&lt;/strong&gt; back. The selector then uses these ratings, along with context information, to select the best resource in the current context.&lt;/p&gt;

&lt;p&gt;The key to the Sponsor-Selector pattern is the separation of three fundamentally different responsibilities: recommending a resource, selecting among resources, and using a resource.&lt;/p&gt;

&lt;h3&gt;p. 70&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Structure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A resource is any one of a set of objects that has specific functionality in some larger context.&lt;/p&gt;

&lt;p&gt;Each sponsor contains knowledge of when its resource is appropriate for use. If possible, a sponsor should make no reference to any resource other than its own.&lt;/p&gt;

&lt;p&gt;The selector embodies knowledge of which resource to prefer in particular kinds of situations. The selector sends requests to the set of sponsors and receives a set of ratings in return.&lt;/p&gt;

&lt;h3&gt;p. 72&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sponsors may be implemented using the &lt;a href="http://en.wikipedia.org/wiki/Proxy_pattern"&gt;Proxy&lt;/a&gt; pattern [&lt;a href="http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Patterns/dp/0471958697"&gt;Buschmann+96&lt;/a&gt;]. The selector may be implemented using the &lt;a href="http://msdn.microsoft.com/en-us/library/ff648096.aspx"&gt;Broker&lt;/a&gt; pattern [&lt;a href="http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Patterns/dp/0471958697"&gt;Buschmann+96&lt;/a&gt;]. If the resources themselves are methods to be invoked, they can be implemented using the Strategy pattern [&lt;a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612"&gt;Gamma+95&lt;/a&gt;].&lt;/p&gt;

&lt;p&gt;See also &lt;a href="http://www.cs.uni.edu/~wallingf/patterns/sponsor-selector.html"&gt;http://www.cs.uni.edu/~wallingf/patterns/sponsor-selector.html&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PLoPD 3 - Introduction, Preface</title>
    <link rel="alternate" href="/blog/2013/08/07/plopd-3-introduction-preface"/>
    <id>http://nikosbaxevanis.com/blog/2013/08/07/plopd-3-introduction-preface</id>
    <updated>2013-08-07T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;This post is part of the notes I kept while reading the &lt;a href="http://www.amazon.com/Pattern-Languages-Program-Design-v/dp/0201310112"&gt;Pattern Languages of Program Design 3&lt;/a&gt; book.&lt;/p&gt;

&lt;p&gt;The notes I kept in this post come from the Introduction, Preface, and Acknowledgments sections of the book.&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;h3&gt;p. ix&lt;/h3&gt;

&lt;p&gt;Example from the book &lt;a href="http://www.amazon.com/How-Buildings-Learn-Happens-Theyre/dp/0140139966"&gt;How Buildings Learn [Brand 94]&lt;/a&gt; by Stewart Brand:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Build a new campus with no sidewalks at all. Wait for the first winter and photograph where people make paths in the snow between the building. The next spring, put the pavement there.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;p. xxi&lt;/h3&gt;

&lt;p&gt;Reuse is an act of trust.&lt;/p&gt;

&lt;h3&gt;p. xiii&lt;/h3&gt;

&lt;p&gt;Excerpt from the journal &lt;a href="http://virtualschool.edu/cox/pub/NoSilverBulletRevisted/"&gt;No Silver Bullet Revisited [Cox95]&lt;/a&gt; by Brad Cox:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Unlike the hardware industry, which has organized itself into a fully elaborated rainforest of mutually interdependent structure of production trees, the software industry remains stuck in the unicellular, bacterial stage of the primordial ooze.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Preface&lt;/h2&gt;

&lt;h3&gt;p. xvii&lt;/h3&gt;

&lt;p&gt;Robert C. Martin spoke at a conference in Chicago to a rather large audience regarding design patterns.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;He asked who had purchased the &lt;a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612"&gt;GoF&lt;/a&gt; book. About 80 percent raised their hands. Then he asked everyone who had not actually read the book to put their hands down. About half the hands went down. Then he asked who could explain the &lt;a href="http://en.wikipedia.org/wiki/Visitor_pattern"&gt;Visitor pattern&lt;/a&gt;. Nearly all the hands went down.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;p. xvii&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Study the patterns and integrate them into your mental model of software design. Then when you are designing software, the patterns will present themselves before you even know you have a design problem.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Acknowledgments&lt;/h2&gt;

&lt;h3&gt;p. xviii&lt;/h3&gt;

&lt;p&gt;The acknowledgments section includes Gerard Meszaros, who wrote the &lt;a href="http://www.amazon.com/xUnit-Test-Patterns-Refactoring-Code/dp/0131495054"&gt;xUnit Test Patterns&lt;/a&gt; book.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Categorized list of AutoFixture questions</title>
    <link rel="alternate" href="/blog/2013/06/09/categorized-list-of-autofixture-questions"/>
    <id>http://nikosbaxevanis.com/blog/2013/06/09/categorized-list-of-autofixture-questions</id>
    <updated>2013-06-09T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Updated&lt;/strong&gt;: July 29, 2013.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The complete list can be found &lt;a href="http://stackoverflow.com/questions/tagged/autofixture"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AutoFixture.Auto[Moq/RhinoMocks/FakeItEasy/NSubstitute]&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/4845065/what-is-autofixture-automoq"&gt;What is AutoFixture AutoMoq?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/5786628/what-are-the-differences-between-moq-and-autofixture"&gt;Differences between Moq and AutoFixture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/8069164/how-do-i-verify-a-method-was-called"&gt;How to verify a method was called&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/8883685/using-verify-to-confirm-expected-parameter-values-in-moq-mock-class"&gt;Using verify to confirm expected parameter values in Moq&amp;#39;s Mock class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/9341413/creating-a-hybrid-of-a-mock-and-an-anonymous-object-using-e-g-moq-and-autofixtu"&gt;Creating a hybrid of a Mock and an Anonymous object using Moq and AutoFixture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/9839574/how-do-i-test-a-class-that-takes-a-factory"&gt;Test a class that takes a Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/10493510/repetitive-code-in-unit-tests"&gt;Repetitive code in Unit Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11958110/technique-for-using-autofixture-to-integration-test-an-application-using-castle"&gt;Integration Test an application using Castle Windsor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12868235/autofixture-as-an-automocking-container-vs-automocking-differences"&gt;AutoFixture as an Auto-mocking Container vs Auto-mocking differences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12949417/how-to-let-autofixture-create-an-instance-of-a-type-that-contains-properties-wit"&gt;Create an instance of a type that contains properties with an interface type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12963019/how-do-i-get-autofixture-automoq-to-return-results-from-injected-services-in-an"&gt;How to return results from injected services in an instantiated object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14709025/autofixture-mock-methods-dont-return-a-frozen-instance"&gt;Mocked methods returning a Frozen instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/15208879/does-this-test-make-proper-use-of-autofixture-and-moq"&gt;Proper use of AutoFixture AutoMoq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/15442636/autodata-theories-with-autofixture-using-manual-fakes"&gt;AutoData Theories with AutoFixture using manual fakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16145284/autofixture-how-to-express-the-following-code-declaratively"&gt;How to express a Unit Test declaratively?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16455511/new-to-autofixture-trying-to-get-my-head-around-it-and-i-cant-see-it-helping-me"&gt;Imperative to Declarative Unit Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16612145/how-to-use-autofixture-in-this-case"&gt;Auto-mocking using FakeItEasy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16738191/automocking-the-sut"&gt;Auto-mocking the SUT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;AutoFixture.Idioms&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11452539/generalised-func-wrapping-with-anonymous-values-equivalent-to-autofixture-with"&gt;When I pass &lt;em&gt;input&lt;/em&gt; to the parameter &lt;em&gt;x&lt;/em&gt; of a method, supplying the other parameters anonymously, the result is ..&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12051087/how-to-simplify-unit-testing-ddd-value-objects-equality-with-autofixture"&gt;Simplifing Unit Testing DDD Value objects Equality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/15078400/autofixture-test-for-invalid-constructor-parameter"&gt;Verify invalid constructor parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;AutoFixture.Xunit&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11958110/technique-for-using-autofixture-to-integration-test-an-application-using-castle"&gt;Integration Test an application using Castle Windsor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/13960681/autofixture-with-weak-types"&gt;AutoFixture with &amp;#39;weak&amp;#39; types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14391146/using-autofixture-in-my-data-integration-tests-to-create-proxies"&gt;Proxies in data integration tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14410991/autofixture-with-derived-types"&gt;AutoFixture with derived types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14709025/autofixture-mock-methods-dont-return-a-frozen-instance"&gt;Mocked methods returning a Frozen instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/15208879/does-this-test-make-proper-use-of-autofixture-and-moq"&gt;Proper use of AutoFixture AutoMoq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16145284/autofixture-how-to-express-the-following-code-declaratively"&gt;How to express a Unit Test declaratively&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16455511/new-to-autofixture-trying-to-get-my-head-around-it-and-i-cant-see-it-helping-me"&gt;Imperative to Declarative Unit Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16612145/how-to-use-autofixture-in-this-case"&gt;Auto-mocking using FakeItEasy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16731821/what-are-the-principles-behind-autofixtures-declarative-way-of-setting-up-a-fix"&gt;What are the principles behind AutoFixture&amp;#39;s declarative way of setting up a fixture?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16841414/autofixture-propertydata-and-heterogeneous-parameters"&gt;PropertyDataAttribute and heterogeneous parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Customizations&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17867566/unit-testing-order-of-items-in-a-list"&gt;Unit testing the order of items in a list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17795863/empty-dummy-collections"&gt;Empty dummy collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17672861/autofixture-create-a-float-double-or-decimal-with-remainder"&gt;Create a float, double or decimal with remainder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17280912/how-to-create-a-customization-that-omits-the-auto-properties-for-a-whole-range-o"&gt;How to omit the auto properties for a whole range of types?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17111765/how-to-configure-autofixture-to-use-an-enum-value-as-seed-when-creating-many-of"&gt;How to use an enum value as seed when creating many of a certain type?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17087788/creating-recursive-tree-with-autofixture"&gt;Creating recursive tree with AutoFixture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16997718/autofixture-two-constructor-parameters-of-the-same-type-but-different-values"&gt;Two constructor parameters of the same type, but different values (SutFactory)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/5555054/how-do-i-create-a-list-of-classes-which-always-have-a-predefined-value-set-in-au"&gt;How to create a list of types with predefined values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/5722581/autofixture-how-do-i-call-a-method-how-to-set-a-private-setter-of-an-autoprop"&gt;How to set a private setter of an Automatic Property by calling a method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/9209050/generate-anonymous-number-for-string-property-with-autofixture"&gt;Generate anonymous number for string property&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/10032535/can-autofixture-execute-a-delegate-at-object-creation-time"&gt;Execute a delegate at object creation time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/10125199/autofixture-configure-fixture-to-limit-string-generation-length"&gt;How to limit the length of generated strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11958110/technique-for-using-autofixture-to-integration-test-an-application-using-castle"&gt;Integration Test an application using Castle Windsor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12425521/force-autofixture-to-use-the-greediest-constructor"&gt;Selecting the greediest constructor by default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/13143977/can-i-tell-autofixture-to-call-some-base-method-for-all-instances-of-classes-tha"&gt;How to call a base method for all instances of classes that inherit from it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/13869968/how-do-i-apply-autofixture-customizations-to-anything-inheriting-from-a-base-cla"&gt;Creating ASP.NET MVC Controller instances without setting property values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/13940278/how-do-i-generate-objects-when-there-are-multiple-paths-to-a-child-entity"&gt;How to generate objects when there are multiple paths to a child entity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/13960681/autofixture-with-weak-types"&gt;AutoFixture with &amp;#39;weak&amp;#39; types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14391146/using-autofixture-in-my-data-integration-tests-to-create-proxies"&gt;Proxies in data integration tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14639018/why-is-autofixture-customization-causing-inherited-properties-to-not-be-filled"&gt;Supplying values for inherited properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14709025/autofixture-mock-methods-dont-return-a-frozen-instance"&gt;Mocked methods returning a Frozen instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14985930/autofixture-fails-to-createanonymous-mvc-controller"&gt;Creating ASP.NET MVC Controller instances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/5398258/customizing-autofixture-builder-with-seeded-property"&gt;Using Customize with seeded property&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/15478897/ploeh-autofixture-was-unable-to-create-an-instance-from-system-runtime-serializa"&gt;PropertyTypeOmitter (System.Runtime.Serialization.ExtensionDataObject example)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/15531321/how-do-i-use-autofixture-v3-with-icustomization-ispecimenbuilder-to-deal-with"&gt;Customizing constructor parameter values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/15705830/autofixture-ignore-virtual-properties"&gt;Ignore virtual properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16322697/creating-an-autofixture-specimen-builder-for-a-type"&gt;Creating an ISpecimenBuilder for a type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16455511/new-to-autofixture-trying-to-get-my-head-around-it-and-i-cant-see-it-helping-me"&gt;Imperative to Declarative Unit Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Freeze, Inject&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17867566/unit-testing-order-of-items-in-a-list"&gt;Unit testing the order of items in a list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/8069164/how-do-i-verify-a-method-was-called"&gt;How to verify a method was called&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12218206/how-can-i-freeze-a-null-instance-in-autofixture"&gt;How to Freeze a Null Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/13960681/autofixture-with-weak-types"&gt;AutoFixture with &amp;#39;weak&amp;#39; types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14410991/autofixture-with-derived-types"&gt;AutoFixture with derived types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16612145/how-to-use-autofixture-in-this-case"&gt;Auto-mocking using FakeItEasy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16819470/autofixture-automoq-supply-a-known-value-for-one-constructor-parameter"&gt;Supply a known value for one constructor parameter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Likeness, Likeness as Resemblance&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/9341153/autofixture-likeness-compare-only-matching-properties"&gt;Compare only matching properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11718761/applying-autofixture-semanticcomparison-oflikeness-to-sequences-collections"&gt;Likeness applied to sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16714258/likeness-polishing-and-packaging"&gt;Custom Assertion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/8883685/using-verify-to-confirm-expected-parameter-values-in-moq-mock-class"&gt;Using verify to confirm expected parameter values in Moq&amp;#39;s Mock class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11718761/applying-autofixture-semanticcomparison-oflikeness-to-sequences-collections"&gt;Likeness applied to sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/15605241/why-doesnt-autofixture-likeness-behave-like-id-expect-for-one-of-these-two-tes"&gt;How to use &amp;#39;EqualsWhen&amp;#39;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Refactoring&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17867566/unit-testing-order-of-items-in-a-list"&gt;Unit testing the order of items in a list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17846164/autofixture-generate-custom-list"&gt;Generating custom lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/2622334/autofixture-refactoring"&gt;Minimizing the Arrange phase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/10493510/repetitive-code-in-unit-tests"&gt;Repetitive code in Unit Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16455511/new-to-autofixture-trying-to-get-my-head-around-it-and-i-cant-see-it-helping-me"&gt;Imperative to Declarative Unit Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>The GitHub way of blog discussion and commenting</title>
    <link rel="alternate" href="/blog/2013/04/28/the-github-way-of-blog-discussion-and-commenting"/>
    <id>http://nikosbaxevanis.com/blog/2013/04/28/the-github-way-of-blog-discussion-and-commenting</id>
    <updated>2013-04-28T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Using the underlying power of &lt;a href="http://github.com/"&gt;GitHub&lt;/a&gt;, blog authors often take a step further and roll their own discussion and commeting systems.&lt;/p&gt;

&lt;p&gt;The best examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.ploeh.dk/2013/03/03/moving-the-blog-to-jekyll/"&gt;Add a comment by sending a pull request&lt;/a&gt; by &lt;a href="http://blog.ploeh.dk/"&gt;Mark Seemann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ivanzuzak.info/2011/02/18/github-hosted-comments-for-github-hosted-blogs.html"&gt;Add a comment through the GitHub API&lt;/a&gt; by &lt;a href="http://ivanzuzak.info"&gt;Ivan Zuzak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/holman/feedback"&gt;Add a comment as a GitHub issue&lt;/a&gt; by &lt;a href="http://zachholman.com/"&gt;Zach Holman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the evolution of blog-aware static site generators, like &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, GitHub is becoming a central part for hosting both blog content and comments.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hackers, Developers, Programmers</title>
    <link rel="alternate" href="/blog/2013/04/18/hackers-developers-programmers"/>
    <id>http://nikosbaxevanis.com/blog/2013/04/18/hackers-developers-programmers</id>
    <updated>2013-04-18T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;The definitions about Hackers, Developers, and Programmers, that I like best are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Hackers are generally loners who don&amp;#39;t care if others can figure out their code (at least while they are in the mode or role of hacking). Thus, they build their own little world in it that fits themselves nicely so that they can hack fast, but the rest of the world be damned.&amp;rdquo; &amp;ndash; &lt;em&gt;&lt;a href="http://c2.com/cgi/wiki?LispIsTooPowerful"&gt;c2.com/wiki&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;On the &amp;#39;programmer&amp;#39; vs. &amp;#39;developer&amp;#39; debate: &amp;#39;Programmer&amp;#39; focuses on the &amp;#39;craft&amp;#39;. &amp;#39;Developer&amp;#39; focuses on the business. Both are valuable.&amp;rdquo; &amp;ndash; &lt;em&gt;&lt;a href="https://twitter.com/ploeh/status/297803382050140160"&gt;@ploeh on twitter&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am a programmer &amp;ndash; You?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>xUnit.net Attributes Execution Order</title>
    <link rel="alternate" href="/blog/2013/03/10/xunit-dot-net-attributes-execution-order"/>
    <id>http://nikosbaxevanis.com/blog/2013/03/10/xunit-dot-net-attributes-execution-order</id>
    <updated>2013-03-10T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;The test below uses the &lt;a href="http://xunit.codeplex.com/"&gt;xUnit.net&lt;/a&gt; framework and executes twice, since it is decorated with two data sources. The first data source is the built-in &lt;code&gt;[InlineData]&lt;/code&gt; and the second data source is the custom &lt;code&gt;[StringData]&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Theory]&lt;/span&gt;
&lt;span class="na"&gt;[InlineData(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;)]&lt;/span&gt;
&lt;span class="na"&gt;[StringData]&lt;/span&gt;
&lt;span class="na"&gt;[Intercept]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;xUnit.net invokes in exact order:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initialization&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[InlineData]&lt;/code&gt; consturctor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[StringData]&lt;/code&gt; consturctor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[InlineData]&lt;/code&gt; &lt;code&gt;IEnumerable&amp;lt;object[]&amp;gt; GetData(MethodInfo, Type[])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[StringData]&lt;/code&gt; &lt;code&gt;IEnumerable&amp;lt;object[]&amp;gt; GetData(MethodInfo, Type[])&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1st Run&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[Intercept]&lt;/code&gt; consturctor &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Intercept]&lt;/code&gt; &lt;code&gt;void Before(MethodInfo)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Theory]&lt;/code&gt; supplying values for &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; taken from either &lt;code&gt;[InlineData]&lt;/code&gt; or &lt;code&gt;[StringData]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Intercept]&lt;/code&gt; &lt;code&gt;void After(MethodInfo)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;2nd Run&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[Intercept]&lt;/code&gt; consturctor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Intercept]&lt;/code&gt; &lt;code&gt;void Before(MethodInfo)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Theory]&lt;/code&gt; supplying values for &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; taken from either &lt;code&gt;[InlineData]&lt;/code&gt; or &lt;code&gt;[StringData]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Intercept]&lt;/code&gt; &lt;code&gt;void After(MethodInfo)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Remarks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[Intercept]&lt;/code&gt; is defined as:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InterceptAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BeforeAfterTestAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodInfo&lt;/span&gt; &lt;span class="n"&gt;methodUnderTest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;After&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodInfo&lt;/span&gt; &lt;span class="n"&gt;methodUnderTest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It allows code to be run before and after each test is run.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[StringData]&lt;/code&gt; is defined as:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StringDataAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DataAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;]&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;MethodInfo&lt;/span&gt; &lt;span class="n"&gt;methodUnderTest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;parameterTypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;zoo&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>XCOPY deployment for Code Contracts</title>
    <link rel="alternate" href="/blog/2013/03/04/xcopy-deployment-for-code-contracts"/>
    <id>http://nikosbaxevanis.com/blog/2013/03/04/xcopy-deployment-for-code-contracts</id>
    <updated>2013-03-04T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;If you don&amp;#39;t wish to install &lt;a href="http://research.microsoft.com/en-us/projects/contracts/"&gt;Code Contracts&lt;/a&gt; through the Windows Installer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to &lt;code&gt;\Program Files (x86)\MSBuild\(version)\Microsoft.Common.Targets\ImportAfter&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Create a new file with name &lt;code&gt;CodeContractsAfter.targets&lt;/code&gt; and paste the following XML:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight xml"&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/developer/msbuild/2003&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;CodeContractsInstallDir&lt;/span&gt; &lt;span class="na"&gt;Condition=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;'$(CodeContractsInstallDir)'==''&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CONTRACTS_PATH&lt;span class="nt"&gt;&amp;lt;/CodeContractsInstallDir&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Import&lt;/span&gt; &lt;span class="na"&gt;Condition=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;'$(CodeContractsImported)' != 'true' AND '$(DontImportCodeContracts)' != 'true'&amp;quot;&lt;/span&gt; 
          &lt;span class="na"&gt;Project=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(CodeContractsInstallDir)MsBuild\v4.0\Microsoft.CodeContracts.targets&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Extract the contents from the Code Contracts Windows Installer using the &lt;a href="https://code.google.com/p/lessmsi/"&gt;lessmsi&lt;/a&gt; tool.&lt;/li&gt;
&lt;li&gt;Locate the &lt;code&gt;Contracts&lt;/code&gt; folder in the extracted contents.&lt;/li&gt;
&lt;li&gt;Replace the &lt;code&gt;CONTRACTS_PATH&lt;/code&gt; in &lt;code&gt;CodeContractsAfter.targets&lt;/code&gt; with the actual &lt;code&gt;Contracts&lt;/code&gt; folder location.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Legacy Code Risk</title>
    <link rel="alternate" href="/blog/2013/03/03/legacy-code-risk"/>
    <id>http://nikosbaxevanis.com/blog/2013/03/03/legacy-code-risk</id>
    <updated>2013-03-03T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Taking the risk to adjust the architecture of a  &lt;a href="http://c2.com/cgi/wiki?WorkingEffectivelyWithLegacyCode"&gt;legacy&lt;/a&gt; system and extend it in a nice and clean way.&lt;/p&gt;

&lt;p&gt;Creating a context:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complex domain (e.g. life insurance)&lt;/li&gt;
&lt;li&gt;Many technologies are used, tightly coupled (e.g. Redis, db40, iBATIS, Quartz,  Sparks, etc).&lt;/li&gt;
&lt;li&gt;The model has been designed around the &lt;a href="http://en.wikipedia.org/wiki/Active_record_pattern"&gt;Active Record&lt;/a&gt; (&lt;a href="http://programmers.stackexchange.com/questions/119352/does-the-activerecord-pattern-follow-encourage-the-solid-design-principles"&gt;anti&lt;/a&gt;)pattern.&lt;/li&gt;
&lt;li&gt;In a few places there are also DAOs and/or Repositories.&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://en.wikipedia.org/wiki/Service_locator_pattern"&gt;Service Locator&lt;/a&gt; (&lt;a href="http://blog.ploeh.dk/2010/02/03/ServiceLocatorIsAnAntiPattern.aspx"&gt;anti&lt;/a&gt;)pattern has been applied everywhere.&lt;/li&gt;
&lt;li&gt;Almost everywhere, the &lt;a href="http://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;SRP&lt;/a&gt; has been violated.&lt;/li&gt;
&lt;li&gt;Communication with any external Web Service is not guarded with a &lt;a href="http://en.wikipedia.org/wiki/Circuit_breaker_design_pattern"&gt;Circuit Breaker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;And yes.. there are no tests..&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;(All the above yield sad customers, bugs, and slow performance.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Against messy, tightly coupled, legacy code&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strive toward &lt;a href="http://blog.ploeh.dk/2012/01/03/SOLIDIsAppendonly.aspx"&gt;real SOLID&lt;/a&gt; principles&lt;/li&gt;
&lt;li&gt;Instead of doing &lt;a href="http://localhost:4000/2012/01/28/test-after-development-sins/"&gt;Test-After Development Sins&lt;/a&gt; write &lt;strong&gt;test code&lt;/strong&gt; &lt;em&gt;trying&lt;/em&gt; to &lt;strong&gt;drive the&lt;/strong&gt; &lt;a href="http://xunitpatterns.com/SUT.html"&gt;SUT&lt;/a&gt; &lt;strong&gt;API&lt;/strong&gt; and safely refactoring afterwards. The non-relevant &lt;a href="http://xunitpatterns.com/test%20fixture%20-%20xUnit.html"&gt;Test Fixture&lt;/a&gt; setup is automated with &lt;a href="https://github.com/AutoFixture"&gt;AutoFixture&lt;/a&gt; &lt;a href="http://blog.ploeh.dk/2010/10/08/AutoDataTheoriesWithAutoFixture.aspx"&gt;decleratively&lt;/a&gt; with the xUnit.net &lt;a href="http://nuget.org/packages/AutoFixture.Xunit/"&gt;extension&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Instead of using the Service Locator &lt;strong&gt;use Dependency Injection patterns&lt;/strong&gt;, such is &lt;a href="http://blog.ploeh.dk/2011/03/03/InjectionConstructorsShouldBeSimple.aspx"&gt;Constructor Injection&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Instead of using Active Record, Repositories and DAOs consider using &lt;strong&gt;Queries and Commands&lt;/strong&gt; &lt;em&gt;(as described in the first half of &lt;a href="http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/"&gt;this post&lt;/a&gt;&lt;/em&gt;). This might result in more classes but each class is going to have one responsibility instead of two or more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Why it is a risk?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The above require a few changes in the system architecture (e.g. in order to be possible to &lt;em&gt;not&lt;/em&gt; use Service Locators, in order to be possible to use &lt;em&gt;Services&lt;/em&gt; to query from the database instead of the Active Record way, etc.).&lt;/p&gt;

&lt;p&gt;While the required changes are going to (initially) &lt;a href="http://butunclebob.com/ArticleS.UncleBob.SpeedKills"&gt;slow down the development process&lt;/a&gt; at the end the overall development is going to be faster.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Would &lt;em&gt;you&lt;/em&gt; take the risk?&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>Database Schema Synchronization with SqlPackage.exe</title>
    <link rel="alternate" href="/blog/2013/02/11/database-schema-synchronization-with-sqlpackage-dot-exe"/>
    <id>http://nikosbaxevanis.com/blog/2013/02/11/database-schema-synchronization-with-sqlpackage-dot-exe</id>
    <updated>2013-02-11T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/hh550080.aspx"&gt;SqlPackage&lt;/a&gt; is the descendant of &lt;a href="http://msdn.microsoft.com/en-us/library/dd193283.aspx"&gt;VsDbCmd&lt;/a&gt; command-line tool. It creates, deploys, and packages SQL Server databases snapshots into a portable artifact called a DAC package, also known as a DACPAC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manual Database Schema Synchronization&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a New &lt;code&gt;SQL Server Database Project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;On the newly created SQL Server Database Project:

&lt;ul&gt;
&lt;li&gt;Right Click, Import, Database&amp;hellip;&lt;/li&gt;
&lt;li&gt;Right Click, Properties&lt;/li&gt;
&lt;li&gt;In the Project Settings tab select target platform &lt;em&gt;(e.g. SQL Server 2008)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;In the SQLCMD Variables tab enter in the &lt;code&gt;Local&lt;/code&gt; column the path of SQL Server installation folder. Notice that the Local path overrides the &lt;code&gt;Default&lt;/code&gt; path.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;SQL &amp;gt; Schema Compare &amp;gt; New Schema Comparison&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Select as source the newly created SQL Server Database Project.&lt;/li&gt;
&lt;li&gt;Select as target the database containing the schema to be synchronized.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Automatic Database Schema Synchronization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When there is no network access in production environment, the synchronization process can be automated.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="mailto:jimikar@gmail.com"&gt;Dimitris Charalampidis&lt;/a&gt; who provided the steps below, the database schema synchronization can be automated as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Copy the created &amp;#39;.dacpac&amp;#39; file from SQL Server Database Project build output path to the same folder as SqlPackage.&lt;/li&gt;
&lt;li&gt;Open a command console and execute the following command:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight text"&gt;sqlpackage.exe 
  /a:Script 
  /sf:[Yourdatabaseproject.dacpac] 
  /tcs:&amp;quot;Data Source=[connectionString]&amp;quot;
  /op:DBSchemaCompareScript.sql 
  /p:ScriptDeployStateChecks=True 
  /p:BackupDatabaseBeforeChanges=True
  /p:IgnoreExtendedProperties=True
  /p:IgnorePermissions=True 
  /p:IgnoreRoleMembership=True 
  /v:Path1=&amp;quot;[Path1]&amp;quot; 
  /v:Path2=&amp;quot;[Path2]&amp;quot;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Replace:

&lt;ul&gt;
&lt;li&gt;[Yourdatabaseproject.dacpac] with the database project snapshot name you copied in the folder earlier.&lt;/li&gt;
&lt;li&gt;[connectionString] with the database connection string.&lt;/li&gt;
&lt;li&gt;[Path1] and [Path2] with the path to the SQL Server installation folder.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;At this point you may want to add also the &lt;code&gt;/p:GenerateSmartDefaults=True&lt;/code&gt; switch to provide a default value when updating a table that contains data with for columns that do not allow null values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a few seconds a file named &lt;em&gt;DBSchemaCompareScript.sql&lt;/em&gt; will be created (you can change the name with the &lt;code&gt;/op:&lt;/code&gt; switch value).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the script file with Microsoft SQL Server Management Studio.&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Query &amp;gt; SQLCMD Mode&lt;/code&gt; and execute the query.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the query executes without errors, the database schema will be synchronized with the latest changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remarks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following files are required by the SqlPackage if the &lt;a href="http://msdn.microsoft.com/en-us/data/tools.aspx"&gt;Microsoft SQL Server Data Tools&lt;/a&gt; is not installed in production environment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SqlPackage.exe&lt;/li&gt;
&lt;li&gt;Microsoft.Data.Tools.Schema.Sql.dll&lt;/li&gt;
&lt;li&gt;Microsoft.Data.Tools.Utilities.dll&lt;/li&gt;
&lt;li&gt;Microsoft.SqlServer.Dac.dll&lt;/li&gt;
&lt;li&gt;Microsoft.SqlServer.TransactSql.ScriptDom.dll&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Compiling .NET projects in Sublime Text</title>
    <link rel="alternate" href="/blog/2013/02/07/compiling-net-projects-in-sublime-text"/>
    <id>http://nikosbaxevanis.com/blog/2013/02/07/compiling-net-projects-in-sublime-text</id>
    <updated>2013-02-07T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;The subject of this post is the compilation of .NET projects and solutions in Sublime Text using the Build Systems feature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; supports custom &lt;a href="http://docs.sublimetext.info/en/latest/file_processing/build_systems.html"&gt;Build Systems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By adding &lt;a href="http://msdn.microsoft.com/en-us/library/wea2sca5.aspx"&gt;MSBuild&lt;/a&gt; as a new Build System, it is possible to build Visual Studio projects and solutions without the Visual Studio IDE installed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding the Source Code&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The following steps require a folder with MSBuild project files. In order to be pragmatic, the custom Build System is going to compile the source code of &lt;a href="https://github.com/AutoFixture/AutoFixture"&gt;AutoFixture&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go to &lt;code&gt;File&lt;/code&gt; menu, click &lt;code&gt;Open Folder...&lt;/code&gt; and select the root folder of the project to be compiled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding the new Build System&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;Tools&lt;/code&gt; menu, &lt;code&gt;Build System&lt;/code&gt;, and click &lt;code&gt;New Build System...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Paste the following code to a file:&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AutoFixture.sln&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;working_dir&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${project_path:${folder:${file_path}}}\\Src&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Save the file as &lt;code&gt;AutoFixture.sublime-build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;Tools&lt;/code&gt; menu, &lt;code&gt;Build System&lt;/code&gt;, and select &lt;code&gt;AutoFixture&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The above steps are per MBSuild project file. Repeat the above steps by creating a Build System per MSBuild project file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Running the Build&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;Tools&lt;/code&gt; menu, and select &lt;code&gt;Build&lt;/code&gt;. Alternatively, use the &lt;code&gt;Ctrl+B&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8371/8454681575_f36c89b618_o.png" alt="The compiler detects a missing semicolon."/&gt;&lt;/p&gt;

&lt;p&gt;In the above screenshot, on line &lt;em&gt;38&lt;/em&gt; a semicolon has been intentionally removed for the demo. After running a build, the compiler detects the missing semicolon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about the Tests?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Currently, the easiest way to run the tests is by using a command-line interface version of the test runner.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On my machine, attempting to add a new Build System for the tests resulted in &lt;a href="https://twitter.com/nikosbaxevanis/status/298701966945693696"&gt;high memory usage&lt;/a&gt;. This has been tested while Sublime Text 3 was in beta (Build 3010).&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>Commit to Revision Control with Care</title>
    <link rel="alternate" href="/blog/2013/01/01/commit-to-revision-control-with-care"/>
    <id>http://nikosbaxevanis.com/blog/2013/01/01/commit-to-revision-control-with-care</id>
    <updated>2013-01-01T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;We should always commit to &lt;a href="http://en.wikipedia.org/wiki/Revision_control"&gt;revision control&lt;/a&gt; with care.&lt;/p&gt;

&lt;p&gt;Often, developers provide commit messages that are &lt;em&gt;incomplete&lt;/em&gt;, &lt;em&gt;lowercase&lt;/em&gt;, with &lt;em&gt;orthographic permutations&lt;/em&gt;. Even worse, snapshots can contain code that doesn&amp;#39;t even compile.&lt;/p&gt;

&lt;p&gt;In a signed document the rules and regulations can be altered and then another document is going to be created and signed, but the original document will always remain signed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As signatures in documents can&amp;#39;t be erased so do recorded snapshots, at least it is not always an easy task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a snapshot has been recorded it acts like a signature for the developer &amp;ndash; should we ever put our signature roughly?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ReSharper - The Good Parts (Static Code Analysis)</title>
    <link rel="alternate" href="/blog/2012/12/06/resharper-the-good-parts-static-code-analysis"/>
    <id>http://nikosbaxevanis.com/blog/2012/12/06/resharper-the-good-parts-static-code-analysis</id>
    <updated>2012-12-06T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;What I really like about ReSharper is the Static code analysis, and the quick-fixes. What I really don&amp;#39;t like is pretty much everything else.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keeping only the Static code analysis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to ReSharper menu and clik Options&amp;hellip;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Environment &amp;gt; General&lt;/code&gt; tab uncheck:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Show tips on startup&lt;/li&gt;
&lt;li&gt;Loop selection around ends of a list&lt;/li&gt;
&lt;li&gt;Show managed memory usage in status bar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8074/8397465683_d51c48ceb6_o.png" alt="ReSharper, Options, Environment, General"/&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Environment &amp;gt; Keyboard &amp;amp; Menus&lt;/code&gt; tab select:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hide overridden Visual Studio menu items &lt;em&gt;(from Menus &amp;amp; Toolbars)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;None &lt;em&gt;(from Keyboard Shortcuts)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8094/8397465095_bbb7ddf76f_o.png" alt="ReSharper, Options, Environment, Keyboard and Menus"/&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Environment &amp;gt; Editor&lt;/code&gt; tab uncheck:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highlight current line&lt;/li&gt;
&lt;li&gt;Auto-format on semicolon brace&lt;/li&gt;
&lt;li&gt;Auto-format on closing brace&lt;/li&gt;
&lt;li&gt;Use CamelHumps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From &lt;em&gt;Braces and Parentheses&lt;/em&gt; uncheck:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highlight matching delimiters when care is ..&lt;/li&gt;
&lt;li&gt;Auto-insert pair brackets, parentheses and quotes&lt;/li&gt;
&lt;li&gt;Auto-insert closing brace&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8231/8398552804_0eb198dd4e_o.png" alt="ReSharper, Options, Environment, Editor"/&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Environment &amp;gt; IntelliSense &amp;gt; General&lt;/code&gt; tab select:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Limited ReSharper IntelliSense &lt;em&gt;and uncheck C#&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8097/8397463717_943221138e_o.png" alt="ReSharper, Options, Environment, IntelliSense General"/&gt;&lt;/p&gt;

&lt;p&gt;Uncheck everything in the &lt;code&gt;IntelliSense &amp;gt; Completion Behavior&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8331/8397462935_0b0087a910_o.png" alt="ReSharper, Options, Environment, IntelliSense Completion Behavior"/&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Environment &amp;gt; IntelliSense &amp;gt; Completion Appearance&lt;/code&gt; tab select:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio IntelliSense font&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Uncheck everything else&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8077/8398550898_58666c6fba_o.png" alt="ReSharper, Options, Environment, IntelliSense Completion Appearance"/&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Environment &amp;gt; IntelliSense &amp;gt; Parameter Info&lt;/code&gt; tab select:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrow keys&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Uncheck everything else&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8072/8398550136_32dc9b9dbf_o.png" alt="ReSharper, Options, Environment, IntelliSense Parameter Info"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enable Visual Studio IntelliSense&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since we customized ReSharper to use Visual Studio IntelliSense, we have to manually enable it from Visual Studio options.&lt;/p&gt;

&lt;p&gt;In Visual Studio, go to Tools menu and click Options&amp;hellip;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Text Editor &amp;gt; C#&lt;/code&gt; tab select:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Auto list members&lt;/li&gt;
&lt;li&gt;Parameter information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8192/8398549650_3df34f8571_o.png" alt="Visual Studio, Tools, Options, Text Editor, C#"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suspending ReSharper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are some projects where I don&amp;#39;t even want to have ReSharper&amp;#39;s Static code analysis and the quick-fixes.&lt;/p&gt;

&lt;p&gt;In Visual Studio, go to Tools menu and click Options&amp;hellip; &lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;ReSharper&lt;/code&gt; tab click &lt;em&gt;Suspend&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8048/8398549044_4bb64e66ec_o.png" alt="Visual Studio, Tools, Options, ReSharper"/&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Empty ASP.NET Web API Project Template</title>
    <link rel="alternate" href="/blog/2012/11/02/empty-asp-dot-net-web-api-project-template"/>
    <id>http://nikosbaxevanis.com/blog/2012/11/02/empty-asp-dot-net-web-api-project-template</id>
    <updated>2012-11-02T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Usually, every time you create a new Web API project you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Delete almost all the generated code.&lt;/li&gt;
&lt;li&gt;Uninstall NuGet packages that you don&amp;#39;t need (yet, or at all).&lt;/li&gt;
&lt;li&gt;Remove unused assembly references.&lt;/li&gt;
&lt;li&gt;Manually edit the &lt;code&gt;Web.config&lt;/code&gt; file(s) to remove the elements that point to the assemblies which have been removed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Solution&lt;/h2&gt;

&lt;p&gt;Use the &lt;a href="https://github.com/moodmosaic/EmptyWebApiProjectTemplate"&gt;Empty ASP.NET Web API Project Template&lt;/a&gt;. The Visual Studio extension can be downloaded from &lt;a href="http://visualstudiogallery.msdn.microsoft.com/a989a149-4bc3-4292-ac8a-5101ee1722d7"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It will add a new project template &lt;code&gt;Empty Web API&lt;/code&gt; which includes the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Files&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Properties\AssemblyInfo.cs&lt;/li&gt;
&lt;li&gt;favicon.ico&lt;/li&gt;
&lt;li&gt;Global.asax&lt;/li&gt;
&lt;li&gt;Web.config&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Assemblies&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;System&lt;/li&gt;
&lt;li&gt;System.Core&lt;/li&gt;
&lt;li&gt;System.Configuration&lt;/li&gt;
&lt;li&gt;System.Net.Http&lt;/li&gt;
&lt;li&gt;System.Web&lt;/li&gt;
&lt;li&gt;System.Web.Abstractions&lt;/li&gt;
&lt;li&gt;System.Web.ApplicationServices&lt;/li&gt;
&lt;li&gt;&lt;del&gt;System.Web.Mvc&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;System.Web.Routing&lt;/li&gt;
&lt;li&gt;System.Xml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NuGet packages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft.AspNet.WebApi.Client&lt;/li&gt;
&lt;li&gt;Microsoft.AspNet.WebApi.Core&lt;/li&gt;
&lt;li&gt;Microsoft.AspNet.WebApi.WebHost&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Microsoft.AspNet.Providers.Core&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Microsoft.Net.Http&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Newtonsoft.Json&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Remarks&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;favicon.ico&lt;/code&gt; file is included because the browser requests it so &lt;a href="http://developer.yahoo.com/performance/rules.html#favicon"&gt;it&amp;#39;s better not to respond with a 404 Not Found&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update (2013/10/06)&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;You may install &lt;a href="http://www.nuget.org/packages/newtonsoft.json/"&gt;Newtonsoft.Json&lt;/a&gt; through NuGet:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PM&amp;gt; Install-Package Newtonsoft.Json&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Depending on the configuration, the Newtonsoft.Json package &lt;del&gt;is included because it is&lt;/del&gt; can be lazy loaded inside the &lt;code&gt;System.Net.Http.Formatting.JsonMediaTypeFormatter&lt;/code&gt; type.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Exercising the SUT asynchronously</title>
    <link rel="alternate" href="/blog/2012/10/28/exercising-the-sut-asynchronously"/>
    <id>http://nikosbaxevanis.com/blog/2012/10/28/exercising-the-sut-asynchronously</id>
    <updated>2012-10-28T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;In unit testing, there are times were the &lt;a href="http://xunitpatterns.com/SUT.html"&gt;SUT&lt;/a&gt; has to be exercised &lt;strong&gt;asynchronously&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;How can we wait for the exercise to complete execution?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An instance of the SUT can be created on the main thread.&lt;/li&gt;
&lt;li&gt;The main &lt;em&gt;(waiting)&lt;/em&gt; thread &lt;strong&gt;spins in user mode&lt;/strong&gt; while starting the exercise of the SUT asynchronously.&lt;/li&gt;
&lt;li&gt;Once the result has been received, the execution continues on the main thread.&lt;/li&gt;
&lt;li&gt;The assertion takes place.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.spinwait.aspx"&gt;SpinWait&lt;/a&gt; synchronization type contains a method named &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.spinwait.spinuntil.aspx"&gt;SpinUntil&lt;/a&gt; which works perfect for the described scenario.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="c1"&gt;// Fixture setup
&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ObjectLocalStorage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;@object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Exercise system
&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;@object&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;SpinWait&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SpinUntil&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Verify outcome
&lt;/span&gt;&lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Teardown
&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Once the &lt;code&gt;Task&lt;/code&gt; has been created it is immediately scheduled for execution by calling the &lt;code&gt;Start&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;As long as the unit test runs fast, the waiting thread spins in user mode, which is a &lt;a href="http://msdn.microsoft.com/en-us/library/ee722114.aspx"&gt;good thing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also a &lt;a href="http://msdn.microsoft.com/en-us/library/dd449238.aspx"&gt;SpinUntil overload&lt;/a&gt; accepting a TimeSpan timeout.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Truly Constrained Non-Deterministic Numbers in AutoFixture</title>
    <link rel="alternate" href="/blog/2012/10/08/truly-constrained-non-deterministic-numbers-in-autofixture"/>
    <id>http://nikosbaxevanis.com/blog/2012/10/08/truly-constrained-non-deterministic-numbers-in-autofixture</id>
    <updated>2012-10-08T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Numbers in &lt;a href="https://github.com/autofixture/autofixture"&gt;AutoFixture&lt;/a&gt; are currently created using a &lt;strong&gt;strictly monotonically increasing&lt;/strong&gt; sequence.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Prints -&amp;gt; 1
&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Prints -&amp;gt; 2
&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Prints -&amp;gt; 3.0
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Starting with version &lt;em&gt;2.13.0&lt;/em&gt;, by applying a specific customization numbers can also be created using a &lt;strong&gt;constrained non-deterministic&lt;/strong&gt; sequence. The new customization is called &lt;code&gt;RandomNumericSequenceCustomization&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Customize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RandomNumericSequenceCustomization&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Prints -&amp;gt; 122
&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Prints -&amp;gt; 38
&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Prints -&amp;gt; 147.0
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Once the customization has been applied to a &lt;code&gt;Fixture&lt;/code&gt; instance subsequent requests for numeric types will yield random non-repeatable numbers in the range of [1, 255]. When requesting more than 255 numbers the range is automatically changed to [256, 32767] and so on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The default ranges are [1, 255], [256, 32767], and [32768, 2147483647].&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Supplying a custom range&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To supply a custom range, customize an instance of the Fixture class with an instance of the &lt;code&gt;RandomNumericSequenceGenerator&lt;/code&gt; and pass to its constructor a sequence of integer numbers (e.g. &lt;code&gt;-100, 100, 255&lt;/code&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The sequence must be two positive or negative numbers optionally followed by a series of greater numbers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Customizations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RandomNumericSequenceGenerator&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Prints -&amp;gt; -95
&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Prints -&amp;gt; 47
&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Prints -&amp;gt; -82.0
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;After applying the customization, numbers are now created in the range of [-100, 100]. However, when requesting more numbers than the range size the range is automatically changed to [101, 255].&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Statement Completion for Dynamic languages in Sublime Text</title>
    <link rel="alternate" href="/blog/2012/10/05/statement-completion-for-dynamic-languages-in-sublime-text"/>
    <id>http://nikosbaxevanis.com/blog/2012/10/05/statement-completion-for-dynamic-languages-in-sublime-text</id>
    <updated>2012-10-05T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;This post describes how to configure &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; in order to get statement completion for JavaScript, Python, &lt;em&gt;(and perhaps PHP, RHTML, Smarty, Mason, Node.js, XBL, Tcl, HTML, HTML5, TemplateToolkit, XUL, Django, Perl, and Ruby)&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After following the steps, statement completion will also work for Python projects installed in a &lt;a href="http://www.virtualenv.org/en/latest/index.html#what-it-does"&gt;virtualenv&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Download Sublime Text from &lt;a href="http://www.sublimetext.com/2"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Install on Windows or OS X (it doesn&amp;#39;t really matter).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Install Package Manager&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run Sublime Text&lt;/li&gt;
&lt;li&gt;Open the Sublime Text Console. This is accessed via the &lt;em&gt;ctrl + &lt;/em&gt; shortcut.&lt;/li&gt;
&lt;li&gt;Paste the command found &lt;a href="https://sublime.wbond.net/installation"&gt;here&lt;/a&gt; into the console.&lt;/li&gt;
&lt;li&gt;Restart Sublime Text&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;We have just installed Sublime Package Control - A full-featured package manager that helps discovering, installing, updating and removing packages for Sublime Text 2. It features an automatic updater and supports GitHub, BitBucket and a full channel/repository system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Configure Statement Completion&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Press &lt;em&gt;ctrl + shift + p&lt;/em&gt; (Windows, Linux) or &lt;em&gt;cmd + shift + p&lt;/em&gt; (OS X).&lt;/li&gt;
&lt;li&gt;Type &lt;em&gt;Install Package&lt;/em&gt; and select it.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;em&gt;Install Package&lt;/em&gt; command shows a list of all available packages that are available for install. This will include all of the packages from the &lt;a href="http://wbond.net/sublime_packages/community"&gt;default channel&lt;/a&gt;, plus any from repositories you have added.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Select &lt;code&gt;SublimeCodeIntel&lt;/code&gt; from the list of packages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Configure Statement Completion for Python projects in virtualenv&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You may skip this if you are not using virtualenv.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;.codeintel&lt;/code&gt; directory at the root of the project&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;config&lt;/code&gt; file (without any extension) inside the newly created directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'~/Documents/Projects/VirtualEnvName/bin/python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pythonExtraPaths&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;'~/Documents/Projects/VirtualEnvName/lib/python/site-packages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;VirtualEnvName&lt;/code&gt; is the name of the virtualenv were the files of the project are located.&lt;/p&gt;

&lt;p&gt;The project itself is in &lt;code&gt;~/Documents/Projects/VirtualEnvName/ProjectName&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statement Completion in action!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A screenshot for jQuery (note also the &lt;a href="https://github.com/buymeasoda/soda-theme"&gt;&lt;em&gt;very&lt;/em&gt; cool theme&lt;/a&gt;)
&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8357/8397459957_e121e4b04c_o.png" alt="A screenshot for jQuery"/&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Also,&lt;/p&gt;

&lt;p&gt;&lt;a href="http://farm9.staticflickr.com/8076/8398548370_3a313d63d8_o.png" target="_blank"&gt;A screenshot for Document Object Model&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://farm9.staticflickr.com/8466/8397459947_18d7176364_o.png" target="_blank"&gt;A screenshot for Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.sublimetext.com/"&gt;Sublime Text - The text editor you&amp;#39;ll fall in love with&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wbond.net/sublime_packages/package_control"&gt;Sublime Package Control - Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wbond.net/sublime_packages/package_control/usage"&gt;Sublime Package Control - Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kronuz/SublimeCodeIntel"&gt;Sublime Code Intel - Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kronuz/SublimeCodeIntel/issues/165"&gt;Sublime Code Intel - Usage on virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>AutoFixture, xUnit.net, and Auto Mocking</title>
    <link rel="alternate" href="/blog/2012/07/31/autofixture-xunit-dot-net-and-auto-mocking"/>
    <id>http://nikosbaxevanis.com/blog/2012/07/31/autofixture-xunit-dot-net-and-auto-mocking</id>
    <updated>2012-07-31T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: In AutoFixture 3 &lt;a href="https://github.com/AutoFixture/AutoFixture/wiki/AutoFixture-3.0-Release-Notes#numbers-are-random"&gt;numbers are random&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The features discussed in this post are available when using &lt;a href="https://github.com/AutoFixture/AutoFixture"&gt;AutoFixture&lt;/a&gt; &lt;a href="http://blog.ploeh.dk/2010/10/08/AutoDataTheoriesWithAutoFixture.aspx"&gt;decleratively&lt;/a&gt; with the xUnit.net &lt;a href="http://nuget.org/packages/AutoFixture.Xunit/"&gt;extension&lt;/a&gt;. In addition, it is required to have at least one of the extensions for Auto Mocking using &lt;a href="http://nuget.org/packages/AutoFixture.AutoMoq"&gt;AutoMoq&lt;/a&gt;, &lt;a href="http://nuget.org/packages/AutoFixture.AutoRhinoMocks"&gt;AutoRhinoMocks&lt;/a&gt;, &lt;a href="http://nuget.org/packages/AutoFixture.AutoFakeItEasy"&gt;AutoFakeItEasy&lt;/a&gt;, or &lt;a href="http://nuget.org/packages/AutoFixture.AutoNSubstitute"&gt;AutoNSubstitute&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To install AutoFixture with xUnit.net data theories, run the following command in the Package Manager Console:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;PM&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;AutoFixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Xunit&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In the test method below we would like to use xUnit.net data theories to provide:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Auto-generated data specimens for &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Auto-generated data specimens for &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, and inline values for &lt;code&gt;d&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Auto-generated data specimens for &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, and inline values for &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TestMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IInterface&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AbstractType&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;That fact that argument &lt;code&gt;i&lt;/code&gt; is an interface and argument &lt;code&gt;a&lt;/code&gt; is an abstract class prevents us from using &lt;code&gt;[InlineData]&lt;/code&gt;, &lt;code&gt;[AutoData]&lt;/code&gt;, or &lt;code&gt;[InlineAutoData]&lt;/code&gt; attributes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AutoFixture allows us to easily define custom DataAttribute derived types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By deriving from AutoDataAttribute and passing to the base constructor a customization that enables auto mocking with Moq, Rhino Mocks, FakeItEasy, or NSubstitute.&lt;/li&gt;
&lt;li&gt;By deriving from CompositeDataAttribute and passing to the base constructor an array of DataAttribute derived type instances, e.g. an instance of &lt;code&gt;InlineDataAttribute&lt;/code&gt; and an instance of &lt;code&gt;AutoDataAttribute&lt;/code&gt; derived type.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Auto Mocking using Moq&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To install AutoFixture with Auto Mocking using Moq, run the following command in the Package Manager Console:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;PM&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;AutoFixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoMoq&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We decorate the test method with AutoMoqData and InlineAutoMoqData attributes:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Theory]&lt;/span&gt;
&lt;span class="na"&gt;[AutoMoqData]&lt;/span&gt;
&lt;span class="na"&gt;[InlineAutoMoqData(2)]&lt;/span&gt;
&lt;span class="na"&gt;[InlineAutoMoqData(3, &amp;quot;foo&amp;quot;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;WithMoq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IInterface&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AbstractType&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="n"&gt;AutoMoqData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s05080d05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b874&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4182&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bba5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18678&lt;/span&gt;&lt;span class="n"&gt;ad9b134&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IInterfaceProxy&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractTypeProxy&lt;/span&gt;

&lt;span class="n"&gt;InlineAutoMoqData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sce87888d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;cc8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;f69&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;927&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c4b1347d3147&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IInterfaceProxy&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractTypeProxy&lt;/span&gt;

&lt;span class="n"&gt;InlineAutoMoqData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IInterfaceProxy&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractTypeProxy&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Source code:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutoMoqDataAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AutoDataAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="nf"&gt;AutoMoqDataAttribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Customize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoMoqCustomization&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InlineAutoMoqDataAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CompositeDataAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="nf"&gt;InlineAutoMoqDataAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;params&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DataAttribute&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InlineDataAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoMoqDataAttribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;More information on AutoFixture with Auto Mocking using Moq can be found at &lt;a href="http://blog.ploeh.dk/2010/08/19/AutoFixtureAsAnAutomockingContainer.aspx"&gt;AutoFixture as an auto-mocking container&lt;/a&gt; blog post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Auto Mocking using Rhino Mocks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To install AutoFixture with Auto Mocking using Rhino Mocks, run the following command in the Package Manager Console:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;PM&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;AutoFixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoRhinoMocks&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We decorate the test method with AutoRhinoMockData and InlineAutoRhinoMockData attributes:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Theory]&lt;/span&gt;
&lt;span class="na"&gt;[AutoRhinoMockData]&lt;/span&gt;
&lt;span class="na"&gt;[InlineAutoRhinoMockData(2)]&lt;/span&gt;
&lt;span class="na"&gt;[InlineAutoRhinoMockData(3, &amp;quot;foo&amp;quot;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;WithRhinoMocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IInterface&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AbstractType&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ouput:&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="n"&gt;AutoRhinoMockData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s01172643&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5162&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;474&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bcfa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;319&lt;/span&gt;&lt;span class="n"&gt;ef40a8272&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IInterfaceProxy201f58a5559841bfb41895881489658c&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractTypeProxy5a86172bbda14cc098b4c675c5b7e555&lt;/span&gt;

&lt;span class="n"&gt;InlineAutoRhinoMockData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sd3b9c112&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5181&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;daa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;b2f&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;333&lt;/span&gt;&lt;span class="n"&gt;c7498044a&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IInterfaceProxy201f58a5559841bfb41895881489658c&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractTypeProxy5a86172bbda14cc098b4c675c5b7e555&lt;/span&gt;

&lt;span class="n"&gt;InlineAutoRhinoMockData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IInterfaceProxy201f58a5559841bfb41895881489658c&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractTypeProxy5a86172bbda14cc098b4c675c5b7e555&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Source code:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutoRhinoMockDataAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AutoDataAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="nf"&gt;AutoRhinoMockDataAttribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Customize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoRhinoMockCustomization&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InlineAutoRhinoMockDataAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CompositeDataAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="nf"&gt;InlineAutoRhinoMockDataAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;params&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DataAttribute&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InlineDataAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoRhinoMockDataAttribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;More information on AutoFixture with Auto Mocking using Rhino Mocks can be found at &lt;a href="http://blog.ploeh.dk/2010/11/13/RhinoMocksbasedAutomockingWithAutoFixture.aspx"&gt;Rhino Mocks-based auto-mocking with AutoFixture&lt;/a&gt; blog post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Auto Mocking using FakeItEasy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To install AutoFixture with Auto Mocking using FakeItEasy, run the following command in the Package Manager Console:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;PM&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;AutoFixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoFakeItEasy&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We decorate the test method with AutoFakeItEasyData or InlineAutoFakeItEasyData attributes:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Theory]&lt;/span&gt;
&lt;span class="na"&gt;[AutoFakeItEasyData]&lt;/span&gt;
&lt;span class="na"&gt;[InlineAutoFakeItEasyData(2)]&lt;/span&gt;
&lt;span class="na"&gt;[InlineAutoFakeItEasyData(3, &amp;quot;foo&amp;quot;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;WithFakeItEasy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IInterface&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AbstractType&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="n"&gt;AutoFakeItEasyData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s2b4c118b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d18b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4782&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;992&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d4138c65fd2a&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Faked&lt;/span&gt; &lt;span class="n"&gt;IInterface&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Faked&lt;/span&gt; &lt;span class="n"&gt;AbstractType&lt;/span&gt;

&lt;span class="n"&gt;InlineAutoFakeItEasyData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;se8da7e09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ea4f&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;d16&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="n"&gt;bd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4229802e5&lt;/span&gt;&lt;span class="n"&gt;f5d&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Faked&lt;/span&gt; &lt;span class="n"&gt;IInterface&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Faked&lt;/span&gt; &lt;span class="n"&gt;AbstractType&lt;/span&gt;

&lt;span class="n"&gt;InlineAutoFakeItEasyData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Faked&lt;/span&gt; &lt;span class="n"&gt;IInterface&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Faked&lt;/span&gt; &lt;span class="n"&gt;AbstractType&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Source code:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutoFakeItEasyDataAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AutoDataAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="nf"&gt;AutoFakeItEasyDataAttribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Customize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoFakeItEasyCustomization&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InlineAutoFakeItEasyDataAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CompositeDataAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="nf"&gt;InlineAutoFakeItEasyDataAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;params&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DataAttribute&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InlineDataAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoFakeItEasyDataAttribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;More information on AutoFixture with Auto Mocking using FakeItEasy can be found at &lt;a href="http://nikosbaxevanis.com/2011/12/14/auto-mocking-with-fakeiteasy-and-autofixture/"&gt;Auto-Mocking with FakeItEasy and AutoFixture&lt;/a&gt; blog post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Auto Mocking using NSubstitute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To install AutoFixture with Auto Mocking using NSubstitute, run the following command in the Package Manager Console:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;PM&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;AutoFixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoNSubstitute&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We decorate the test method with AutoNSubstituteData or InlineAutoNSubstituteData attributes:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Theory]&lt;/span&gt;
&lt;span class="na"&gt;[AutoNSubstituteData]&lt;/span&gt;
&lt;span class="na"&gt;[InlineAutoNSubstituteData(2)]&lt;/span&gt;
&lt;span class="na"&gt;[InlineAutoNSubstituteData(3, &amp;quot;foo&amp;quot;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;WithNSubstitute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IInterface&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AbstractType&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="n"&gt;AutoNSubstituteData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sf7ce77e0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c2b3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4749&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b9ec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="n"&gt;f3aba0254a&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IInterfaceProxy&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractTypeProxy&lt;/span&gt;

&lt;span class="n"&gt;InlineAutoNSubstituteData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sf7ba31be&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3136&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;b50&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a51f&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3763&lt;/span&gt;&lt;span class="n"&gt;f1d06004&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IInterfaceProxy&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractTypeProxy&lt;/span&gt;

&lt;span class="n"&gt;InlineAutoNSubstituteData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IInterfaceProxy&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Castle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractTypeProxy&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Source code:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutoNSubstituteDataAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AutoDataAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="nf"&gt;AutoNSubstituteDataAttribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Customize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoNSubstituteCustomization&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InlineAutoNSubstituteDataAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CompositeDataAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="nf"&gt;InlineAutoNSubstituteDataAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;params&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DataAttribute&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InlineDataAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoNSubstituteDataAttribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;More information on AutoFixture with Auto Mocking using NSubstitute can be found at &lt;a href="http://blog.ploeh.dk/2013/01/09/NSubstituteAuto-mockingwithAutoFixture/"&gt;NSubstitute Auto-mocking with AutoFixture&lt;/a&gt; blog post.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Composite xUnit.net Data Attributes</title>
    <link rel="alternate" href="/blog/2012/07/27/composite-xunit-dot-net-data-attributes"/>
    <id>http://nikosbaxevanis.com/blog/2012/07/27/composite-xunit-dot-net-data-attributes</id>
    <updated>2012-07-27T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://xunit.codeplex.com/"&gt;xUnit.net&lt;/a&gt; &lt;a href="http://nuget.org/packages/xunit.extensions"&gt;extensions&lt;/a&gt; support data-driven tests called &lt;a href="http://xunit.codeplex.com/wikipage?title=Comparisons#note4"&gt;Theories&lt;/a&gt;. Such tests are similar to regular xUnit.net tests but instead of being decorated with &lt;code&gt;[Fact]&lt;/code&gt; they are decorated with &lt;code&gt;[Theory]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below is a data-driven test with the data coming a Microsoft Excel (.xls) spreadsheet.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Theory]&lt;/span&gt;
&lt;span class="na"&gt;[ExcelData(&amp;quot;UnitTestData.xls&amp;quot;, &amp;quot;SELECT x, y FROM Data&amp;quot;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 'x' and 'y' are values from the .xls spreadsheet.
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Also, a data-driven test with the data coming from a type implementing the IEnumerable&lt;object[]&gt;.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Theory]&lt;/span&gt;
&lt;span class="na"&gt;[ClassData(typeof(CollectionOfSpecifiedString))]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 'x' and 'y' are values from the IEnumerable&amp;lt;object[]&amp;gt; type.
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CollectionOfSpecifiedString&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;]&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;]&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetEnumerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;zoo&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;IEnumerator&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetEnumerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetEnumerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In the above samples, &lt;code&gt;[ExcelData]&lt;/code&gt; and &lt;code&gt;[ClassData]&lt;/code&gt; are attributes representing a data source for a data-driven test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using data from multiple attributes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Below is a data-driven test with the data coming from a type implementing the IEnumerable&lt;object[]&gt; combined with the data coming from an .xls spreadsheet.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Theory]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;ClassExcelData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CollectionOfSpecifiedString&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;UnitTestData.xls&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SELECT x, y FROM Data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Zoo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 'x' is coming from the IEnumerable&amp;lt;object[]&amp;gt; type.
&lt;/span&gt;    &lt;span class="c1"&gt;// 'y' is coming from the .xls spreadsheet.
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CollectionOfSpecifiedString&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;]&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;]&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetEnumerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;IEnumerator&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetEnumerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetEnumerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Creating a composite attribute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;[ClassExcelData]&lt;/code&gt; from the previous example is a &lt;a href="http://en.wikipedia.org/wiki/Composite_pattern"&gt;composite&lt;/a&gt; of two xUnit.net&amp;#39;s data attributes &lt;code&gt;[ClassData]&lt;/code&gt; and &lt;code&gt;[ExcelData]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All we have to do is create a type deriving from &lt;code&gt;CompositeDataAttribute&lt;/code&gt;, passing in its base constructor an array of the data attributes we would like to compose.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]&lt;/span&gt;
&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassExcelDataAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CompositeDataAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="nf"&gt;ClassExcelDataAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;selectStatement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DataAttribute&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ClassDataAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ExcelDataAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;selectStatement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The description for the &lt;code&gt;CompositeDataAttribute&lt;/code&gt; algorithm can be found &lt;a href="http://nikosbaxevanis.com/2011/08/25/combining-data-theories-in-autofixture-xunit-extension/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When defining a composite data attribute, it is acceptable for the first attribute to provide some (or all) data for the parameters of the test method. However, subsequent data attributes must be able to provide the data for the exact position where the previous attribute stopped.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Obtaining the CompositeDataAttribute class&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CompositeDataAttribute is currently bundled with &lt;a href="https://github.com/AutoFixture/AutoFixture"&gt;AutoFixture&lt;/a&gt; &lt;a href="http://feed.nuget.org/packages/AutoFixture.Xunit"&gt;extension&lt;/a&gt; for xUnit.net. You can use it by installing the &lt;a href="http://feed.nuget.org/packages/AutoFixture.Xunit"&gt;AutoFixture.Xunit NuGet package&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using the Web API Dependency Resolver with Castle Windsor's Scoped Lifetime</title>
    <link rel="alternate" href="/blog/2012/07/16/using-the-web-api-dependency-resolver-with-castle-windsors-scoped-lifetime"/>
    <id>http://nikosbaxevanis.com/blog/2012/07/16/using-the-web-api-dependency-resolver-with-castle-windsors-scoped-lifetime</id>
    <updated>2012-07-16T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href="http://blog.ploeh.dk/"&gt;Mark Seemann&lt;/a&gt; has provided a &lt;a href="http://blog.ploeh.dk/2012/10/03/DependencyInjectionInASPNETWebAPIWithCastleWindsor.aspx"&gt;solution&lt;/a&gt; without using the IDependencyResolver interface.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post is the result of a very good &lt;a href="http://nikosbaxevanis.com/2012/06/04/using-the-web-api-dependency-resolver-with-castle-windsor-part-2/#comment-568630441"&gt;suggestion&lt;/a&gt; in the comments section of the &lt;a href="http://nikosbaxevanis.com/2012/06/04/using-the-web-api-dependency-resolver-with-castle-windsor-part-2"&gt;previous&lt;/a&gt; post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The WindsorDependencyScope from the previous post has been modified to use the Scoped lifetime &lt;a href="http://docs.castleproject.org/Windsor.Whats-New-In-Windsor-3.ashx#Added_two_new_lifestyles:_scoped_and_bound_2"&gt;available&lt;/a&gt; in Castle Windsor 3.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Dependencies&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Castle.MicroKernel.Lifestyle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Castle.Windsor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindsorDependencyScope&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDependencyScope&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IWindsorContainer&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IDisposable&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;WindsorDependencyScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IWindsorContainer&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginScope&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;GetService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HasComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ResolveAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Cast&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;BeginScope&lt;/code&gt; is an extension method for the &lt;code&gt;IWindsorContainer&lt;/code&gt; type. It returns by default an instance of a &lt;code&gt;CallContextLifetimeScope&lt;/code&gt; type. It uses the &lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.remoting.messaging.callcontext.aspx"&gt;Call Context&lt;/a&gt; so it can be associated with thread pool threads and manually created threads within a &lt;em&gt;single&lt;/em&gt; AppDomain (it does not use the &lt;em&gt;Logical&lt;/em&gt; Call Context).&lt;/p&gt;

&lt;p&gt;On each request the Web API calls the &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fHttpRequestMessageExtensions.cs"&gt;GetDependencyScope&lt;/a&gt; extension method of the &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.http.httprequestmessage.aspx"&gt;HttpRequestMessage&lt;/a&gt; type, which, in return, calls it&amp;#39;s own &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fDependencies%2fIDependencyResolver.cs"&gt;BeginScope&lt;/a&gt; method to start a new resolution scope. Using our own implementation of the &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fDependencies%2fIDependencyResolver.cs"&gt;IDependencyResolver&lt;/a&gt; interface we always return a new instance of the WindsorDependencyScope type.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindsorDependencyResolver&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDependencyResolver&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="c1"&gt;// 'using' Directives and other type members removed for brevity.
&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IDependencyScope&lt;/span&gt; &lt;span class="nf"&gt;BeginScope&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WindsorDependencyScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Since we use the Scoped lifetime we need to define it also in the registration code. Then, we will always have at most one instance of each requested type per resolution scope (that is, a request).&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebWindsorInstaller&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IWindsorInstaller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IWindsorContainer&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IConfigurationStore&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Classes&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromAssemblyContaining&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ValuesController&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BasedOn&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHttpController&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LifestyleScoped&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The source code can be found &lt;a href="http://nikosbaxevanis.com/downloads/WebApiScopedLifetimeDependencyResolverSample.zip"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using the Web API Dependency Resolver with Castle Windsor (Part 2)</title>
    <link rel="alternate" href="/blog/2012/06/04/using-the-web-api-dependency-resolver-with-castle-windsor-part-2"/>
    <id>http://nikosbaxevanis.com/blog/2012/06/04/using-the-web-api-dependency-resolver-with-castle-windsor-part-2</id>
    <updated>2012-06-04T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href="http://blog.ploeh.dk/"&gt;Mark Seemann&lt;/a&gt; has provided a &lt;a href="http://blog.ploeh.dk/2012/10/03/DependencyInjectionInASPNETWebAPIWithCastleWindsor.aspx"&gt;solution&lt;/a&gt; without using the IDependencyResolver interface.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The code in this post requires the ASP.NET MVC 4 RC. If you use the Beta version use the code from &lt;a href="http://nikosbaxevanis.com/2012/03/16/using-the-web-api-dependency-resolver-with-castle-windsor/"&gt;this&lt;/a&gt; post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Among the many changes in ASP.NET MVC 4 RC, there is now added support for releasing object graphs, resolved on each request, using dependency scopes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a dependency scope per request&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since the IHttpControllerFactory interface has been &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/network/forks/jongalloway/aspnetwebstack/changeset/changes/f6a7f35302ba"&gt;removed&lt;/a&gt;, the recommendation (from the &lt;a href="http://www.asp.net/whitepapers/mvc4-release-notes#_Toc303253817"&gt;release notes&lt;/a&gt;) is to use the &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fDispatcher%2fIHttpControllerSelector.cs"&gt;IHttpControllerSelector&lt;/a&gt; interface to control &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fControllers%2fIHttpController.cs"&gt;IHttpController&lt;/a&gt; selection and the &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fDispatcher%2fIHttpControllerActivator.cs"&gt;IHttpControllerActivator&lt;/a&gt; interface to control IHttpController activation.&lt;/p&gt;

&lt;p&gt;Below is the IHttpControllerSelector interface:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;IHttpControllerSelector&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;HttpControllerDescriptor&lt;/span&gt; &lt;span class="nf"&gt;SelectController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpRequestMessage&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Other methods removed for brevity.
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;And the IHttpControllerActivator interface:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;IHttpControllerActivator&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;IHttpController&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;HttpRequestMessage&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;HttpControllerDescriptor&lt;/span&gt; &lt;span class="n"&gt;controllerDescriptor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;controllerType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Both interfaces contain method(s) accepting, among others, an &lt;a href="http://goo.gl/jsUg2"&gt;HttpRequestMessage&lt;/a&gt;. The trick here is to use the HttpRequestMessage&amp;#39;s extension method &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fHttpRequestMessageExtensions.cs"&gt;GetDependencyScope&lt;/a&gt; for resolving controllers (instead of using a DI Container directly).&lt;/p&gt;

&lt;p&gt;Internally, the GetDependencyScope method uses the DependencyResolver (registered in the GlobalConfiguration instance) calling it&amp;#39;s &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fDependencies%2fIDependencyResolver.cs"&gt;BeginScope&lt;/a&gt; method which &lt;strong&gt;creates a new resolution scope&lt;/strong&gt;. Objects that are resolved in that scope are tracked internally. Once the scope is disposed, those objects are released (using the container&amp;#39;s Release method).&lt;/p&gt;

&lt;p&gt;Below is an implementation of the IDependencyScope interface:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Dependencies&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReleasingDependencyScope&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDependencyScope&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IDependencyScope&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;WindsorDependencyScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDependencyScope&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scope&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;release&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;GetService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddToScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddToScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;AddToScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;params&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Having a custom implementation of the &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fDependencies%2fIDependencyScope.cs"&gt;IDependencyScope&lt;/a&gt; interface, we can now move on with the implementation of the &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fDependencies%2fIDependencyResolver.cs"&gt;IDependencyResolver&lt;/a&gt; interface. The recommendation (from the &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fDependencies%2fIDependencyResolver.cs"&gt;source code&lt;/a&gt;) is to return a new instance of IDependencyScope every time the BeginScope method is called.&lt;/p&gt;

&lt;p&gt;An implementation of the IDependencyResolver interface for Castle Windsor could be similar to the one below:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Dependencies&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Castle.Windsor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindsorDependencyResolver&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDependencyResolver&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IWindsorContainer&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;WindsorDependencyResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IWindsorContainer&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;GetService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HasComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ResolveAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Cast&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IDependencyScope&lt;/span&gt; &lt;span class="nf"&gt;BeginScope&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ReleasingDependencyScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As we can see, the BeginScope method returns a new instance of IDependencyScope which can resolve and release objects that belong to that scope.&lt;/p&gt;

&lt;p&gt;Moving next, when upgrading from Beta to RC there &lt;em&gt;might&lt;/em&gt; be another thing to consider. Since the IHttpControllerFactory interface has now been removed, implementations of that interface were using the &lt;em&gt;controllerName&lt;/em&gt; in order to resolve component instances from the DI Containers. As a result, controllers were registered in the DI Containers using names for each registration.&lt;/p&gt;

&lt;p&gt;To keep the &lt;em&gt;named&lt;/em&gt; registrations (and not break compatibility with any JavaScript clients) we can create a &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fDispatcher%2fDefaultHttpControllerSelector.cs"&gt;DefaultHttpControllerSelector&lt;/a&gt; derived type and override it&amp;#39;s SelectController method. We can then use the DefaultHttpControllerSelector&amp;#39;s GetControllerName method which returns the requested path name &lt;em&gt;(e.g. &amp;ldquo;Orders&amp;rdquo;)&lt;/em&gt;. At that point we can map that name to an &lt;a href="http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/a1b7c04f7227#src%2fSystem.Web.Http%2fApiController.cs"&gt;ApiController&lt;/a&gt; derived type &lt;em&gt;(ex.: OrderController)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A DefaultHttpControllerSelector derived type could be similar to the one below:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Net.Http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Reflection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Dispatcher&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PluralizedNameHttpControllerSelector&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DefaultHttpControllerSelector&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;HttpConfiguration&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;Assembly&lt;/span&gt; &lt;span class="n"&gt;controllerAssembly&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;PluralizedNameHttpControllerSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;HttpConfiguration&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Assembly&lt;/span&gt; &lt;span class="n"&gt;controllerAssembly&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;configuration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controllerAssembly&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controllerAssembly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;controllerAssembly&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;controllerAssembly&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;HttpControllerDescriptor&lt;/span&gt; &lt;span class="nf"&gt;SelectController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;HttpRequestMessage&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;controllerName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetControllerName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;controllerType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetControllerType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controllerName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpControllerDescriptor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllerName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllerType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="nf"&gt;GetControllerType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Look in 'this.controllerAssembly' and find the types that can be
&lt;/span&gt;        &lt;span class="c1"&gt;// assigned from an instance of IHttpController  and return the one
&lt;/span&gt;        &lt;span class="c1"&gt;// whose name matches with the given name.
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Make sure to register the above type in Castle Windsor otherwise the framework will pick it&amp;#39;s default implementation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All the above information is the result of browsing the source code on CodePlex. If any  articles or blog posts are released (by the ASP.NET team or individuals) I might create a new post with updates, if necessary.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Migrating from a blogging service to Jekyll and GitHub</title>
    <link rel="alternate" href="/blog/2012/05/25/migrating-from-a-blogging-service-to-jekyll-and-github"/>
    <id>http://nikosbaxevanis.com/blog/2012/05/25/migrating-from-a-blogging-service-to-jekyll-and-github</id>
    <updated>2012-05-25T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Since 2010, and until a week ago, I had my site powered up and hosted by a paid &lt;strong&gt;blogging service&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;good&lt;/strong&gt; thing with (paid) blogging services is that they handle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Storage for posts&lt;/li&gt;
&lt;li&gt;Storage for comments&lt;/li&gt;
&lt;li&gt;Atom and/or RSS feeds&lt;/li&gt;
&lt;li&gt;Support for social networking services&lt;/li&gt;
&lt;li&gt;Site analytics&lt;/li&gt;
&lt;li&gt;Themes&lt;/li&gt;
&lt;li&gt;Customisation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;bad&lt;/strong&gt; thing with blogging services is that they own your content and are very limited when it comes to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access the files via FTP client(s).&lt;/li&gt;
&lt;li&gt;Backup/Export posts&lt;/li&gt;
&lt;li&gt;Backup/Export comments&lt;/li&gt;
&lt;li&gt;Customise the creation of web feeds&lt;/li&gt;
&lt;li&gt;Add new social networking services&lt;/li&gt;
&lt;li&gt;Add new themes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I believe that nowadays all the above stuff is trivial so it should be done in very simple way.&lt;/p&gt;

&lt;p&gt;Thus, one &lt;strong&gt;should be able&lt;/strong&gt; to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compose posts on &lt;a title="Dillinger is a cloud-enabled HTML5 Markdown editor." href="http://dillinger.io/"&gt;Dillinger&lt;/a&gt;, &lt;a title="MarkdownPad is a full-featured Markdown editor for Windows." href="http://markdownpad.com/"&gt;MarkdownPad&lt;/a&gt; or even &lt;a title="A fast and light-weight Notepad-like text editor with syntax highlighting. This program can be run out of the box without installation, and does not touch your system's registry." href="http://www.flos-freeware.ch/notepad2.html"&gt;Notepad2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Customize and style a site using open source templating systems, markdown engines and syntax highlighting tools.&lt;/li&gt;
&lt;li&gt;Host the generated output on any web server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, I do believe that in the future we will use (&lt;strong&gt;even more&lt;/strong&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter for social networking and microblogging.&lt;/li&gt;
&lt;li&gt;GitHub for open source and commercial closed source project hosting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all the above and since GitHub allows for publishing web content I decided to move into that direction. The migration was successful.&lt;/p&gt;

&lt;p&gt;This site is now powered by &lt;a title="Jekyll is a blog-aware, static site generator in Ruby" href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt;. Using &lt;a href="http://github.com/tsmango/jekyll_alias_generator"&gt;this&lt;/a&gt; plugin I was able to keep all the old permalinks and redirect to the new ones.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The only &lt;a href="https://github.com/mojombo/jekyll/issues/325"&gt;limitation&lt;/a&gt; I came across is that GitHub runs Jekyll with the &amp;ndash;safe switch and it will not load any custom plugins (for security reasons). However, one can run the site locally and copy the output that is being generated by the plugin and include it in the source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some key &lt;strong&gt;highlights&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Posts can now be written using &lt;a title="Markdown is a lightweight markup language, originally created by John Gruber and Aaron Swartz allowing people to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML or HTML." href="http://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The site can be previewed locally by installing the Jekyll  &lt;a href="http://rubygems.org/gems/jekyll"&gt;Gem&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The creation of web feeds is highly customisable.&lt;/li&gt;
&lt;li&gt;The format of &lt;a href="https://github.com/mojombo/jekyll/wiki/Permalinks"&gt;permalinks&lt;/a&gt; is very flexible.&lt;/li&gt;
&lt;li&gt;On each push, GitHub transforms the code (using Jekyll) into a static site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like it pretty good, let&amp;#39;s see how it goes.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>xUnit.net and AsyncEnumerator to Async and Await</title>
    <link rel="alternate" href="/blog/2012/05/06/xunit-dot-net-and-asyncenumerator-to-async-and-await"/>
    <id>http://nikosbaxevanis.com/blog/2012/05/06/xunit-dot-net-and-asyncenumerator-to-async-and-await</id>
    <updated>2012-05-06T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Prior to .NET 4,&amp;#0160;one had to implement the &lt;a href="http://msdn.microsoft.com/en-us/magazine/cc163467.aspx" target="_blank" title="Implementing the CLR Asynchronous Programming Model."&gt;APM&lt;/a&gt; model in order to expose asynchronous methods. After a couple of years, the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-gb/magazine/cc546608.aspx" target="_blank" title="Simplified APM With The AsyncEnumerator."&gt;AsyncEnumerator&lt;/a&gt;&amp;#0160;class came out to&amp;#0160;simplify the APM by leveraging the use&amp;#0160;of C# iterators for asynchrony. In the meantime,&amp;#0160;Microsoft developed a&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/dd460693.aspx" target="_blank" title="Parallel Programming in the .NET Framework."&gt;new&lt;/a&gt;&amp;#0160;model for asynchronous (and parallel) programming. Since the new model was targeting the&amp;#0160;.NET 4, code written in previous versions have to keep using the AsyncEnumerator class.&lt;/p&gt;

&lt;p&gt;I&amp;#0160;&lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2010/10/an-alternative-net-20-approach-to-the-task-based-asynchronous-pattern.html" target="_blank" title="An alternative (.NET 2.0+) approach to the Task-based Asynchronous Pattern."&gt;have&lt;/a&gt;&amp;#0160;&lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2011/07/async-rest-client-for-scrumy-api.html" target="_blank" title="Async REST Client for the Scrumy API."&gt;been&lt;/a&gt;&amp;#0160;&lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2010/11/going-asynchronous-with-sterling-for-windows-phone-7.html" target="_blank" title="Going Asynchronous with Sterling for Windows Phone 7."&gt;using&lt;/a&gt;&amp;#0160;&lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2010/10/exposing-asynchronous-features-to-client-code-windows-phone-edition.html" target="_blank" title="Exposing asynchronous features to client code: Windows Phone 7."&gt;the&lt;/a&gt;&amp;#0160;AsyncEnumerator class since 2008 and it works great. Today we have the new Async and Await keywords in C# 5.0 (together with the &lt;a href="http://blogs.microsoft.co.il/blogs/sasha/archive/2011/09/17/improvements-in-the-clr-core-in-net-framework-4-5.aspx" target="_blank"&gt;many&lt;/a&gt; &lt;a href="http://blogs.msdn.com/b/dotnet/archive/2011/10/03/large-object-heap-improvements-in-net-4-5.aspx" target="_blank"&gt;improvements&lt;/a&gt;&amp;#0160;in the CLR) that will ship with .NET 4.5 and the recently added support for&amp;#0160;async unit tests on&amp;#0160;&lt;a href="http://xunit.codeplex.com/releases/view/77573" target="_blank"&gt;version 1.9&lt;/a&gt;&amp;#0160;of the&amp;#0160;&lt;a href="http://xunit.codeplex.com/" target="_blank" title="xUnit.net is a unit testing tool for the .NET Framework. Written by the original inventor of NUnit, xUnit.net is the latest technology for unit testing C#, F#, VB.NET and other .NET languages."&gt;xUnit.net&lt;/a&gt;.&amp;#0160;So, I decided to move some .NET 2.0 code using AsyncEnumerator to .NET 4.5 using Async and Await.&lt;/p&gt;

&lt;p&gt;Below is an interface of the sample type (described in &lt;a href="http://msdn.microsoft.com/en-us/magazine/cc163467.aspx" target="_blank" title="Implementing the CLR Asynchronous Programming Model."&gt;this&lt;/a&gt; article) exposing both synchronous and asynchronous versions of a time-consuming method:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;IMyType&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Synchronous version of time-consuming method.
&lt;/span&gt;    &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="nf"&gt;DoSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Asynchronous version of time-consuming method (Begin part).
&lt;/span&gt;    &lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="nf"&gt;BeginDoSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AsyncCallback&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Asynchronous version of time-consuming method (End part).
&lt;/span&gt;    &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="nf"&gt;EndDoSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="n"&gt;asyncResult&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;A unit test with the AsyncEnumerator can be similar to the one shown below:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AsyncEnumerator&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginDoSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;End&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndDoSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DequeueAsyncResult&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;However, since xUnit.net does not support methods of type IEnumerator&amp;lt;int&amp;gt;, we need to tell xUnit.net how to execute them:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;D&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Drive the D method's iterator asynchronously.
&lt;/span&gt;    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AsyncEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Moving to .NET 4.5 and xUnit.net 1.9 we can create an &lt;a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx" target="_blank" title="Extension methods enable you to &amp;quot;add&amp;quot; methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type."&gt;Extension Method&lt;/a&gt; that returns a &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.task.aspx" target="_blank" title="Represents an asynchronous operation."&gt;Task&lt;/a&gt; in order to use both the Async and Await keywords in production code and the async unit tests feature of xUnit.net.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="c1"&gt;// Task-based asynchronous version of time-consuming method.
&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;DoSomethingAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IMyType&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="n"&gt;Factory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginDoSomething&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndDoSomething&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now the previous unit test with the AsyncEnumerator can be rewritten as follow:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;D&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DoSomethingAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This looks very nice and clean. As it seems though, if the class contains many async unit tests they will not run in parallel.&amp;#0160;&lt;/p&gt;

&lt;p&gt;As an example, the following 3 tests will take 3 x 5 = 15 seconds to complete:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DoSomethingAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DoSomethingAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DoSomethingAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The output from xUnit.net:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;Output&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AsyncUnitTesting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyTypeTests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Started&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt; &lt;span class="n"&gt;AM&lt;/span&gt;
  &lt;span class="n"&gt;Finished&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="n"&gt;AM&lt;/span&gt;

&lt;span class="n"&gt;Output&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AsyncUnitTesting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyTypeTests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Started&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="n"&gt;AM&lt;/span&gt;
  &lt;span class="n"&gt;Finished&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;55&lt;/span&gt; &lt;span class="n"&gt;AM&lt;/span&gt;

&lt;span class="n"&gt;Output&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AsyncUnitTesting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyTypeTests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Started&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="n"&gt;AM&lt;/span&gt;
  &lt;span class="n"&gt;Finished&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="n"&gt;AM&lt;/span&gt;

&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;took&lt;/span&gt; &lt;span class="m"&gt;15.26&lt;/span&gt; &lt;span class="nf"&gt;seconds&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="m"&gt;1.9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="m"&gt;1566&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;That was the part of moving the unit tests from an older version of xUnit.net (and the AsyncEnumerator) to version 1.9 of xUnit.net (with Async and Await).&amp;#0160;Apparently, things become more challenging when moving to production code where one needs to deal with stuff such is the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext(v=vs.110).aspx" target="_blank" title="Provides the basic functionality for propagating a synchronization context in various synchronization models."&gt;SyncrhonizationContext&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A gist with all the source code can be found&amp;#0160;&lt;a href="https://gist.github.com/2604956" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>URI support in AutoFixture</title>
    <link rel="alternate" href="/blog/2012/04/19/uri-support-in-autofixture"/>
    <id>http://nikosbaxevanis.com/blog/2012/04/19/uri-support-in-autofixture</id>
    <updated>2012-04-19T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Starting with version 2.10.0, AutoFixture supports the creation of &lt;a href="http://en.wikipedia.org/wiki/Uniform_resource_identifier" target="_blank" title="In computing, a uniform resource identifier (URI) is a string of characters used to identify a name or a resource. Such identification enables interaction with representations of the resource over a network (typically the World Wide Web) using specific protocols. Schemes specifying a concrete syntax and associated protocols define each URI."&gt;Uniform Resource Identifiers&lt;/a&gt;&amp;#0160;and the &lt;a href="http://msdn.microsoft.com/en-us/library/system.uri(v=vs.90).aspx" target="_blank" title="Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI."&gt;Uri&lt;/a&gt;&amp;#0160;type.&lt;/p&gt;

&lt;p&gt;It is now possible to create an anonymous variable for Uri as with any other common type:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Prints -&amp;gt; scheme://257eb39a-8305-4d13-a7cb-0c481b78809a/
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;By default, both the &lt;strong&gt;scheme name&lt;/strong&gt;&amp;#0160;and the &lt;strong&gt;authority&lt;/strong&gt;&amp;#0160;part are obtained from the context. A custom&amp;#0160;&lt;em&gt;UriScheme&lt;/em&gt; class represents the URI scheme name while the authority&amp;#0160;part is an anonymous variable of type string.&lt;/p&gt;

&lt;p&gt;Example URIs along with their component parts can be found&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/URI_scheme#Examples" target="_blank"&gt;here&lt;/a&gt;.&amp;#0160;Since both parts are received from the context, they can be easily customized.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Supplying a custom scheme name&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The UriScheme type provides by default the name &lt;em&gt;&amp;ldquo;scheme&amp;rdquo;.&lt;/em&gt;&amp;#0160;However, by injecting a specific instance of this type we can easily override it with something else (e.g. &amp;ldquo;&lt;em&gt;http&amp;rdquo;&lt;/em&gt;).&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UriScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt; 
&lt;span class="c1"&gt;// Prints -&amp;gt; http://abc9f406-16f2-4e06-b6f9-0750dc115ac3/
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Supplying a custom authority&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is preferred only when each test constructs its own instance of the Fixture type since this change will apply for all the strings received from the context.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since the authority part is a string received from the context, it is possible to modify the base of all strings and get the desired name for the authority.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Customizations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StringGenerator&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;autofixture.codeplex.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt; 
&lt;span class="c1"&gt;// Prints -&amp;gt; scheme://autofixture.codeplex.com/
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Supplying a custom Uri&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As with any other generated specimen, it is possible to completely take over it&amp;#39;s creation. Using a custom&amp;#0160;ISpecimenBuilder type, each time a Uri is requested, a predefined Uri will be returned.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomUriBuilder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ISpecimenBuilder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ISpecimenContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://autofixture.codeplex.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NoSpecimen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Customizations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CustomUriBuilder&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt; 
&lt;span class="c1"&gt;// Prints -&amp;gt; http://autofixture.codeplex.com/
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;An automatically published release created from the latest successful build can be downloaded from&amp;#0160;&lt;a href="http://autofixture.codeplex.com/releases/view/85801" target="_blank" title="AutoFixture - Downloads"&gt;here&lt;/a&gt;.&amp;#0160;The latest version is also live on&amp;#0160;&lt;a href="http://nuget.org/List/Packages/AutoFixture" target="_blank" title="AutoFixture - Package"&gt;NuGet&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Extending A Legacy System to the Web</title>
    <link rel="alternate" href="/blog/2012/04/16/extending-a-legacy-system-to-the-web"/>
    <id>http://nikosbaxevanis.com/blog/2012/04/16/extending-a-legacy-system-to-the-web</id>
    <updated>2012-04-16T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;An ISV sells ordering and billing systems written in C/C++ and VB6. Each system is consisted of &lt;em&gt;two components&amp;#0160;&lt;/em&gt;and all&amp;#0160;&lt;em&gt;share &lt;/em&gt;a relational database&amp;#0160;containing Tables, Views and Stored Procedures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Legacy System&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;server&amp;#0160;&lt;/em&gt;component does the data&amp;#0160;&lt;em&gt;processing&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;accepting &lt;strong&gt;commands&lt;/strong&gt; from the clients.&amp;#0160;The commands are stored inside a&amp;#0160;predefined directory&amp;#0160;in the form of ASCII-encoded text files.&amp;#0160;The legacy*&amp;#0160;command processor repeatedly checks for new text file availability. If a text file is available, it will be processed. This is a continuous process.&amp;#0160;The only way to update the database is to create and send a command which will be picked up and handled sequentially by the command processor.&amp;#0160;When a command is handled successfully, the system updates the shared database.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;client&amp;#0160;&lt;/em&gt;component connects to the shared &lt;strong&gt;database&lt;/strong&gt; (accessed in a &lt;strong&gt;read-only&lt;/strong&gt; fashion) to display data on screen and to send pre-defined commands. The client is either a VB6 GUI or a handheld radio device similar to &lt;a href="http://www.orderman.com/en/handhelds/don.html" target="_blank"&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8465/8398554626_4e1f7962c3_o.png" alt="A legacy system" /&gt;&lt;/p&gt;

&lt;p&gt;Nowdays, in order to reach the mobile market, it is quite difficult (and expensive) to maintain and expand the above client as-is. However, since each of the components has no knowledge of the other separate component,&amp;#0160;&lt;strong&gt;the client can be easily replaced&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moving to HTTP services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The new HTML5 client will consume HTTP services. A service here act as the entry point for creating the&amp;#0160;ASCII-encoded text files which will be picked up by the legacy command processor.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8047/8397465951_247d62192f_o.png" alt="Moving to HTTP services" /&gt;&lt;/p&gt;

&lt;p&gt;When the application wants to submit data to be processed (by the legacy command processor) it sends a POST request. At this point, the new system creates a message which is send via a&amp;#0160;&lt;a href="http://www.eaipatterns.com/DatatypeChannel.html" target="_blank" title="By using a separate Datatype Channel for each type of data, all of the messages on a given channel will contain the same type of data. The sender, knowing what type the data is, will need to select the appropriate channel to send it on. The receiver, knowing what channel the data was received on, will know what its type is."&gt;Datatype Channel&lt;/a&gt;&amp;#0160;to its receiver.&lt;/p&gt;

&lt;p&gt;The receiver, of each particular message, forwards the processing of the command. A compatible text file is created, which will be picked up by the legacy command processor in order to update the database.&lt;/p&gt;

&lt;p&gt;When the application wants to&amp;#0160;retrieve data it sends a GET request. At that point, the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/system.web.http.apicontroller(v=vs.108).aspx" target="_blank"&gt;ApiController&lt;/a&gt;&amp;#0160;uses a&amp;#0160;&lt;a href="http://martinfowler.com/eaaCatalog/gateway.html" target="_blank" title="An object that encapsulates access to an external system or resource."&gt;Gateway&lt;/a&gt;&amp;#0160;&lt;em&gt;(and internally&amp;#0160;&lt;a href="http://code.google.com/p/dapper-dot-net/" target="_blank" title="Dapper is a single file you can drop in to your project that will extend your IDbConnection interface. It is in production use at Stack Overflow."&gt;Dapper&lt;/a&gt;)&lt;/em&gt; to access the shared database.&lt;/p&gt;

&lt;p&gt;On refresh, the client sends a new GET request and the ApiController will return the updated data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moving to Smartphones, Tablets and HTML5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, the client&amp;#0160;part has to be&amp;#0160;&lt;em&gt;re-&lt;/em&gt;built with HTML5. That way, it will be accessible from the browser, Internet Tablets (similar to&amp;#0160;&lt;a href="http://www.archos.com/products/ta/archos_43it/index.html?country=us&amp;amp;lang=en" target="_blank"&gt;this one&lt;/a&gt;), and&amp;#0160;Smartphones.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8324/8398554562_9909bb1f56_o.png" alt="Moving to Smartphones, Tablets and HTML5" /&gt;&lt;/p&gt;

&lt;p&gt;Initially,&amp;#0160;&lt;a href="http://www.sencha.com/products/touch" target="_blank" title="Sencha Touch is a user interface (UI) JavaScript library, or framework, specifically built for Mobile Web."&gt;Sencha Touch&lt;/a&gt;&amp;#0160;was a very good choice. &lt;span style="text-decoration: line-through;"&gt;It even has a&amp;#0160;&lt;a href="http://www.sencha.com/blog/sencha-designer-2-beta-announcement" target="_blank"&gt;designer&lt;/a&gt;.&lt;/span&gt;&amp;#0160;There is even &lt;a href="http://www.sencha.com/products/architect/" target="_blank" title="A WYSIWYG IDE for Building Desktop and Mobile HTML5 Applications."&gt;Sencha Architect&lt;/a&gt;. Everything is written in JavaScript (which is good) and everything runs fast while testing on iPhone, iPad and other&amp;#0160;similar devices with fast hardware.&lt;/p&gt;

&lt;p&gt;The company however is willing to sell the final product to a price which includes the cost of the devices.&amp;#0160;(That is, a license for 5 users should also include the purchase of 5 mobile devices.) This&amp;#0160;means that the price for the devices can become orders of magnitude higher than the actual price of the application itself.&lt;/p&gt;

&lt;p&gt;The above lead to the fact that the application must ship with a&amp;#0160;&lt;em&gt;not-so-expensive&lt;/em&gt;&amp;#0160;device. After doing some testing and comparison with other devices, a Sencha Touch application did not perform smoothly in slower hardware (like&amp;#0160;&lt;a href="http://www.archos.com/products/ta/archos_43it/specs.html?country=us&amp;amp;lang=en" target="_blank"&gt;this one&lt;/a&gt;). (The most annoying part was the scrolling.)&lt;/p&gt;

&lt;p&gt;After trying&amp;#0160;&lt;a href="http://addyosmani.github.com/todomvc/" target="_blank" title="TodoMVC: A common learning application for popular JavaScript MV* frameworks."&gt;everything&lt;/a&gt;&amp;#0160;it looks like&amp;#0160;&lt;a href="http://jquerymobile.com/" target="_blank" title="jQuery Mobile: Touch-Optimized Web Framework for Smartphones &amp;amp; Tablets."&gt;jQuery Mobile&lt;/a&gt;&amp;#0160;combined with &lt;a href="http://mustache.github.com/" target="_blank" title="Logic-less templates.  Available in Ruby, JavaScript, Python, Erlang, PHP, Perl, Objective-C, Java, .NET, Android, C++, Go, Lua, ooc, ActionScript, ColdFusion, Scala, Clojure, Fantom, CoffeeScript, D, and for node.js."&gt;mustache&lt;/a&gt;&amp;#0160;are the best choices in terms of performance. The redistributable file is packed with&amp;#0160;&lt;a href="http://phonegap.com/" target="_blank" title="PhoneGap enables software programmers to build applications for mobile devices using JavaScript, HTML5 and CSS3, instead of lower-level languages."&gt;PhoneGap&lt;/a&gt;&amp;#0160;and&amp;#0160;the application performs well even on slower hardware giving the flexibility to select among a wide range of mobile devices.&lt;/p&gt;

&lt;p&gt;&lt;span style="font-size: 8pt;"&gt;*&amp;ldquo;&lt;em&gt;Legacy&lt;/em&gt;&amp;rdquo; The definition that&amp;#0160;Michael C. Feathers gives in his excellent&amp;#0160;&lt;a href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052" target="_blank" title="Working Effectively with Legacy Code"&gt;book&lt;/a&gt;.&lt;/span&gt;&lt;span style="font-size: 11px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using the Web API Dependency Resolver with Castle Windsor</title>
    <link rel="alternate" href="/blog/2012/03/16/using-the-web-api-dependency-resolver-with-castle-windsor"/>
    <id>http://nikosbaxevanis.com/blog/2012/03/16/using-the-web-api-dependency-resolver-with-castle-windsor</id>
    <updated>2012-03-16T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;The code in this post requires the ASP.NET MVC 4 Beta. If you use the RC version use the code from &lt;a href="http://nikosbaxevanis.com/2012/06/04/using-the-web-api-dependency-resolver-with-castle-windsor-part-2/"&gt;this&lt;/a&gt; post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href="http://blog.ploeh.dk"&gt;Mark Seemann&lt;/a&gt; has provided a &lt;a href="http://blog.ploeh.dk/2012/03/20/RobustDIWithTheASPNETWebAPI.aspx"&gt;great post&lt;/a&gt; on this subject.
&lt;p&gt;In this post I will discuss a possible solution for having Castle Windsor resolving types for both MVC controllers and Web API controllers. Since the former is well known I will focus mostly on the Web API part.&lt;/p&gt;
&lt;p&gt;A team building a mobile web application uses the&amp;nbsp;ASP.NET&amp;nbsp;MVC stack combined with another web services framework. With the release of the Beta version of&amp;nbsp;ASP.NET&amp;nbsp;MVC 4 they decided to give Web API a try (side by side with MVC controllers) and see if it fits their needs.&lt;/p&gt;
&lt;p&gt;The&amp;nbsp;&lt;a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.controller.aspx" target="_blank"&gt;Controller&lt;/a&gt;-derived types are used only for rendering the views (the code is written in JavaScript) while the&amp;nbsp;&lt;a href="http://msdn.microsoft.com/en-us/library/system.web.http.apicontroller(v=vs.108).aspx" target="_blank"&gt;ApiController&lt;/a&gt;-derived types are used for returning &amp;nbsp;data to the client.&lt;/p&gt;
&lt;p&gt;The&amp;nbsp;&lt;a href="http://msdn.microsoft.com/en-us/library/system.web.http.services.dependencyresolver(v=vs.108).aspx" target="_blank"&gt;DependencyResolver&lt;/a&gt;&amp;nbsp;class provides a method called&amp;nbsp;&lt;a href="http://msdn.microsoft.com/en-us/library/hh834083(v=vs.108).aspx" target="_blank"&gt;SetResolver&lt;/a&gt;&amp;nbsp;which acts as a registration point for resolving dependencies.&lt;/p&gt;
&lt;blockquote&gt;Be careful as there are more than one DependencyResolver types. One defined in System.Web.Mvc namespace and one defined in System.Web.Http namespace. We need the latter here.&lt;/blockquote&gt;
&lt;p&gt;Once we define the delegates and set a breakpoint we can see what types the framework requests.&lt;/p&gt;
&lt;p&gt;At first an instance of the IHttpControllerFactory type is requested:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8506/8397459253_439417138a_o.png" alt="IHttpControllerFactory type is requested" /&gt;&lt;/p&gt;
&lt;p&gt;Followed by a request for an instance of the ILogger type and so on.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8073/8398547788_242021568e_o.png" alt="ILogger type is requested" /&gt;&lt;/p&gt;
&lt;p&gt;The first thing we want to do is to create a type implementing the IHttpControllerFactory interface.&lt;/p&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Dispatcher&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Castle.MicroKernel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindsorHttpControllerFactory&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IHttpControllerFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;HttpConfiguration&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IKernel&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;WindsorHttpControllerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;HttpConfiguration&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;IKernel&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IHttpController&lt;/span&gt; &lt;span class="nf"&gt;CreateController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;HttpControllerContext&lt;/span&gt; &lt;span class="n"&gt;controllerContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;controllerName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resolve&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHttpController&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;controllerName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;controllerContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;controllerContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ControllerDescriptor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpControllerDescriptor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="n"&gt;controllerName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;controllerContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ReleaseController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHttpController&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReleaseComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Note that inside the WindsorHttpControllerFactory class the CreateController method&amp;nbsp;&amp;nbsp;takes a string for the name of the controller. That means we need to use the Windsor&amp;rsquo;s&amp;nbsp;&lt;em&gt;Named&amp;nbsp;&lt;/em&gt;method to set a name for each controller registration. (We can also trim the &amp;ldquo;Controller&amp;rdquo; part from the name and also pluralize the remaining part.)&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OrderController&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetTypes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHttpController&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;IsAssignableFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// https://github.com/srkirkland/Inflector/
&lt;/span&gt;    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Inflector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Pluralize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Controller&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Component&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;For&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Named&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LifestylePerWebRequest&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s also create a NullLogger implementing the ILogger interface.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Diagnostics&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Common&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NullLogger&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ILogger&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TraceLevel&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;messageCallback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;LogException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TraceLevel&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;For all the other instances that the framework requests there are default implementations in the System.Web.* assemblies and we can now create a Windsor&amp;nbsp;&lt;a href="http://stw.castleproject.org/Default.aspx?Page=Installers&amp;amp;NS=Windsor&amp;amp;AspxAutoDetectCookieSupport=1" target="_blank"&gt;Installer&lt;/a&gt;&amp;nbsp;to encapsulate the registration logic.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Net.Http.Formatting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Common&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Dispatcher&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Metadata&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.Metadata.Providers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Http.ModelBinding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Castle.MicroKernel.Registration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Castle.MicroKernel.SubSystems.Configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Castle.Windsor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebApiInstaller&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IWindsorInstaller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IWindsorContainer&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IConfigurationStore&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHttpControllerFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImplementedBy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WindsorHttpControllerFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LifestyleSingleton&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

            &lt;span class="n"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ILogger&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImplementedBy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NullLogger&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LifestyleSingleton&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

            &lt;span class="n"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IFormatterSelector&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImplementedBy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FormatterSelector&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LifestyleSingleton&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

            &lt;span class="n"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHttpControllerActivator&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImplementedBy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DefaultHttpControllerActivator&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LifestyleTransient&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

            &lt;span class="n"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHttpActionSelector&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImplementedBy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ApiControllerActionSelector&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LifestyleTransient&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

            &lt;span class="n"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionValueBinder&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImplementedBy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DefaultActionValueBinder&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LifestyleTransient&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

            &lt;span class="n"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHttpActionInvoker&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImplementedBy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ApiControllerActionInvoker&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LifestyleTransient&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

            &lt;span class="n"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ModelMetadataProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImplementedBy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CachedDataAnnotationsModelMetadataProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LifestyleTransient&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

            &lt;span class="n"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpConfiguration&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GlobalConfiguration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In the&amp;nbsp;Application_Start method we add the installer and set the delegates for the SetResolver method. That way when the framework requests an IHttpControllerFactory instance, Windsor will supply the one we created earlier.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WindsorContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WebApiInstaller&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="n"&gt;GlobalConfiguration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceResolver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;serviceType&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceType&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;serviceType&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ResolveAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceType&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Cast&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In order to have Windsor resolve regular controllers (side by side) we can create and add another installer as well as an implementation of the IControllerFactory interface.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WindsorContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WebMvcInstaller&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WebApiInstaller&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="n"&gt;GlobalConfiguration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceResolver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;serviceType&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceType&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;serviceType&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ResolveAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceType&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Cast&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;());&lt;/span&gt;

&lt;span class="n"&gt;ControllerBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetControllerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WindsorControllerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, a&amp;nbsp;gist with all the source code can be found &lt;a href="https://gist.github.com/2044349" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://forums.asp.net/t/1770736.aspx/" target="_blank"&gt;Web Api / Implementing IHttpControllerFactory.CreateController&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forums.asp.net/t/1772519.aspx/" target="_blank"&gt;Web Api /&amp;nbsp;How do I use Windsor?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Dynamic Proxy overriding Equals in AutoFixture Likeness</title>
    <link rel="alternate" href="/blog/2012/02/20/dynamic-proxy-overriding-equals-in-autofixture-likeness"/>
    <id>http://nikosbaxevanis.com/blog/2012/02/20/dynamic-proxy-overriding-equals-in-autofixture-likeness</id>
    <updated>2012-02-20T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;From version 2.9.0 of AutoFixture, the&amp;nbsp;&lt;a href="http://blog.ploeh.dk/2010/06/29/IntroducingAutoFixtureLikeness.aspx" target="_blank"&gt;Likeness&lt;/a&gt;&amp;nbsp;class contains a new feature for&amp;nbsp;creating a dynamic proxy that overrides Equals on the destination type.&lt;/p&gt;

&lt;p&gt;As an example, we want to compare instances of the following types:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DoubleParameterType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DoubleParameterType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T1&lt;/span&gt; &lt;span class="n"&gt;parameter1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T2&lt;/span&gt; &lt;span class="n"&gt;parameter2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parameter1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parameter1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parameter2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parameter2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;T1&lt;/span&gt; &lt;span class="n"&gt;Parameter1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;T2&lt;/span&gt; &lt;span class="n"&gt;Parameter2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SingleParameterType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;SingleParameterType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;parameter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parameter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;Parameter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We can have the following syntax (prior to version 2.9.0):&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TestWithLikeness&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Fixture setup
&lt;/span&gt;    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DoubleParameterType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Likeness&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DoubleParameterType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;SingleParameterType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt; 
        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AsSource&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfLikeness&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SingleParameterType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Exercise system
&lt;/span&gt;    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Verify outcome
&lt;/span&gt;    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;However, from version 2.9.0 there is also a new CreateProxy method on Likeness which returns a proxy of the destination type overriding Equals with Likeness&amp;rsquo;s instance of IEqualityComparer&amp;nbsp;(the SemanticComparer class):&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TestWithLikenessProxy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Fixture setup
&lt;/span&gt;    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DoubleParameterType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SingleParameterType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;
        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AsSource&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfLikeness&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SingleParameterType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateProxy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Exercise system
&lt;/span&gt;    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Verify outcome
&lt;/span&gt;    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Below is also an example, where we need to verify that an expectation was met:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bar&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Bar&lt;/span&gt; &lt;span class="n"&gt;Bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DoSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ISomeContext&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bar&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;12345&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DoSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;ISomeContext&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DoSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ISomeContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DoSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;AsSource&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;OfLikeness&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;CreateProxy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DoSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Although the new Bar instance is created inside the DoSomething method, we can pass a &lt;em&gt;proxied &lt;/em&gt;Bar instance on the mock&amp;rsquo;s Verify method.&lt;/p&gt;

&lt;p&gt;Internally, a custom Proxy Generator was written which also&amp;nbsp;supports types with non-parameterless constructors.&amp;nbsp;In order to create proxies of such types, the values from the source have to be compatible with the parameters on the destination constructor.&amp;nbsp;(The mapping between the two is made possible by using the same semantic heuristics, as the default semantic comparison.)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Test-After Development Sins (Ignoring cross-cutting concerns)</title>
    <link rel="alternate" href="/blog/2012/02/18/test-after-development-sins-ignoring-cross-cutting-concerns"/>
    <id>http://nikosbaxevanis.com/blog/2012/02/18/test-after-development-sins-ignoring-cross-cutting-concerns</id>
    <updated>2012-02-18T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;A&amp;#0160;&lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2012/01/test-after-development-sins-introduction.html" target="_blank" title="&amp;quot;Test-After Development&amp;quot; Sins: Introduction"&gt;series&lt;/a&gt;&amp;#0160;of articles exploring the impact of writing tests&amp;#0160;&lt;em&gt;after&amp;#0160;&lt;/em&gt;the code is written&amp;#0160;on the implementation part of&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Software_development_process" target="_blank" title="A software development process, also known as a software development life cycle (SDLC), is a structure imposed on the development of a software product."&gt;SDLC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;Sin No.3&lt;/span&gt;: Ignoring cross-cutting concerns.&lt;/p&gt;

&lt;p&gt;The problem with this approach becomes very clear. It will be hard and tedious work, inside each test, to create stubs and mocks for each and every aspect.&amp;#0160;The intent of the unit tests will also look wrong since, in reality, these aspects should not be treated as&lt;em&gt;&amp;#0160;&lt;/em&gt;dependencies of the&amp;#0160;&lt;a href="http://xunitpatterns.com/SUT.html" target="_blank" title="The &amp;quot;system under test&amp;quot;. It is short for &amp;quot;whatever thing we are testing&amp;quot; and is always defined from the perspective of the test."&gt;SUT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Among others, logging and caching are cross-cutting concerns that can easily slip through the services (making us treat them as normal dependencies).&amp;#0160;&lt;/p&gt;

&lt;p&gt;While the preferred way to model these aspects is using decorators and/or dynamic interceptors,&amp;#0160;there are many times that we see classes violating the&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" title="In object-oriented programming, the single responsibility principle states that every object should have a single responsibility, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility."&gt;SRP&lt;/a&gt;&amp;#0160;containing &lt;em&gt;all-in-one&lt;/em&gt; logging, caching, auditing and other aspects (and even violating the&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Interface_segregation_principle" target="_blank" title="The notion that many client specific interfaces are better than one general purpose interface."&gt;ISP&lt;/a&gt;&amp;#0160;with a coarse-grained&amp;#0160;&lt;a href="http://martinfowler.com/bliki/HeaderInterface.html" target="_blank" title="A header interface is an explicit interface that mimics the implicit public interface of a class. Essentially you take all the public methods of a class and declare them in an interface."&gt;Header Interface&lt;/a&gt;).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Parameterized Tests for ServiceStack Web Services</title>
    <link rel="alternate" href="/blog/2012/02/18/parameterized-tests-for-servicestack-web-services"/>
    <id>http://nikosbaxevanis.com/blog/2012/02/18/parameterized-tests-for-servicestack-web-services</id>
    <updated>2012-02-18T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;I have been using ServiceStack&amp;#39;s &lt;a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.ServiceInterface/RestServiceBase.cs" target="_blank"&gt;RestServiceBase&lt;/a&gt;&amp;#0160;class with great success.&amp;#0160;Because of that I started looking for ways to automate a &lt;a href="http://xunitpatterns.com/Layer%20Test.html" target="_blank" title="Also known as: Single Layer Test, Testing by Layers, Layered Test."&gt;Layer Test&lt;/a&gt; for a simple scenario where a&amp;#0160;client requests a representation of a resource using GET and/or submits data to be processed to the identified resource using POST.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryService&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RestServiceBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;OnGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;OnPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I found a very nice&amp;#0160;&lt;a href="https://github.com/ServiceStack/ServiceStack/wiki/HowTo-write-unit-integration-tests" target="_blank"&gt;entry&lt;/a&gt; on the wiki and after writting a couple of tests I realized that I was repating the following steps over and over:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Copy the base URI on each test case.&lt;/li&gt;
&lt;li&gt;Create a new instance of the &lt;a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/ServiceClient.Web/JsonServiceClient.cs" target="_blank"&gt;JsonRestClient&lt;/a&gt; class (and preferably cast to &lt;a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Service/IRestClient.cs" target="_blank"&gt;IRestClient&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;restClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IRestClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JsonServiceClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost:5000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;One solution is to have the base URI (and even the IRestClient) on a private field inside the test class and use it from all tests.&amp;#0160;However, a better approach would be to write&amp;#0160;&lt;a href="http://xunitpatterns.com/Parameterized%20Test.html" target="_blank"&gt;Parameterized Tests&lt;/a&gt;&amp;#0160;that accept an instance of the IRestClient type.&lt;/p&gt;

&lt;p&gt;Fortunately, this can be done using xUnit.net data theories. Furthermore, since the IRestClient is an interface, this is a great scenario for using &lt;a href="http://autofixture.codeplex.com/" target="_blank" title="AutoFixture makes it easier for developers to do Test-Driven Development by automating non-relevant Test Fixture Setup, allowing the Test Developer to focus on the essentials of each test case."&gt;AutoFixture&lt;/a&gt;&amp;#0160;together&amp;#0160;&lt;a href="http://blog.ploeh.dk/2010/10/08/AutoDataTheoriesWithAutoFixture.aspx" target="_blank"&gt;with&lt;/a&gt; xUnit.net data theories &lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2011/12/auto-mocking-with-fakeiteasy-and-autofixture.html" target="_blank"&gt;and&lt;/a&gt;&amp;#0160;auto mocking.&lt;/p&gt;

&lt;p&gt;Below is a parameterized test:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;
&lt;span class="na"&gt;[Theory, AutoWebData]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HttpGetReturnsnNonEmptyResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IRestClient&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/categories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="na"&gt;[Theory, AutoWebData]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HttpGetReturnsNonEmptyResultWithId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IRestClient&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;expectedId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/categories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;First&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/categories/&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;expectedId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expectedId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;AutoWebData &lt;/em&gt;attribute provides auto-generated data specimens generated by AutoFixture as an extention to xUnit.net&amp;#39;s Theory attribute.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutoWebDataAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AutoDataAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;AutoWebDataAttribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Customize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WebModelCustomization&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Inside this attribute class we also pass a new instance of the Fixture class &lt;em&gt;customized &lt;/em&gt;in order to supply an instance of the JsonServiceClient when an IRestClient is requested. (You can read more about AutoFixture Customizations&amp;#0160;&lt;a href="http://megakemp.wordpress.com/2011/12/15/keep-your-unit-tests-dry-with-autofixture-customizations/" target="_blank" title="Keep your unit tests DRY with AutoFixture Customizations."&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebModelCustomization&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CompositeCustomization&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;WebModelCustomization&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RestClientCustomization&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoMoqCustomization&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RestClientCustomization&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ICustomization&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Customize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IFixture&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IRestClient&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JsonServiceClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost:5000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The advantage of this approach is that we have abstracted the creation of the IRestClient instance from the test itself. The base URI is now hardcoded in only one place (the customization class). Furthermore, we can easily pass other parameters to the test method if necessary.&amp;#0160;&lt;/p&gt;

&lt;p&gt;While this approach is applied to ServiceStack it can be easily generalized and used on other scenarios as well.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Test-After Development Sins (Header Interfaces)</title>
    <link rel="alternate" href="/blog/2012/01/28/test-after-development-sins-header-interfaces"/>
    <id>http://nikosbaxevanis.com/blog/2012/01/28/test-after-development-sins-header-interfaces</id>
    <updated>2012-01-28T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;A&amp;#0160;&lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2012/01/test-after-development-sins-introduction.html" target="_blank" title="&amp;quot;Test-After Development&amp;quot; Sins: Introduction"&gt;series&lt;/a&gt;&amp;#0160;of articles exploring the impact of writing tests&amp;#0160;&lt;em&gt;after&amp;#0160;&lt;/em&gt;the code is written&amp;#0160;on the implementation part of&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Software_development_process" target="_blank" title="A software development process, also known as a software development life cycle (SDLC), is a structure imposed on the development of a software product."&gt;SDLC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;Sin No.2&lt;/span&gt;: Header Interfaces.&lt;/p&gt;

&lt;p&gt;A good example is a data access layer combined with the use of an&amp;#0160;Object-relational mapper (ORM).&lt;/p&gt;

&lt;p&gt;While an ORM provides (out of the box) a collection-like interface (&lt;a href="https://github.com/nhibernate/nhibernate-core/blob/master/src/NHibernate/ISession.cs" target="_blank" title="The main runtime interface between a .NET application and NHibernate. This is the central API class abstracting the notion of a persistence service."&gt;ISession&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext(v=vs.103).aspx" target="_blank" title="Provides facilities for querying and working with entity data as objects."&gt;DbContext&lt;/a&gt;) for accessing domain objects, most of the time a coarse-grained &lt;a href="http://martinfowler.com/bliki/HeaderInterface.html" target="_blank" title="A header interface is an explicit interface that mimics the implicit public interface of a class. Essentially you take all the public methods of a class and declare them in an interface."&gt;Header Interface&lt;/a&gt; is created on &lt;em&gt;top &lt;/em&gt;of that.&lt;/p&gt;

&lt;p&gt;Those interfaces usually contain high number of members making the overall architecture extremely &lt;em&gt;inflexible.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The system is usually forced to live with only &lt;em&gt;one &lt;/em&gt;implementation for each interface. That implementation is most of the times generalized.&lt;/p&gt;

&lt;p&gt;Some examples,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;#39;s nearly impossible, in performance related scenarios, to manually execute SQL or access the IDbConnection.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;In order to map data between application boundaries or&amp;#0160;populate an instance of a view model the exact same implementation is used.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;&lt;p&gt;In the second example, the implementation&amp;#0160;&lt;strong&gt;eagerly&amp;#0160;&lt;/strong&gt;loads all the entities of an Aggregate Root which hurts performance.&lt;/p&gt;&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>Test-After Development Sins</title>
    <link rel="alternate" href="/blog/2012/01/28/test-after-development-sins"/>
    <id>http://nikosbaxevanis.com/blog/2012/01/28/test-after-development-sins</id>
    <updated>2012-01-28T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;A series of short articles exploring the impact of writing tests&amp;#0160;&lt;em&gt;after&amp;#0160;&lt;/em&gt;the code is written&amp;#0160;on the implementation part of &lt;a href="http://en.wikipedia.org/wiki/Software_development_process" target="_blank" title="A software development process, also known as a software development life cycle (SDLC), is a structure imposed on the development of a software product."&gt;SDLC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2012/01/test-after-development-sins-production-code-first.html" target="_blank" title="&amp;quot;Test-After Development&amp;quot; Sins: Production Code First."&gt; Sin No.1&lt;/a&gt;:&amp;#0160;Production Code First.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2012/01/test-after-development-sins-coarse-header-interfaces.html" target="_blank" title="&amp;quot;Test-After Development&amp;quot; Sins: Header Interfaces."&gt;Sin No.2&lt;/a&gt;: Header Interfaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2012/02/test-after-development-sins-ignoring-cross-cutting-concerns.html" target="_blank" title="&amp;quot;Test-After Development&amp;quot; Sins: Ignoring cross-cutting concerns."&gt;Sin No.3&lt;/a&gt;: Ignoring cross-cutting concerns.&lt;/p&gt;

&lt;p&gt;Sin No.4: Increasing costs.&lt;/p&gt;

&lt;p&gt;Sin No.5:&amp;#0160;Decreasing quality.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Test-After Development Sins (Production Code First)</title>
    <link rel="alternate" href="/blog/2012/01/28/test-after-development-sins-production-code-first"/>
    <id>http://nikosbaxevanis.com/blog/2012/01/28/test-after-development-sins-production-code-first</id>
    <updated>2012-01-28T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;div&gt;
&lt;p&gt;A &lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2012/01/test-after-development-sins-introduction.html" target="_blank" title="&amp;quot;Test-After Development&amp;quot; Sins: Introduction"&gt;series&lt;/a&gt;&amp;#0160;of short articles exploring the impact of writing tests&amp;#0160;&lt;em&gt;after&amp;#0160;&lt;/em&gt;the code is written&amp;#0160;on the implementation part of&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Software_development_process" target="_blank" title="A software development process, also known as a software development life cycle (SDLC), is a structure imposed on the development of a software product."&gt;SDLC&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;Sin No.1&lt;/span&gt;: Production Code First.&lt;/p&gt;

&lt;p&gt;By not writing tests upfront, the code becomes most of the times a &lt;a href="http://martinfowler.com/eaaCatalog/transactionScript.html" target="_blank" title="Organizes business logic by procedures where each procedure handles a single request from the presentation."&gt;Transaction Script&lt;/a&gt;. It usually lives at application boundaries. If not, then it usually delegates all method arguments to a method with the same name inside a &lt;a href="http://martinfowler.com/eaaCatalog/serviceLayer.html" target="_blank" title="Defines an application&amp;#39;s boundary with a layer of services that establishes a set of available operations and coordinates the application&amp;#39;s response in each operation."&gt;Service Layer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most of the times, this code is responsible for aspects such is validation and persistence violating the &lt;a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" title="In object-oriented programming, the single responsibility principle states that every object should have a single responsibility, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility."&gt;SRP&lt;/a&gt;&amp;#0160;and likely most (if not all) of the other&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)" target="_blank" title="In computer programming, SOLID (Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion) is a mnemonic acronym introduced by Robert C. Martin in the early 2000s which stands for five basic principles of object-oriented programming and design."&gt;principles&lt;/a&gt; of class design.&lt;/p&gt;

&lt;p&gt;Even worse, inside those methods, dependencies might be resolved using a&amp;#0160;&lt;a href="http://martinfowler.com/articles/injection.html#UsingAServiceLocator" target="_blank"&gt;Service Locator&lt;/a&gt;&amp;#0160;(which is &lt;a href="http://blog.ploeh.dk/2010/02/03/ServiceLocatorIsAnAntiPattern.aspx" target="_blank" title="Service Locator is an Anti-Pattern"&gt;not&lt;/a&gt; good) forcing us to mock the container (if that&amp;#39;s an option at all) in order to successfully write unit tests&amp;#0160;&lt;em&gt;afterwards&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;At the end, a lot of time is spent to write a few&amp;#0160;&lt;a href="http://xunitpatterns.com/Fragile%20Test.html" target="_blank" title="A test fails to compile or run when the system under test (SUT) is changed in ways that do not affect the part the test is exercising."&gt;Fragile Tests&lt;/a&gt;, resulting in a system which is (in most other places) not covered by tests at all.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Auto-Mocking with FakeItEasy and AutoFixture</title>
    <link rel="alternate" href="/blog/2011/12/14/auto-mocking-with-fakeiteasy-and-autofixture"/>
    <id>http://nikosbaxevanis.com/blog/2011/12/14/auto-mocking-with-fakeiteasy-and-autofixture</id>
    <updated>2011-12-14T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;AutoFixture can become an auto-mocking container using &lt;a title="The simplest mocking library for .NET 3.5 and Silverlight with deep C# 3.0 integration." href="http://code.google.com/p/moq/" target="_blank"&gt;Moq&lt;/a&gt;&amp;nbsp;(described &lt;a title="AutoFixture as an auto-mocking container." href="http://blog.ploeh.dk/2010/08/19/AutoFixtureAsAnAutomockingContainer.aspx" target="_blank"&gt;here&lt;/a&gt;) and &lt;a title="Rhino Mocks is a dynamic mock object framework for the .Net platform. Its purpose is to ease testing by allowing the developer to create mock implementations of custom objects and verify the interactions using unit testing." href="http://hibernatingrhinos.com/open-source/rhino-mocks" target="_blank"&gt;Rhino Mocks&lt;/a&gt; (described &lt;a title="Rhino Mocks-based auto-mocking with AutoFixture." href="http://blog.ploeh.dk/2010/11/13/RhinoMocksbasedAutomockingWithAutoFixture.aspx" target="_blank"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In addition to the above auto-mocking features it is now possible to use &lt;a title="A .Net dynamic fake framework for creating all types of fake objects, mocks, stubs etc. Easier semantics, all fake objects are just that - fakes - the use of the fakes determines whether they're mocks or stubs." href="http://code.google.com/p/fakeiteasy/" target="_blank"&gt;FakeItEasy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To install AutoFixture with Auto Mocking using FakeItEasy, run the following command in the Package Manager Console:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;PM&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;AutoFixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoFakeItEasy&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;To use it, add an AutoFakeItEasyCustomization to the Fixture instance:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Customize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoFakeItEasyCustomization&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here is a typical usage inside a test method which will automatically create mocked instances using FakeItEasy:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Customize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoFakeItEasyCustomization&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IInterface&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;To &lt;em&gt;explicitly &lt;/em&gt;use FakeItEasy inside a test you need to &lt;a title="AutoFixture Freeze." href="http://blog.ploeh.dk/2010/03/17/AutoFixtureFreeze.aspx" target="_blank"&gt;Freeze&lt;/a&gt; it first:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FixtureCanFreezeFake&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Fixture setup
&lt;/span&gt;    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Customize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoFakeItEasyCustomization&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dummy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fake&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Freeze&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Fake&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IInterface&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CallsTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MakeIt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Exercise system
&lt;/span&gt;    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IInterface&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MakeIt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Verify outcome
&lt;/span&gt;    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CallTo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MakeIt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;MustHaveHappened&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// Teardown
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The above example can be made even more elegant by using &lt;a title="AutoData Theories with AutoFixture." href="http://blog.ploeh.dk/2010/10/08/AutoDataTheoriesWithAutoFixture.aspx" target="_blank"&gt;AutoData&lt;/a&gt; theories:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;
&lt;span class="na"&gt;[Theory, AutoFakeData]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FixtureCanFreezeFake&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;Frozen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;Fake&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IInterface&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IInterface&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dummy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MakeIt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CallTo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MakeIt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;MustHaveHappened&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Below is the code for the AutoFakeDataAttribute class:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutoFakeDataAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AutoDataAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;AutoFakeDataAttribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Customize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AutoFakeItEasyCustomization&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;An automatically published release created from the latest successful build can also be downloaded from&amp;nbsp;&lt;a title="AutoFixture - Downloads" href="http://autofixture.codeplex.com/releases/view/78605" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>RegularExpressionAttribute support in AutoFixture</title>
    <link rel="alternate" href="/blog/2011/12/11/regularexpressionattribute-support-in-autofixture"/>
    <id>http://nikosbaxevanis.com/blog/2011/12/11/regularexpressionattribute-support-in-autofixture</id>
    <updated>2011-12-11T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Continuing the support of DataAnnotations as described&amp;nbsp;&lt;a title="StringLengthAttribute support in AutoFixture" href="http://www.nikosbaxevanis.com/bonus-bits/2011/09/stringlengthattribute-support-in-autofixture.html" target="_blank"&gt;here&lt;/a&gt;&amp;nbsp;and &lt;a title="RangeAttribute support in AutoFixture" href="http://www.nikosbaxevanis.com/bonus-bits/2011/09/rangeattribute-support-in-autofixture.html" target="_blank"&gt;here&lt;/a&gt;, there is now added support for the&amp;nbsp;&lt;a title="Specifies that a data field value must match the specified regular expression." href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.regularexpressionattribute.aspx" target="_blank"&gt;RegularExpressionAttribute&lt;/a&gt;&amp;nbsp;class.&lt;/p&gt;

&lt;p&gt;Starting with version 2.6.0, when this attribute is applied on a data field AutoFixture will &lt;em&gt;try &lt;/em&gt;to&amp;nbsp;generate a value that&amp;nbsp;matches the specified regular expression.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take as an example the following type:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegularExpressionValidatedType&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Allow up to 40 uppercase and lowercase.
&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;RegularExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;^[a-zA-Z''-'\s]{1,40}$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;RegularExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;^http\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(/\S*)?$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Url&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Prior to version 2.6.0 if&amp;nbsp;we request an anonymous instance from AutoFixture, by&amp;nbsp;&lt;em&gt;default&lt;/em&gt;&amp;nbsp;we would get back an instance of the above type with it&amp;rsquo;s properties containing values similar to those below.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8510/8398554280_b996887d56_o.png" title="Prior verion 2.6.0" alt="Prior verion 2.6.0" /&gt;&lt;/p&gt;

&lt;p&gt;However, from version 2.6.0 AutoFixture can handle requests with&amp;nbsp;regular expressions, through the RegularExpressionAttribute class, by issuing a new request for the specified regular expression pattern.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8501/8398554186_edc6990289_o.png" title="After verion 2.6.0" alt="After verion 2.6.0" /&gt;&lt;/p&gt;

&lt;p&gt;The idea behind this new feature is that members of a &lt;a title="In computing, a regular expression provides a concise and flexible means for &amp;quot;matching&amp;quot; (specifying and recognizing) strings of text, such as particular characters, words, or patterns of characters." href="http://en.wikipedia.org/wiki/Regular_expression" target="_blank"&gt;Regular Expression&lt;/a&gt;&amp;nbsp;(Regex) can be generated by first transforming the Regex into a &lt;a title="A finite-state machine (FSM) or finite-state automaton (plural: automata), or simply a state machine, is a mathematical model used to design computer programs and digital logic circuits." href="http://en.wikipedia.org/wiki/Finite_state_machine" target="_blank"&gt;Finite-state machine&lt;/a&gt;, particularly a&amp;nbsp;&lt;a title="In the theory of computation and automata theory, a deterministic finite automaton (DFA)—also known as deterministic finite state machine—is a finite state machine accepting finite strings of symbols." href="http://en.wikipedia.org/wiki/Deterministic_finite_automata" target="_blank"&gt;Deterministic finite automaton&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;You may also watch a short,&amp;nbsp;introductory,&amp;nbsp;video on the subject &lt;a title="Symbolic Regular Expression Exploration" href="http://channel9.msdn.com/posts/Peli/Margus-Veanes-Rex-Symbolic-Regular-Expression-Exploration/" target="_blank"&gt;here&lt;/a&gt;. (Although it is for &lt;a title="Rex is a tool that explores .NET regexes and generates members efficiently." href="http://research.microsoft.com/en-us/projects/rex/" target="_blank"&gt;Rex&lt;/a&gt;, I find it very descriptive.)&lt;/p&gt;

&lt;p&gt;The current implementation uses internally the algorithms provided by the&amp;nbsp;&lt;a title="A DFA/NFA (finite-state automata) implementation with Unicode alphabet (UTF16) and support for the standard regular expression operations (concatenation, union, Kleene star) and a number of non-standard ones (intersection, complement, etc.)" href="http://www.brics.dk/automaton/" target="_blank"&gt;dk.brics.automaton&lt;/a&gt;&amp;nbsp;and &lt;a title="A library for generating random text from regular expressions." href="http://code.google.com/p/xeger/" target="_blank"&gt;Xeger&lt;/a&gt;&amp;nbsp;packages.&lt;/p&gt;

&lt;p&gt;An automatically published release created from the latest successful build can be downloaded from&amp;nbsp;&lt;a title="AutoFixture - Downloads" href="http://autofixture.codeplex.com/releases/view/78338" target="_blank"&gt;here&lt;/a&gt;.&amp;nbsp;The latest version is also live on&amp;nbsp;&lt;a title="AutoFixture - Package" href="http://nuget.org/List/Packages/AutoFixture" target="_blank"&gt;NuGet&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fare - Finite Automata/Regex in .NET</title>
    <link rel="alternate" href="/blog/2011/11/24/fare-finite-automata-slash-regex-in-net"/>
    <id>http://nikosbaxevanis.com/blog/2011/11/24/fare-finite-automata-slash-regex-in-net</id>
    <updated>2011-11-24T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Project &lt;a href="https://github.com/moodmosaic/Fare" target="_blank" title="Fare - [F]inite [A]utomata and [R]egular [E]xpressions"&gt;Fare&lt;/a&gt; is an effort to bring a &lt;a href="http://en.wikipedia.org/wiki/Deterministic_finite-state_machine" target="_blank" title="Deterministic finite-state machine"&gt;DFA&lt;/a&gt;/&lt;a href="http://en.wikipedia.org/wiki/Nondeterministic_finite-state_machine" target="_blank" title="Nondeterministic finite-state machine"&gt;NFA&lt;/a&gt; (finite-state automata) implementation from Java to .NET.&amp;#0160;There are quite a few implementations available in other languages today. This project aims to fill the gap in .NET.&lt;/p&gt;

&lt;p&gt;Fare is a .NET port of the well established Java library &lt;a href="http://www.brics.dk/automaton/" target="_blank" title="dk.brics.automaton"&gt;dk.brics.automaton&lt;/a&gt; with API as close as possible to the corresponding dk.brics.automaton classes. It also includes a port of &lt;a href="http://code.google.com/p/xeger/" target="_blank" title="A Java library for generating random text from regular expressions."&gt;Xeger&lt;/a&gt;&amp;#0160;which is a&amp;#0160;Java library for generating random text from regular expressions. The latter is possible in .NET using the &lt;a href="http://research.microsoft.com/en-us/projects/rex/" target="_blank" title="Rex is a tool that explores .NET regexes and generates members efficiently."&gt;Rex&lt;/a&gt; tool.&lt;/p&gt;

&lt;p&gt;There are currently integration tests utilizing xUnit.net data &lt;a href="http://xunit.codeplex.com/wikipage?title=Comparisons#note4" target="_blank" title="The extensions library (xunit.extensions.dll) ships with support for data-driven tests call Theories."&gt;theories&lt;/a&gt; using the [ClassData] attribute. This way, the same test cases can be used across the ported code, the Java code and even compared to the output of Rex.&lt;/p&gt;

&lt;p&gt;The source code is&amp;#0160;&lt;a href="https://github.com/moodmosaic/Fare" target="_blank" title="Fare - [F]inite [A]utomata and [R]egular [E]xpressions"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Notes from porting Java code to .NET</title>
    <link rel="alternate" href="/blog/2011/11/19/notes-from-porting-java-code-to-net"/>
    <id>http://nikosbaxevanis.com/blog/2011/11/19/notes-from-porting-java-code-to-net</id>
    <updated>2011-11-19T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Recently I needed to use a&amp;#0160;DFA/NFA (finite-state automata) implementation from a Java package in .NET. I could not find a port of this particular&amp;#0160;&lt;a href="http://www.brics.dk/automaton/" target="_blank" title="dk.brics.automaton"&gt;package&lt;/a&gt;&amp;#0160;and&amp;#0160;&lt;a href="http://www.ikvm.net/userguide/ikvmc.html" target="_blank" title="IKVM.NET Bytecode Compiler (ikvmc.exe)"&gt;IKVMC&lt;/a&gt;&amp;#0160;was not an option since I preferred to depend only on the standard library (BCL). So,&amp;#0160;I decided to port the code myself.&lt;/p&gt;

&lt;p&gt;In my case, the Java package didn&amp;#39;t have unit tests (at least not publicly available on the website). &lt;strong&gt;How could I know that the results of the ported code are the same with the original code?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The solution I came up with was the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write integration tests, one for the ported code and one for the Java code.     
&lt;ul&gt;
&lt;li&gt;Both tests should have the same, deterministic, input.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/li&gt;
&lt;li&gt;Keep porting enough code from the Java source in order to make the test pass.&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Verify that results are the same with the test in Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recursively repeat this process until all tests pass and yield correct results.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example can be found here with integration tests for &lt;a href="https://github.com/moodmosaic/Fare/tree/master/Src/Fare.Tests.Integration" target="_blank"&gt;ported&lt;/a&gt; code and &lt;a href="https://github.com/moodmosaic/Fare/tree/master/Src/Fare.Tests.Integration/Java" target="_blank"&gt;Java&lt;/a&gt; (through IKVMC).&lt;/p&gt;
&lt;ul&gt;
&lt;/ul&gt;
&lt;p&gt;During the process of porting I came across a few&amp;#0160;&lt;strong&gt;differences&lt;/strong&gt; between Java and .NET and particularly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-dimensional arrays syntax is slightly different.&lt;/li&gt;
&lt;li&gt;Substring method parameteres have different meaning.&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;In C# we pass StartIndex, Length.&lt;/li&gt;
&lt;li&gt;In Java we pass StartIndex, EndIndex.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Java, the list and set implementations override equals, etc. The equivalent doesn&amp;#39;t happen in .NET.&lt;/li&gt;
&lt;li&gt;Java LinkedList Add method appends the specified element to the end of the list. The equivalent in .NET is the AddLast method.&lt;/li&gt;
&lt;li&gt;Java LinkedList Remove(int) method removes the element at the specified position in the list and returns the element that was removed from the list. The equivalent in .NET exists only with the use of an extension method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;References&lt;/b&gt;&lt;/p&gt;
Stack Overflow
&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/295224/what-are-major-differences-between-c-sharp-and-java" target="_blank"&gt;What are major differences between C# and Java?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/285793/why-should-i-bother-about-serialversionuid" target="_blank"&gt;Why should I bother about serialVersionUID?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3581741/c-sharp-equivalent-to-javas-charat" target="_blank"&gt;C# equivalent to Java&amp;#39;s charAt()?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/8129943/working-with-multidimensional-arrays-in-c-sharp-similar-to-java/8129952#8129952" target="_blank"&gt;Working with multidimensional arrays in C# similar to Java&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/8103643/net-port-with-javas-map-set-hashmap" target="_blank"&gt;.NET port with Java&amp;#39;s Map, Set, HashMap&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/496928/what-is-the-difference-between-instanceof-and-class-isassignablefrom" target="_blank"&gt;What is the difference between instanceof and Class.isAssignableFrom&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/699210/why-should-i-implement-icloneable-in-c" target="_blank"&gt;Why you should not implement ICloneable in C#?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;Java SE 6 Documentation
&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://download.oracle.com/javase/6/docs/api/java/util/Comparator.html" target="_blank"&gt;Interface Comparator&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://download.oracle.com/javase/6/docs/api/java/lang/Comparable.html" target="_blank"&gt;Comparable&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://download.oracle.com/javase/6/docs/api/java/util/Set.html" target="_blank"&gt;Interface Set&amp;lt;E&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Estimation Quiz</title>
    <link rel="alternate" href="/blog/2011/10/16/estimation-quiz"/>
    <id>http://nikosbaxevanis.com/blog/2011/10/16/estimation-quiz</id>
    <updated>2011-10-16T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;Given some instructions, provide an estimate for the process of assembling a shelf (see picture below).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Academic approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After &lt;span&gt;spending&lt;/span&gt; several minutes thinking, you estimate it to 30 minutes and &amp;#0160;then start assembling the parts in order to build the shelf.&lt;em&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8492/8398554832_23607b3fea_o.png" alt="Academic approach" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pragmatic approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Depending on the complexity of the assembling and the quality of the given instructions the whole process can fall out of any estimation.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8515/8397466279_8c02b3985f_o.png" alt="Pragmatic approach" /&gt;&lt;/p&gt;

&lt;p&gt;..and from the initial estimate of 30 minutes you can end up in a 10 hours of actual work.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>IKVMC in Action with Hamcrest</title>
    <link rel="alternate" href="/blog/2011/10/11/ikvmc-in-action-with-hamcrest"/>
    <id>http://nikosbaxevanis.com/blog/2011/10/11/ikvmc-in-action-with-hamcrest</id>
    <updated>2011-10-11T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;In &lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2011/10/using-class-libraries-from-different-platforms.html" target="_blank" title="Using class libraries from different platforms."&gt;this&lt;/a&gt; post, we saw two possible ways for using code written on a different platform than the one we are working on.&amp;#0160;Now we will see a scenario where we need to use a Java class library&amp;#0160;from .NET using the &lt;a href="http://www.ikvm.net/userguide/ikvmc.html" target="_blank" title="The ikvmc tool converts Java bytecode to .NET dll&amp;#39;s and exe&amp;#39;s."&gt;IKVMC&lt;/a&gt;&amp;#0160;tool.&amp;#0160;We are going to use &lt;a href="http://code.google.com/p/hamcrest/" target="_blank" title="Hamcrest is a framework for creating matchers, allowing match rules to be defined declaratively."&gt;Hamcrest&lt;/a&gt;, a library of matchers for building test expressions.&lt;/p&gt;

&lt;p&gt;Before we pass any command line argument to IKVMC we need to&amp;#0160;detect the dependencies between the jar files.&amp;#0160;&lt;a href="http://www.kirkk.com/main/Main/JarAnalyzer" target="_blank" title="JarAnalyzer is a dependency management utility for jar files."&gt;JarAnalyser&lt;/a&gt;&amp;#0160;is a good choice and fortunately there is a tool&amp;#0160;&lt;a href="http://code.google.com/p/jar2ikvmc/" target="_blank" title="Helps to convert a big collection of Java jar files into .net dlls by analyzing dependencies between jar files."&gt;Jar2ikvmc&lt;/a&gt; which&amp;#0160;uses JarAnalyser to detect dependencies between jar files and then generates command-line script for ikvmc.exe.&lt;/p&gt;

&lt;p&gt;The version of Hamcrest that we use is&amp;#0160;1.3RC2 and we are going to convert&amp;#0160;hamcrest-core.jar and hamcrest-library.jar.&lt;/p&gt;

&lt;p&gt;Here is the generated script from Jar2ikvmc:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1.3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="n"&gt;RC2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;
&lt;span class="n"&gt;ikvmc&lt;/span&gt; &lt;span class="n"&gt;hamcrest&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1.3&lt;/span&gt;&lt;span class="n"&gt;RC2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;hamcrest&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1.3&lt;/span&gt;&lt;span class="n"&gt;RC2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dll&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now we can run the generated script on the ikvmc.exe tool. It will generate two .NET assemblies. We can now compare the difference in the syntax with the excellent port &lt;a href="https://github.com/grahamrhay/NHamcrest" target="_blank"&gt;NHamcrest&lt;/a&gt; by &lt;a href="http://grahamrhay.wordpress.com/" target="_blank"&gt;Graham Rhay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We are going to use the Graham Rhay&amp;#39;s&amp;#0160;&lt;a href="https://github.com/grahamrhay/NHamcrest/blob/master/NHamcrest.XUnit/AssertEx.cs" target="_blank"&gt;Assert&lt;/a&gt; class that let us use NHamcrest from xUnit.net.&lt;/p&gt;

&lt;p&gt;Here is the code that uses NHamcrest:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Assert&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Assert&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;That&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IMatcher&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StringDescription&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescribeTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mismatchDescription&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StringDescription&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescribeMismatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mismatchDescription&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MatchException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;mismatchDescription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here is the code that uses Hamcrest that we coverted using IKVMC:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;org.hamcrest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Assert&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Assert&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;That&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Matcher&lt;/span&gt; &lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StringDescription&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describeTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mismatchDescription&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StringDescription&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describeMismatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mismatchDescription&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MatchException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;mismatchDescription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here is a unit-test that uses NHamcrest:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;NHamcrest.Xunit&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="na"&gt;[Test]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Pass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;That&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EqualTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here is a unit-test that uses Hamcrest that we coverted using IKVMC:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;org.hamcrest.core&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;EqualTo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;That&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IsEqual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;A notable difference is on the different naming conventions (Java methods start with lowercase). However, we can create &lt;a href="http://martinfowler.com/bliki/HeaderInterface.html" target="_blank" title="A header interface is an explicit interface that mimics the implicit public interface of a class."&gt;header interfaces&lt;/a&gt;&amp;#0160;declaring those methods inside.&lt;/p&gt;

&lt;p&gt;To sum up, if there is a good quality port we can use the port. In this case, I personally choose to go with NHamcrest. However, we already demoed the alternative approach which also works.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using class libraries from different platforms</title>
    <link rel="alternate" href="/blog/2011/10/11/using-class-libraries-from-different-platforms"/>
    <id>http://nikosbaxevanis.com/blog/2011/10/11/using-class-libraries-from-different-platforms</id>
    <updated>2011-10-11T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;There are times where we need to use a library written in a different platform than the one we are currently on.&amp;#0160;Most of the times a port already exists and we can choose to go with that.&amp;#0160;Before using a port there are some good considerations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The size of the original codebase.&lt;/li&gt;
&lt;li&gt;The kind of project (is it a logger, an&amp;#0160;ORM, etc).&lt;/li&gt;
&lt;li&gt;The current version of the original compared with the ported one. It depends on the activity of the original but if the ported is left 1+ year behind this is not a good sign.&lt;/li&gt;
&lt;li&gt;The quality of the ported codebase,&amp;#0160;framework usage, coding conventions. Does it use recommeded guidelines for the target framework?&lt;/li&gt;
&lt;li&gt;The activity of the ported project. If it&amp;#39;s low that&amp;#39;s a sign that future versions might now show up. However, consider contributing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides ported code, there are cases where we can use a tool that allows us to use the original library from a different platform. For example, when working in .NET we can use Java class libraries through IKVM.NET which has a bytecode compiler called&amp;#0160;&lt;a href="http://www.ikvm.net/userguide/ikvmc.html" target="_blank" title="IKVM.NET Bytecode Compiler (ikvmc.exe)"&gt;IKVMC&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>What goes first? (Theory or Tooling)</title>
    <link rel="alternate" href="/blog/2011/09/26/what-goes-first-theory-or-tooling"/>
    <id>http://nikosbaxevanis.com/blog/2011/09/26/what-goes-first-theory-or-tooling</id>
    <updated>2011-09-26T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;A very good friend of mine went to an interview where the interviewer kept asking about the X, Y or Z tool without paying attention to knowledge on the theory behind those tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my opinion it is always better to have a discussion, rather than a cliché&amp;#0160;interview.&amp;#0160;During the discussion it would be good to let the developer talk and express opinions on theory, design patterns and principles rather than make questions on specific tools and frameworks. The reason I strongly support that is because languages and tools tend to continuously&amp;#0160;evolve (and sometimes change directions) while the patterns and principles hardly change.&lt;/p&gt;

&lt;p&gt;Tools are implementations of patterns and principles in a specific language. Thus a developer should give priority on the theory behind them rather on the API of a specific tool.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take as an example a Dependency Injection (DI) container. It gives no real value when a developer knows &lt;em&gt;only&lt;/em&gt; how to use Spring, Windsor or Unity if lacks fundamental knowledge of DI theory. On the other hand one, that knows how to apply proper&amp;#0160;&lt;a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod" target="_blank" title="The Principles of OOD"&gt;OOD&lt;/a&gt;&amp;#0160;design and follows SOLID&amp;#0160;principles, will use a DI container to compose object graphs in the &lt;a href="http://blog.ploeh.dk/2011/07/28/CompositionRoot.aspx" target="_blank" title="Composition Root"&gt;Composition Root&lt;/a&gt; and it&amp;#39;s API to effectively apply lifetime management on them.&lt;/p&gt;

&lt;p&gt;The same applies when making questions on a specific ORM solution.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>StringLengthAttribute support in AutoFixture</title>
    <link rel="alternate" href="/blog/2011/09/18/stringlengthattribute-support-in-autofixture"/>
    <id>http://nikosbaxevanis.com/blog/2011/09/18/stringlengthattribute-support-in-autofixture</id>
    <updated>2011-09-18T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Continuing the support of DataAnnotations as described &lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2011/09/rangeattribute-support-in-autofixture.html" target="_blank" title="RangeAttribute support in AutoFixture"&gt;here&lt;/a&gt;, there is now added support for the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.stringlengthattribute(v=VS.90).aspx" target="_blank" title="Specifies the maximum length of characters that are allowed in a data field."&gt;StringLengthAttribute&lt;/a&gt; class. Starting with version 2.4.0, when this attribute is applied on a data field it can specify the maximum length of characters that are allowed.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take as an example the following type:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StringLengthValidatedType&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;StringLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Prior to version 2.4.0 if&amp;#0160;we request an anonymous instance from AutoFixture, by &lt;em&gt;default&lt;/em&gt; we would get back an instance of the above type with it&amp;#39;s Property containing a value similar to the one below.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8476/8398548352_20a167088e_o.png" title="Prior verion 2.4.0" alt="Prior verion 2.4.0" /&gt;&lt;/p&gt;

&lt;p&gt;However, after version 2.4.0 AutoFixture can handle requests with&amp;#0160;string length constraints through the StringLengthAttribute&amp;#0160;class&amp;#0160;by issuing a new request for a constrained string.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8084/8398548324_cfb75590cd_o.png" title="After verion 2.4.0" alt="After verion 2.4.0" /&gt;&lt;/p&gt;

&lt;p&gt;An automatically published release created from the latest successful build can be downloaded from&amp;#0160;&lt;a href="http://autofixture.codeplex.com/releases/view/73545" target="_blank" title="AutoFixture - Downloads"&gt;here&lt;/a&gt;.&amp;#0160;The latest version is also live on&amp;#0160;&lt;a href="http://nuget.org/List/Packages/AutoFixture" target="_blank" title="AutoFixture - Package"&gt;NuGet&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>RangeAttribute support in AutoFixture</title>
    <link rel="alternate" href="/blog/2011/09/13/rangeattribute-support-in-autofixture"/>
    <id>http://nikosbaxevanis.com/blog/2011/09/13/rangeattribute-support-in-autofixture</id>
    <updated>2011-09-13T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Support for types from the System.ComponentModel.&lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations(v=VS.90).aspx" target="_blank" title="The System.ComponentModel.DataAnnotations namespace provides attribute classes that are used to define metadata for ASP.NET Dynamic Data controls."&gt;DataAnnotations&lt;/a&gt; namespace is one of the most voted features for AutoFixture. Starting with version 2.3.1 AutoFixture supports the &lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.rangeattribute(v=VS.90).aspx" target="_blank" title="Specifies the numeric range constraints for the value of a data field."&gt;RangeAttribute&lt;/a&gt; class.&amp;#0160;When this attribute is applied on a data field it can specify the numeric range constraints for it&amp;#39;s value.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take as an example the following type:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RangeValidatedType&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/pre&gt;
&lt;p&gt;Prior to version 2.3.1 if&amp;#0160;we request an anonymous instance from AutoFixture (or better,&amp;#0160;a specimen from AutoFixture&amp;#39;s kernel) we would get back an instance of the above type with it&amp;#39;s Property containing a value probably out of the specified numeric range.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8352/8398554262_e0f7efe6ef_o.png" title="Prior verion 2.3.1" alt="Prior verion 2.3.1" /&gt;&lt;/p&gt;

&lt;p&gt;However, after version 2.3.1 AutoFixture can handle requests with&amp;#0160;numeric range constraints through the RangeAttribute class&amp;#0160;by issuing a new request for a value inside the specified range.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8045/8397465809_4ba5a4b147_o.png" title="After verion 2.3.1" alt="After verion 2.3.1" /&gt;&lt;/p&gt;

&lt;p&gt;An automatically published release created from the latest successful build can be downloaded from &lt;a href="http://autofixture.codeplex.com/releases/view/73230" target="_blank" title="AutoFixture - Downloads"&gt;here&lt;/a&gt;.&amp;#0160;The latest version is also live on&amp;#0160;&lt;a href="http://nuget.org/List/Packages/AutoFixture" target="_blank" title="AutoFixture - Package"&gt;NuGet&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Combining Data Theories in AutoFixture.Xunit extension</title>
    <link rel="alternate" href="/blog/2011/08/25/combining-data-theories-in-autofixture-dot-xunit-extension"/>
    <id>http://nikosbaxevanis.com/blog/2011/08/25/combining-data-theories-in-autofixture-dot-xunit-extension</id>
    <updated>2011-08-25T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://xunit.codeplex.com/" target="_blank" title="xUnit.net is a unit testing tool for the .NET Framework. Written by the original inventor of NUnit."&gt;xUnit.net&lt;/a&gt; supports parameterized tests via data theories which are types deriving from the Xunit.Extensions.DataAttribute type.&amp;#0160;Some popular attributes include:&lt;/p&gt;

&lt;p&gt;InlineDataAttribute,&amp;#0160;PropertyDataAttribute and ClassDataAttribute.&lt;/p&gt;

&lt;p&gt;AutoFixture.Xunit extension includes a very useful type, for providing auto-data theories, called&amp;#0160;&lt;a href="http://blog.ploeh.dk/2010/10/08/AutoDataTheoriesWithAutoFixture.aspx" target="_blank" title="AutoData Theories with AutoFixture"&gt;AutoMoqDataAttribute&lt;/a&gt;.&amp;#0160;&lt;/p&gt;

&lt;p&gt;Imagine a Scenario where we have a unit test method with 3 parameters.&amp;#0160;We want the first parameters to be supplied by InlineData and the rest by AutoFixture using AutoMoqData.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Theory]&lt;/span&gt;
&lt;span class="na"&gt;[InlineAutoData(&amp;quot;foo&amp;quot;)]&lt;/span&gt;
&lt;span class="na"&gt;[InlineAutoData(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;myClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This is now possible using the &lt;strong&gt;InlineAutoDataAttribute&lt;/strong&gt; type which is now on the trunk and will be available on next public release (after version 2.1).&amp;#0160;It provides a data source for a data theory, with the data coming from inline values combined with auto-generated data specimens generated by AutoFixture.&lt;/p&gt;

&lt;p&gt;InlineAutoDataAttribute derives from &lt;strong&gt;CompositeDataAttribute&lt;/strong&gt;,&amp;#0160;an implementation of DataAttribute that composes other DataAttribute instances.&lt;/p&gt;

&lt;p&gt;Here is how it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delegate the GetData method call to the&amp;#0160;&lt;em&gt;first&lt;/em&gt;&amp;#0160;attribute.&lt;/li&gt;
&lt;li&gt;Loop through the results from the first attribute and check if the length of each object array matches the number of arguments required by the method.     
&lt;ul&gt;
&lt;li&gt;If so, yield the object array.&lt;/li&gt;
&lt;li&gt;If not, invoke GetData on the&amp;#0160;&lt;em&gt;next&lt;/em&gt;&amp;#0160;attribute.     
&lt;ul&gt;
&lt;li&gt;Throw away the first objects from the result in order to continue from where it ran out of objects from the first result set and concatenate the rest to the previous array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Recursively repeat this process until all object arrays have the required length.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;While this feature comes with AutoFixture.Xunit extension, the CompositeDataAttribute class depends only on the xunit.extensions assembly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You may compile the code from the latest&amp;#0160;&lt;a href="http://autofixture.codeplex.com/SourceControl/list/changesets" target="_blank" title="AutoFixture (changesets)"&gt;trunk&lt;/a&gt;&amp;#0160;version, alternatively&amp;#0160;the latest build (including strong names) can be downloaded from&amp;#0160;&lt;a href="http://teamcity.codebetter.com/project.html?projectId=project129&amp;amp;tab=projectOverview. " target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Heuristics for Static Factory Methods in AutoFixture</title>
    <link rel="alternate" href="/blog/2011/08/25/heuristics-for-static-factory-methods-in-autofixture"/>
    <id>http://nikosbaxevanis.com/blog/2011/08/25/heuristics-for-static-factory-methods-in-autofixture</id>
    <updated>2011-08-25T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Here is a type with a private constructor:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TypeWithFactoryMethod&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;TypeWithFactoryMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;TypeWithFactoryMethod&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;TypeWithFactoryMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;TypeWithFactoryMethod&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;TypeWithFactoryMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In order to create an instance of that type we have to call one of it&amp;#39;s static factory methods, for example:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeWithFactoryMethod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;If we try to create an &lt;a href="http://blogs.msdn.com/b/ploeh/archive/2008/11/17/anonymous-variables.aspx" target="_blank" title="Anonymous Variables"&gt;Anonymous Variable&lt;/a&gt; with &lt;a href="http://autofixture.codeplex.com" target="_blank" title="AutoFixture makes it easier for developers to do Test-Driven Development by automating non-relevant Test Fixture Setup, allowing the Test Developer to focus on the essentials of each test case."&gt;AutoFixture&lt;/a&gt; right now (version 2.1) it will throw an exception since there are no public constructors:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TypeWithFactoryMethod&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Using the latest version from&amp;#0160;&lt;a href="http://autofixture.codeplex.com/SourceControl/list/changesets" target="_blank" title="AutoFixture (changesets)"&gt;trunk&lt;/a&gt;&amp;#0160;(and on the next public release) the above code will work.&amp;#0160;It will successfully return an instance of the type by using&amp;#0160;a set of heuristics that enable AutoFixture to search for static factory methods.&lt;/p&gt;

&lt;p&gt;The latest build (including strong names) can be downloaded from &lt;a href="http://teamcity.codebetter.com/project.html?projectId=project129&amp;amp;tab=projectOverview. " target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>S(ports) is for (Open) Source</title>
    <link rel="alternate" href="/blog/2011/08/23/s-ports-is-for-open-source"/>
    <id>http://nikosbaxevanis.com/blog/2011/08/23/s-ports-is-for-open-source</id>
    <updated>2011-08-23T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p style="text-align: center;"&gt;&lt;em&gt;The &amp;ldquo;Loose Laces&amp;rdquo; Story&lt;/em&gt;&lt;/p&gt;

&lt;p style="text-align: center;"&gt;&lt;img src="http://farm9.staticflickr.com/8183/8398548564_325c904f66_o.png" title="Country, Northeastern Corinthia" alt="Country, Northeastern Corinthia"/&gt;&lt;/p&gt;

&lt;p&gt;On the weekends, I usually try not to stay in Glyfada. Sometimes I go to country. There, I may invite friends and go out or stay at home.&lt;/p&gt;

&lt;p&gt;Usually, in the afternoon I go for a run.&amp;#0160;Τhere is a 10 km route from my house to the next village. Because of the uphill road on the way back, it takes me 51-53 minutes to run.&lt;/p&gt;

&lt;p&gt;I always try to run the route in less than 51 minutes. Nevertheless most of the time I can not do it - either&amp;#0160;I start too fast (doing first 5KM below 26 minutes) and then get tired or I begin slowly and on the way back it&amp;#39;s impossible to go that fast.&lt;/p&gt;

&lt;p&gt;However, the last time I run there&amp;#0160;I started fast, faster than any other time. Reached the 5KM point (the next village) on ~20 minutes and on my way back it took me other ~27 minutes. This is a total of ~47 minutes (!).&lt;/p&gt;

&lt;p&gt;Obviously, that was a personal record.&lt;/p&gt;

&lt;p&gt;The reason I write all these, is because that one (and only) time that I&amp;#39;ve made it below 50 minutes,&amp;#0160;I was running with loosed laces on the right shoe, plus the shoes were not running shoes at all. I noticed the loose lace when I had already started, but I could not do anything since I didn&amp;#39;t want to stop the timer.&lt;/p&gt;

&lt;p&gt;What I&amp;#39;ve learned is that, the equiment (non-running shoes) and the conditions (loosed laces) doesn&amp;#39;t really matter.&lt;/p&gt;

&lt;p&gt;What it does matter&amp;#0160;is how one truly wants to do something.&lt;/p&gt;

&lt;p&gt;Τhe same applies for software.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Enabling Add-In functionality in ASP.NET MVC 3 (Part 2)</title>
    <link rel="alternate" href="/blog/2011/08/22/enabling-add-in-functionality-in-asp-dot-net-mvc-3-part-2"/>
    <id>http://nikosbaxevanis.com/blog/2011/08/22/enabling-add-in-functionality-in-asp-dot-net-mvc-3-part-2</id>
    <updated>2011-08-22T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;In this &lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2011/08/enabling-add-in-functionality-in-aspnet-mvc3.html" target="_blank" title="Enabling Add-In functionality in ASP.NET MVC 3"&gt;post&lt;/a&gt; I discussed the implementation of a&amp;#0160;Unity-specific controller factory &amp;#0160;that could take&amp;#0160;a delegate as a parameter in the constructor acting as the fallback factory when the DI container can not supply a controller.&lt;/p&gt;

&lt;p&gt;However, I did not really like the initial design. There are cases when the UnityControllerFactory can be used standalone without third party extensiblity in mind.&lt;/p&gt;

&lt;p&gt;One possible improvement in the design is to introduce a &lt;a href="http://en.wikipedia.org/wiki/Composite_pattern" target="_blank" title="Composite Pattern"&gt;composite&lt;/a&gt; implementation for an IControllerFactory. That way, we still have the chance to supply a MEF-specific controller factory.&lt;/p&gt;

&lt;p&gt;A possible implementation of the &lt;a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.icontrollerfactory.createcontroller.aspx" target="_blank" title="Creates the specified controller by using the specified request context."&gt;CreateController&lt;/a&gt; method is the one below:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;IController&lt;/span&gt; &lt;span class="nf"&gt;CreateController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="n"&gt;RequestContext&lt;/span&gt; &lt;span class="n"&gt;requestContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
   &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;controllerName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Factories&lt;/span&gt;
            &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;requestContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllerName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
            &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It will iterate through all controller factories calling their CreateController method. The first IController instance provided by the controller factories is returned.&lt;/p&gt;

&lt;p&gt;With this implementation, if the Unity-specific controller factory can not provide an IController instance we will ask the next controller factory (MEF-specific controller factory in this example) to provide the IController instance, and so on.&lt;/p&gt;

&lt;p&gt;The&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/dd460275.aspx" target="_blank" title="Sets the specified controller factory."&gt;SetControllerFactory&lt;/a&gt;&amp;#0160;method can accept an instance of a CompositeControllerFactory type as shown below:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;BootstrapContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// No direct reference on the container outside this method.
&lt;/span&gt;    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;unityControllerFactory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UnityControllerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UnityContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Registrator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForControllers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;Registrator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForServices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;Registrator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForEnterpriseLibrary&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;


    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;extensionsPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;AppDomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentDomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BaseDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Extensions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;discoverableControllerFactory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DiscoverableControllerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CompositionContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DirectoryCatalog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extensionsPath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;ControllerBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetControllerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CompositeControllerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;unityControllerFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="n"&gt;discoverableControllerFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://github.com/moodmosaic/System.Web.Mvc.Composition/blob/master/Src/System.Web.Mvc.Composition/CompositeControllerFactory.cs" target="_blank" title="CompositeControllerFactory.cs"&gt;Implementation&lt;/a&gt;,&amp;#0160;&lt;a href="https://github.com/moodmosaic/System.Web.Mvc.Composition/blob/master/Src/System.Web.Mvc.CompositionUnitTest/CompositeControllerFactoryFacts.cs" target="_blank" title="CompositeControllerFactoryFacts.cs"&gt;Unit tests&lt;/a&gt;&amp;#0160;and &lt;a href="http://nuget.org/List/Packages/System.Web.Mvc.Composition" target="_blank" title="System.Web.Mvc.Composition"&gt;NuGet Package&lt;/a&gt;.&amp;#0160;Sample application available &lt;a href="http://goo.gl/bcye3" target="_blank" title="ExtensibleMvcApplicationDemo-Part2.zip"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Enabling Add-In functionality in ASP.NET MVC 3</title>
    <link rel="alternate" href="/blog/2011/08/08/enabling-add-in-functionality-in-asp-dot-net-mvc-3"/>
    <id>http://nikosbaxevanis.com/blog/2011/08/08/enabling-add-in-functionality-in-asp-dot-net-mvc-3</id>
    <updated>2011-08-08T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update:&amp;#0160;&lt;/strong&gt;&amp;#0160;&lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2011/08/enabling-add-in-functionality-in-aspnet-mvc3-part2.html" target="_blank" title="Enabling Add-In functionality in ASP.NET MVC 3 (Part 2)"&gt;Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I remember, back in 2006 when I wrote my first managed add-in for AutoCAD. The fact that we could extend the functionality of a very big product, using .NET was huge. Till that time, if we wanted to use .NET for add-in functionality we had to rely on &lt;a href="http://en.wikipedia.org/wiki/Runtime_Callable_Wrapper" target="_blank" title="Runtime Callable Wrapper"&gt;RCW&lt;/a&gt;&amp;#0160;or else we had to&amp;#0160;write messy and error-prone VBA code.&amp;#0160;&lt;/p&gt;

&lt;p&gt;Today, anyone who builds applications in managed code (using .NET 4 and above) has built-in&amp;#0160;functionality for extensibility provided by the framework itself. In this post, we will be extending an ASP.NET MVC 3 application. We are going to use Unity as the Dependency Injection (DI) container and the types from the&amp;#0160;System.ComponentModel.Composition namespace (or else, &lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.composition.aspx" target="_blank" title="Managed Extensibility Framework, or MEF"&gt;MEF&lt;/a&gt;) for managing the composition of parts.&lt;/p&gt;

&lt;p&gt;The host application, is the one shown below. I have selected the interesting types that I will be discussing.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8071/8397466245_72d78ba23d_o.png" alt="The types that I will be discussing" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DiscoverableControllerFactory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A MEF-specific &lt;a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.defaultcontrollerfactory.aspx" target="_blank" title="Represents the controller factory that is registered by default."&gt;DefaultControllerFactory&lt;/a&gt;&amp;#0160;derived type. It&amp;#0160;gets the exported types with the contract name, derived from an IController type. After the controller is supplied, the MVC framework will resolve the Views.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DiscoverableControllerFactory&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DefaultControllerFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;CompositionContainer&lt;/span&gt; &lt;span class="n"&gt;compositionContainer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DiscoverableControllerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;CompositionContainer&lt;/span&gt; &lt;span class="n"&gt;compositionContainer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compositionContainer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compositionContainer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;IController&lt;/span&gt; &lt;span class="nf"&gt;CreateController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RequestContext&lt;/span&gt; &lt;span class="n"&gt;requestContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;controllerName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Lazy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IController&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compositionContainer&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetExports&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;()&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ContainsKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controllerName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                   &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controllerName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;controllerName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;First&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;UnityControllerFactory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A Unity-specific DefaultControllerFactory&amp;#0160;&amp;#0160;derived type. There are many implementations around. The difference from other implementations is that this one takes a delegate as a parameter in the constructor that acts as the fallback factory when the DI container can not supply a controller. This is a very important part of our architecture because here we have the chance to supply the target controller (as an add-in)&amp;#0160;using&amp;#0160;MEF.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UnityControllerFactory&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DefaultControllerFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;UnityContainer&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IController&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alternativeFactoryMethod&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UnityControllerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;UnityContainer&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IController&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alternativeFactoryMethod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alternativeFactoryMethod&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alternativeFactoryMethod&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;IController&lt;/span&gt; &lt;span class="nf"&gt;GetControllerInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RequestContext&lt;/span&gt; &lt;span class="n"&gt;requestContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;controllerType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;IController&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controllerType&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;controllerName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;alternativeFactoryMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;requestContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                    &lt;span class="n"&gt;controllerName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;quot;The controller for path '{0}' could not be found or it 
&lt;/span&gt;                        &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;implement&lt;/span&gt; &lt;span class="n"&gt;IController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;,
&lt;/span&gt;                    &lt;span class="n"&gt;requestContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IController&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;IsAssignableFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controllerType&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;Type requested is not a controller: {0}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllerType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="s"&gt;&amp;quot;controllerType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controllerType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;IController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InvalidOperationException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;Error resolving controller {0}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllerType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Global.asax&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we specify the default path for the extensions. We create a new instance of the DiscoverableControllerFactory class passing a CompositionContainer and a DirectoryCatalog. Keep in mind that the DirectoryCatalog is one of the many choices that MEF provides for discovering parts. Besides the creation of the&amp;#0160;DiscoverableControllerFactory we also create a new instance of the UnityControllerFactory class acting as the default controller factory. Any controllers that this factory can not supply will fallback to the DiscoverableControllerFactory using it&amp;#39;s CreateController method. One last thing to note, this is the application&amp;#39;s&amp;#0160;&lt;a href="http://blog.ploeh.dk/2011/07/28/CompositionRoot.aspx" target="_blank" title="Composition Root"&gt;Composition Root&lt;/a&gt;. The DI container is referenced here, where the composition happens, and&amp;#0160;&lt;span style="text-decoration: underline;"&gt;nowhere else&lt;/span&gt;&amp;#0160;in the entire application.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;BootstrapContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;extensionsPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;AppDomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentDomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BaseDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Extensions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;discoverableControllerFactory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DiscoverableControllerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CompositionContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DirectoryCatalog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extensionsPath&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

    &lt;span class="c1"&gt;// No direct reference on the container outside this method.
&lt;/span&gt;    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;unityControllerFactory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UnityControllerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UnityContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Registrator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForControllers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;Registrator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForServices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;Registrator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForEnterpriseLibrary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;fallbackFactoryMethod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;discoverableControllerFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateController&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;ControllerBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetControllerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unityControllerFactory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Application_Start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;AreaRegistration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RegisterAllAreas&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nf"&gt;RegisterGlobalFilters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GlobalFilters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Filters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;RegisterRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RouteTable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nf"&gt;BootstrapContainer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The add-in application is a regular class library and it&amp;#39;s structure is shown below. I have selected the interesting types that I will be discussing.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8077/8397466255_c4bcf9152a_o.png" alt="The types that I will be discussing" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ConceptController&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a proof of concept&amp;#0160;Controller for this demo. It is decorated with the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.composition.exportattribute.aspx" target="_blank" title="Specifies that a type, property, field, or method provides a particular export."&gt;ExportAttribute&lt;/a&gt;&amp;#0160;and&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.composition.exportmetadataattribute.aspx" target="_blank" title="Specifies metadata for a type, property, field, or method marked with the ExportAttribute."&gt;ExportMetadataAttribute&lt;/a&gt;. The later is needed in order to help the DiscoverableControllerFactory to choose the right controller among all the controllers supplied by this and other add-ins. The&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.composition.partcreationpolicyattribute.aspx" target="_blank" title="Specifies the CreationPolicy for a part."&gt;PartCreationPolicyAttribute&lt;/a&gt;&amp;#0160;is needed in order to specify that a new non-shared (transient) instance will be created for each request.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Export(typeof(IController)), ExportMetadata(&amp;quot;controllerName&amp;quot;, &amp;quot;Concept&amp;quot;)]&lt;/span&gt;
&lt;span class="na"&gt;[PartCreationPolicy(CreationPolicy.NonShared)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConceptController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ViewBag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~/Extensions/Views/Concept/Index.cshtml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Index.cshtml, Web.config&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nothing special to say here. The razor view is just any other (razor) view. The Web.config is needed as a hint for the MVC framework to compile the razor views at runtime.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make sure to select all the views and set the property &amp;ldquo;Copy to Output directory&amp;rdquo; to &amp;ldquo;&lt;em&gt;Copy if newer&amp;rdquo;. &lt;/em&gt;This is important because each time we compile the add-in library besides the .dll with the models and the controllers we also want the views to be copied there (they are also part of the add-in).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can download the demo application &lt;a href="http://goo.gl/kX4ZP" target="_blank" title="ExtensibleMvcApplicationDemo-Part1.zip"&gt;here&lt;/a&gt;. Upon build the Concepts.dll along with it&amp;#39;s Views will be copied in the Web project&amp;#39;s &amp;ldquo;Extensions&amp;rdquo; directory. When run, the application will automatically load the assembly the first time the &amp;ldquo;Concepts&amp;rdquo; tab is pressed.&lt;/p&gt;

&lt;ul&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>The Small Shelf</title>
    <link rel="alternate" href="/blog/2011/08/07/the-small-shelf"/>
    <id>http://nikosbaxevanis.com/blog/2011/08/07/the-small-shelf</id>
    <updated>2011-08-07T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8329/8398548102_8136765cd3_o.png" alt="The shelf in my library where I store my favorite books" /&gt;&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;small shelf&amp;rdquo; is a shelf in my library where I store my favorite books on Software Development. I like to write code and I am not looking forward to stop, so there are no books there about management (at least, yet).&lt;/p&gt;

&lt;p&gt;At the moment, the titles are (from right to left):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670/ref=wl_it_dp_o?ie=UTF8&amp;amp;coliid=IE2595W60WCL4&amp;amp;colid=19397BGFN5DJH" target="_blank" title="Code Complete: A Practical Handbook of Software Construction by Steve McConnell"&gt;Code Complete: A Practical Handbook of Software Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/CLR-via-3rd-Jeffrey-Richter/dp/0735627045/ref=wl_it_dp_o?ie=UTF8&amp;amp;coliid=I2QDLQQLXWKJSW&amp;amp;colid=19397BGFN5DJH" target="_blank" title="CLR via C# 3rd Edition by Jeffrey Richter"&gt;CLR via C# 3rd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=wl_it_dp_o?ie=UTF8&amp;amp;coliid=I3NMZD949VN2M8&amp;amp;colid=19397BGFN5DJH" target="_blank" title="Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries by Krzysztof Cwalina"&gt;Framework Design Guidelines 2nd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Enterprise-Application-Architecture-Addison-Wesley-Signature/dp/0321127420/ref=wl_it_dp_o?ie=UTF8&amp;amp;coliid=I1S8PWZ4KAALG5&amp;amp;colid=19397BGFN5DJH" target="_blank" title="Patterns of Enterprise Application Architecture by Martin Fowler"&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Domain-driven-Design-Tackling-Complexity-Software/dp/0321125215/" target="_blank" title="Domain-driven Design: Tackling Complexity in the Heart of Software by Eric Evans"&gt;Domain-driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Release-Production-Ready-Software-Pragmatic-Programmers/dp/0978739213/ref=wl_it_dp_o?ie=UTF8&amp;amp;coliid=I32DDNTOT2LPKC&amp;amp;colid=19397BGFN5DJH" target="_blank" title="Release It!: Design and Deploy Production-Read​y Software by Michael T. Nygard"&gt;Release It!: Design and Deploy Production-Read​y Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Dependency-Injection-NET-Mark-Seemann/dp/1935182501" target="_blank" title="Dependency Injection in .NET by Mark Seemann"&gt;Dependency Injection in .NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/xUnit-Test-Patterns-Refactoring-Signature/dp/0131495054/ref=wl_it_dp_o?ie=UTF8&amp;amp;coliid=IQQRNYGEWLPM7&amp;amp;colid=19397BGFN5DJH" target="_blank" title="xUnit Test Patterns: Refactoring Test Code by Gerard Meszaros"&gt;xUnit Test Patterns: Refactoring Test Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627" target="_blank" title="Growing Object-Oriented Software, Guided by Tests by Steve Freeman, and Nat Pryce"&gt;Growing Object-Oriented Software, Guided by Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Real-World-Functional-Programming-Examples/dp/1933988924" target="_blank" title="Real-World Functional Programming: With Examples in F# and C# by Tomas Petricek, and Jon Skeet"&gt;Real-World Functional Programming: With Examples in F# and C#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;/ul&gt;

&lt;p&gt;Due to the small dimensions of the shelf, when I want to store a new book I have to remove one so I need to carefully consider which one I should remove. Pretty neat process isn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8226/8398547870_0b62dd015c_o.png" alt="Some books not in the shelf" /&gt;&lt;/p&gt;

&lt;p&gt;Here are some books not in the shelf, the three from the bottom where recently removed. That doesn&amp;#39;t mean they are not good, or I don&amp;#39;t like them, or I haven&amp;#39;t read them (in any way).&lt;/p&gt;

&lt;p&gt;By they way, these are (from bottom to top):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/NHibernate-3-0-Cookbook-Jason-Dentler/dp/184951304X/ref=wl_it_dp_o?ie=UTF8&amp;amp;coliid=I1P3Y3RARP8QAT&amp;amp;colid=19397BGFN5DJH" target="_blank" title="NHibernate 3.0 Cookbook by Jason Dentler"&gt;NHibernate 3.0 Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Old-New-Thing-Development-Throughout/dp/0321440307/ref=wl_it_dp_o?ie=UTF8&amp;amp;coliid=I39Q726IL6JVVU&amp;amp;colid=19397BGFN5DJH" target="_blank" title="The Old New Thing: Practical Development Throughout the Evolution of Windows by Raymond Chen"&gt;The Old New Thing: Practical Development Throughout the Evolution of Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Kanban-David-J-Anderson/dp/0984521402/ref=wl_it_dp_o?ie=UTF8&amp;amp;coliid=I15H19AQJB5RIQ&amp;amp;colid=19397BGFN5DJH" target="_blank" title="Kanban by David J. Anderson"&gt;Kanban&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/HTML5-CSS3-Tomorrows-Standards-Programmers/dp/1934356689/ref=wl_it_dp_o?ie=UTF8&amp;amp;coliid=I29VATAH0LV7SD&amp;amp;colid=19397BGFN5DJH" target="_blank" title="HTML5 and CSS3: Develop with Tomorrow&amp;#39;s Standards Today by Brian P. Hogan"&gt;HTML5 and CSS3: Develop with Tomorrow&amp;#39;s Standards Today&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Lean-Architecture-Agile-Software-Development/dp/0470684208/ref=wl_it_dp_o?ie=UTF8&amp;amp;coliid=I19CZ5Q1SNFX21&amp;amp;colid=19397BGFN5DJH" target="_blank" title="Lean Architecture: for Agile Software Development by James O. Coplien"&gt;Lean Architecture: for Agile Software Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last two are new, I received the past weeks.&lt;/p&gt;

&lt;p&gt;I am curious with HTML5, I think in the following years there is going to be a switch to a unified presentation model using the combination of HTML5, CSS3 and JavaScript. I also believe that using this model, any access to external systems/services/etc is going to happen in a RESTfull way. For that reason, on my Kindle&amp;#0160;device among other is&amp;#0160;&lt;a href="http://www.amazon.co.uk/REST-Practice-Hypermedia-Systems-Architecture/dp/0596805829/ref=sr_1_1?ie=UTF8&amp;amp;qid=1312710691&amp;amp;sr=8-1" target="_blank" title="REST in Practice: Hypermedia and Systems Architecture by Jim Webber, Savas Parastatidis and Ian Robinson"&gt;REST in Practice: Hypermedia and Systems Architecture&lt;/a&gt;. I use Kindle a lot, specially &lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2011/06/embrace-the-web.html" target="_blank"&gt;when&lt;/a&gt; I&amp;#39;m on the plane.&lt;/p&gt;

&lt;p&gt;Finally, I currently maintain three Amazon.co.uk wish lists, which I have publicly available:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/registry/wishlist/19397BGFN5DJH/ref=cm_wl_rlist_go" target="_blank"&gt;Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/registry/wishlist/R8UIH1AFSR4G/ref=cm_wl_rlist_go" target="_blank"&gt;E-books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/registry/wishlist/DEFDF6UV9QS9/ref=cm_wl_rlist_go" target="_self"&gt;Recently Viewed&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last one helps me a lot, since I can save there the book titles I come across and later I can decide what I will buy.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Following the Composition Root pattern with Enterprise Library</title>
    <link rel="alternate" href="/blog/2011/08/04/following-the-composition-root-pattern-with-enterprise-library"/>
    <id>http://nikosbaxevanis.com/blog/2011/08/04/following-the-composition-root-pattern-with-enterprise-library</id>
    <updated>2011-08-04T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;A question that frequently rises when building enterprise applications is: &lt;em&gt;&amp;ldquo;Where should we compose object graphs?&amp;rdquo; &lt;/em&gt;and the answer is given by the Composition Root pattern:&amp;#0160;&lt;em&gt;&amp;ldquo;As close as possible to the applications entry point.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Composition Root pattern is&amp;#0160;described in the excellent&amp;#0160;&lt;a href="http://manning.com/seemann/" target="_blank" title="Dependency Injection in .NET (Mark Seemann)"&gt;book&lt;/a&gt;, Dependency Injection in .NET by Mark Seemann.&lt;/p&gt;

&lt;p&gt;Here is the definition from the book:&lt;em&gt;&lt;br /&gt;&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Composition Root is a (preferably) unique location in an application where modules are composed&amp;#0160;together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When working with the Enterprise Library, it is very common to hide the complexities of initial context creation by&amp;#0160;using the built-in IServiceLocator implementation provided by the &lt;a href="http://msdn.microsoft.com/en-us/library/microsoft.practices.enterpriselibrary.common.configuration.enterpriselibrarycontainer(v=pandp.50).aspx" target="_blank" title="Entry point for the container infrastructure for Enterprise Library."&gt;EnterpriseLibraryContainer&lt;/a&gt;&amp;#0160;class.&lt;/p&gt;

&lt;p&gt;Since I completely agree with the statement &amp;ldquo;&lt;a href="http://blog.ploeh.dk/2010/02/03/ServiceLocatorIsAnAntiPattern.aspx" target="_blank"&gt;Service Locator is an Anti-Pattern&lt;/a&gt;&amp;rdquo; I would like to compose all Enterprise Library modules in the Composition Root. Then, I can use well-known DI patterns (such as Constructor Injection) to supply the Dependencies.&lt;/p&gt;

&lt;p&gt;Fortunately, the EnterpriseLibraryContainer class contains a method named &amp;ldquo;ConfigureContainer&amp;rdquo; that reads the current configuration and supplies the corresponding type information to configure a dependency injection container (by default Unity).&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;configurator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UnityContainerConfigurator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;configSource&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigurationSourceFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;EnterpriseLibraryContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ConfigureContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configurator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;configSource&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;After configuring the container in the Composition Root we can resolve any instance of a type from Enterprise Library as with any other object.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Async REST Client for the Scrumy API</title>
    <link rel="alternate" href="/blog/2011/07/17/async-rest-client-for-the-scrumy-api"/>
    <id>http://nikosbaxevanis.com/blog/2011/07/17/async-rest-client-for-the-scrumy-api</id>
    <updated>2011-07-17T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;I am a big fan of &lt;a title="Scrumy is a simple and intuitive virtual task board based on some concepts of Scrum that helps organize and manage your projects." href="http://scrumy.com/" target="_blank"&gt;Scrumy&lt;/a&gt;, I must admit that! Scrumy is &lt;em&gt;a simple and intuitive virtual task board based on some concepts of Scrum that helps organize and manage your projects (scrumy.com)&lt;/em&gt;.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The last weeks I have been thinking of a Visual Studio Extension for viewing (and interacting with) an entire Scrum (Sprints, Stories, Tasks, etc) from inside the IDE.&amp;nbsp;I started building a client library around the Scrumy REST API. I wanted it to be fully asynchronous because I would like to make the Extension UI responsive.&lt;/p&gt;

&lt;p&gt;Back a few months ago, I was watching a 5hr webcast on Windows Azure called &lt;a title="Windows Azure Deep Dive with Jeffrey Richter: Explore the Benefits of Windows Azure Data Storage and Compute Services" href="http://www.wintellect.com/CS/blogs/jeffreyr/archive/2011/04/05/windows-azure-deep-dive-with-jeffrey-richter-explore-the-benefits-of-windows-azure-data-storage-and-compute-services.aspx" target="_blank"&gt;Windows Azure Deep Dive with Jeffrey Richter&lt;/a&gt; were Jeffrey Richter&amp;nbsp;shared among the (fantastic code samples) a fully asynchronous HttpRestClient class. This class is making heavy use of the&amp;nbsp;&lt;a title="AsyncEnumerator uses C# language features to simplify asynchronous programming." href="http://msdn.microsoft.com/en-us/magazine/cc721613.aspx" target="_blank"&gt;AsyncEnumerator&lt;/a&gt; class (which I am big fan of, till C# 5.0 with async is out) so I though I should build my client around the HttpRestClient class and make also use of the AsyncEnumerator class.&lt;/p&gt;

&lt;p&gt;I started by looking at the GET response:&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;scrumy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="n"&gt;T21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zone&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Central&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;US&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Canada&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zone&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="n"&gt;T23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nikos&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;scrumy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sprints&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;array&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sprint&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="n"&gt;T21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;186884&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="n"&gt;T21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;scrumy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nikos&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;scrumy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;sprint&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;sprints&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Then I created the corresponding&amp;nbsp;classes:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="c1"&gt;/// &amp;lt;example&amp;gt;
///     &amp;lt;scrumy&amp;gt;
///         &amp;lt;created-at&amp;gt;2011-06-24T21:49:57Z&amp;lt;/created-at&amp;gt;
///         &amp;lt;time-zone&amp;gt;Central Time (US &amp;amp; Canada)&amp;lt;/time-zone&amp;gt;
///         &amp;lt;updated-at&amp;gt;2011-06-24T21:57:08Z&amp;lt;/updated-at&amp;gt;
///         &amp;lt;url&amp;gt;nikos&amp;lt;/url&amp;gt;
///     &amp;lt;/scrumy&amp;gt;
/// Editable fields: url, time_zone
/// &amp;lt;/example&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Scrumy&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTimeOffset&lt;/span&gt; &lt;span class="n"&gt;CreatedAt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;TimeZone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTimeOffset&lt;/span&gt; &lt;span class="n"&gt;UpdatedAt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Url&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;/// &amp;lt;example&amp;gt;
///     &amp;lt;sprints type=&amp;quot;array&amp;quot;&amp;gt;
///        &amp;lt;sprint&amp;gt;
///            &amp;lt;created-at&amp;gt;2011-06-24T21:50:53Z&amp;lt;/created-at&amp;gt;
///            &amp;lt;id&amp;gt;186884&amp;lt;/id&amp;gt;
///            &amp;lt;start-date&amp;gt;2011-06-24&amp;lt;/start-date&amp;gt;
///            &amp;lt;updated-at&amp;gt;2011-06-24T21:50:53Z&amp;lt;/updated-at&amp;gt;
///            &amp;lt;scrumy-url&amp;gt;nikos&amp;lt;/scrumy-url&amp;gt;
///        &amp;lt;/sprint&amp;gt;
///    &amp;lt;/sprints&amp;gt;
/// Editable fields: url, time_zone
/// &amp;lt;/example&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sprint&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTimeOffset&lt;/span&gt; &lt;span class="n"&gt;CreatedAt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTimeOffset&lt;/span&gt; &lt;span class="n"&gt;StartDate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTimeOffset&lt;/span&gt; &lt;span class="n"&gt;UpdatedAt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ScrumyUrl&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Next I included generic Begin/End methods for supporting the APM inside my class:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="nf"&gt;BeginRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="n"&gt;ScrumyRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;XElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ScrumyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="n"&gt;AsyncCallback&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AsyncEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ScrumyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
         &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Method={0}, Uri={1}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SyncContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;apmWrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;MakeRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;apmWrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt; &lt;span class="n"&gt;EndRequest&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
     &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ScrumyResponse&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;apmWrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Unwrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;EndExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;MakeRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="n"&gt;AsyncEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ScrumyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="n"&gt;ScrumyRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;XElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ScrumyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;End&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;XElement&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndRequestXElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DequeueAsyncResult&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/pre&gt;
&lt;p&gt;With these helper methods, dealing with the APM was trivial when implementing methods for the Scrumy client. Here are the methods I had to write for getting the Sprints:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="nf"&gt;BeginGetScrumy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="n"&gt;GetScrumyRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="n"&gt;AsyncCallback&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;XElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetScrumyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;processor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;DateTimeOffset&lt;/span&gt; &lt;span class="n"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;DateTimeOffset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;TryParse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;created-at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;DateTimeOffset&lt;/span&gt; &lt;span class="n"&gt;updatedAt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;DateTimeOffset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;TryParse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;updated-at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;updatedAt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;scrumy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Scrumy&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;CreatedAt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;TimeZone&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;time-zone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;UpdatedAt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GetScrumyResponse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Scrumy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrumy&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;BeginRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;GetScrumyResponse&lt;/span&gt; &lt;span class="nf"&gt;EndGetScrumy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EndRequest&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GetScrumyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/pre&gt;
&lt;p&gt;As you notice, only the logic that creates a Sprint object from an XElement is inside the Begin part. Everything else is handled by the helper classes.&lt;/p&gt;

&lt;p&gt;Finally, here is how to use it:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;AsyncEnumerator&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AsyncEnumerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;            
&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;GetSprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndExecute&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetSprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AsyncEnumerator&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GetSprintRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProjectName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginGetSprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;End&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndGetSprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DequeueAsyncResult&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprints&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I am looking forward building as much as I can and then to continue with the Visual Studio Extension.&lt;/p&gt;

&lt;p&gt;A gist with all the source code can be found &lt;a title="Asynchronous .NET Client Implementation around the Scrumy REST API." href="https://gist.github.com/2850410" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Creating JSON-enabled ViewModels</title>
    <link rel="alternate" href="/blog/2011/07/17/creating-json-enabled-viewmodels"/>
    <id>http://nikosbaxevanis.com/blog/2011/07/17/creating-json-enabled-viewmodels</id>
    <updated>2011-07-17T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Recently, Ian Randall&amp;nbsp;contributed something really cool to the DynamicViewModel codebase:&amp;nbsp;Support for binding to a JSON object.&amp;nbsp;I find this exciting!&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In the trunk of DynamicViewModel you can find an example that uses the Stack Exchange API. It is a WPF application for searching the Stack Overflow Users.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8045/8398555224_d4ecaec7ae_o.png" alt="Screenshot of the demo application" /&gt;&lt;/p&gt;

&lt;p&gt;All API responses are JSON in Stack Exchange API. Ian took advantage of that and wrote a DynamicViewModelFactory that contains the factory method below:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DynamicViewModel&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DynamicViewModel&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;TryCreateDynamic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;parameter was not a valid JSON string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This factory method creates an instance of a DynamicViewModel from a JSON formatted string. In order to use it you need to write code similar to the one below:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;uriString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://api.stackoverflow.com/1.1/users?filter=&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Argument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;CreateHttpWebRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uriString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetResponse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;streamReader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StreamReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetResponseStream&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;streamReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadToEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;viewModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DynamicViewModelFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And some XAML action:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TextBlock&lt;/span&gt;
    &lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;VerticalAlignment&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Center&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Margin&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4,0,0,0&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Binding display_name}&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TextBlock&lt;/span&gt;
    &lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;VerticalAlignment&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Center&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Binding reputation}&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BadgesUserControl&lt;/span&gt;
    &lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;DataContext&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Binding badge_counts}&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The source code is &lt;a href="http://dynamicviewmodel.codeplex.com/SourceControl/list/changesets" target="_blank"&gt;here&lt;/a&gt;. Thanks to&amp;nbsp;&lt;a href="http://xaml.geek.nz/contact" target="_self"&gt;Ian Randall&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Mood Mosaic Vol. 13</title>
    <link rel="alternate" href="/blog/2011/07/03/the-mood-mosaic-vol-13"/>
    <id>http://nikosbaxevanis.com/blog/2011/07/03/the-mood-mosaic-vol-13</id>
    <updated>2011-07-03T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;The Mood Mosaic series is a famous Vinyl compilation with Funk, Rare Groove and Disco tracks (&amp;#39;60s-&amp;#39;80s).&lt;/p&gt;

&lt;p&gt;I recently got the&amp;#0160;&lt;a href="http://www.discogs.com/Various-The-Mood-Mosaic-13-Soul-Seduction/release/1787861" target="_blank" title="The Mood Mosaic 13: Soul Seduction"&gt;Vol. 13&lt;/a&gt;&amp;#0160;and I really enjoyed the tracks Closer Closer (Celi Bee &amp;amp; The Fuzzy Bunch)&amp;#0160;and Midnight Groove (Love Unlimited)&amp;#0160;among others.&amp;#0160;For the latter, there is a less known re-edit back from 2005. It can be found on &lt;a href="http://www.juno.co.uk/products/re-edits-volume-1-ep/180402-01/?ref=NikosBaxevanis" target="_blank" title="Love Unlimited Orchestra - Midnight Groove (Edit)"&gt;Juno&lt;/a&gt; and also on &lt;a href="http://www.discogs.com/sell/list?release_id=501875&amp;amp;ev=rb" target="_blank" title="Love Unlimited Orchestra - Midnight Groove (Edit)"&gt;Discogs&lt;/a&gt; marketplace.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://farm9.staticflickr.com/8194/8398548430_5e3c8ef15c_o.png" target="_blank" title="My Technics turntable."&gt;That&lt;/a&gt;&amp;#0160;is the turntable I have (Technics 1210 M5G).&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mono for Android (Threads Window)</title>
    <link rel="alternate" href="/blog/2011/06/25/mono-for-android-threads-window"/>
    <id>http://nikosbaxevanis.com/blog/2011/06/25/mono-for-android-threads-window</id>
    <updated>2011-06-25T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;(Couldn&amp;#39;t resist..!)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8215/8398554432_8590d1d44c_o.png" title="Visual Studio Threads Window" alt="Visual Studio Threads Window"/&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Don't Rely on SQL Membership Provider database schema</title>
    <link rel="alternate" href="/blog/2011/06/23/dont-rely-on-sql-membership-provider-database-schema"/>
    <id>http://nikosbaxevanis.com/blog/2011/06/23/dont-rely-on-sql-membership-provider-database-schema</id>
    <updated>2011-06-23T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;You take the blue pill and the story &lt;a href="http://blogs.teamb.com/craigstuntz/2010/03/05/38558/"&gt;ends&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, due to the role-centric nature of many applications, entities rely on the user and it&amp;#39;s role(s).&amp;#0160;On registration, the user choose one or more roles. Each role is associated with behaviors. For each behavior one or more restriction policies apply, etc.&amp;#0160;&lt;/p&gt;

&lt;p&gt;In somes cases, we could decide to take a dependency on the ASP.NET Membership tables and just map on the UserName column of Users table, and the RoleName column of Roles table (also on the UsersInRole table too).&lt;/p&gt;

&lt;p&gt;Fabio has a &lt;a href="http://fabiomaulo.blogspot.com/2010/03/conform-mapping-aspnet-membership.html" target="_blank" title="ConfORM: &amp;quot;Mapping&amp;quot; ASP.NET Membership"&gt;post&lt;/a&gt; on how you can do this using ConfORM. In this post I will map only the User and Role tables. In addition, I will demonstrate an elegant approach of assigning different behaviors on the Role entity and mapping them with the RoleName column on the database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entities&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.ObjectModel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;UserName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;ICollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Roles&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;User&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Roles&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Role&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;RoleName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;ICollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Users&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Mappings&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;FluentNHibernate.Mapping&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserMap&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ClassMap&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UserMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;aspnet_Users&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nf"&gt;LazyLoad&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nf"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;GeneratedBy&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Assigned&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UserId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nf"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nf"&gt;HasManyToMany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Roles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;aspnet_UsersInRoles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RoleMap&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ClassMap&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RoleMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;aspnet_Roles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nf"&gt;LazyLoad&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nf"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;GeneratedBy&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Assigned&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RoleId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nf"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RoleName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nf"&gt;HasManyToMany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cascade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;All&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Inverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;aspnet_UsersInRoles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The RoleName property on our domain model is a string, in order to get mapped with the RoleName column of the table in the database schema.&lt;/p&gt;

&lt;p&gt;In order to assign different behaviors on the Role entity we can follow the solution of Jimmy Bogard with the Enumeration class described &lt;a href="http://lostechies.com/jimmybogard/2008/08/12/enumeration-classes/" target="_blank" title="Enumeration classes"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RoleType class&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RoleType&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Enumeration&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt; &lt;span class="n"&gt;Consumer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ConsumerType&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt; &lt;span class="n"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ProviderType&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt; &lt;span class="n"&gt;Referrer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ReferrerType&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt; &lt;span class="n"&gt;Administrator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AdministratorType&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;RoleType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;RoleType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConsumerType&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ConsumerType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Consumer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// TODO: Add behavior for Consumer.
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProviderType&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ProviderType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Provider&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// TODO: Add behavior for Provider.
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReferrerType&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ReferrerType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Referrer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// TODO: Add behavior for Referrer.
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AdministratorType&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;AdministratorType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Administrator&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// TODO: Add behavior for Administrator.
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Adding an IPostLoadEventListener on NHibernate configuration we can easily add logic to set a specific RoleType to each Role entity.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RoleToRoleTypeEventListener&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IPostLoadEventListener&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnPostLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PostLoadEvent&lt;/span&gt; &lt;span class="n"&gt;@event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;@event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Role&lt;/span&gt; &lt;span class="n"&gt;role&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Roles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;AssignRoleTypeToRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Role&lt;/span&gt; &lt;span class="n"&gt;role&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;@event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;role&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;AssignRoleTypeToRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;AssignRoleTypeToRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Role&lt;/span&gt; &lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RoleName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Consumer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RoleType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Consumer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Provider&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RoleType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Referrer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RoleType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Referrer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Administrator&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RoleType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RoleType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Administrator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The complete Configuration for the ISessionFactory is (or, could be) below:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ISessionFactory&lt;/span&gt; &lt;span class="nf"&gt;BuildSessionFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IKernel&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;CreateConfiguration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForMsSql2008&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BuildSessionFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;FluentConfiguration&lt;/span&gt; &lt;span class="nf"&gt;CreateConfiguration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IDbIntegrationConfigurationProperties&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NHibernate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cfg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DataBaseIntegration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyFactoryFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ProxyFactoryFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SessionFactory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GenerateStatistics&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EventListeners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PostLoadEventListeners&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IPostLoadEventListener&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RoleToRoleTypeEventListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Fluently&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Mappings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AddMappingTypes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;..However we already took the red pill and staying in wonderland!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Embrace The Web!</title>
    <link rel="alternate" href="/blog/2011/06/04/embrace-the-web"/>
    <id>http://nikosbaxevanis.com/blog/2011/06/04/embrace-the-web</id>
    <updated>2011-06-04T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;When I&amp;#39;m on the plane, I usually read (on paper or Kindle). The last time was a couple of weeks ago and I was reading the excellent&amp;#0160;&lt;a href="http://www.amazon.com/REST-Practice-Hypermedia-Systems-Architecture/dp/0596805829" target="_blank" title="REST in Practice: Hypermedia and Systems Architecture (Jim Webber, Savas Parastatidis, and Ian Robinson)"&gt;REST in Practise&lt;/a&gt;&amp;#0160;book.&lt;/p&gt;

&lt;p&gt;On the first page,&amp;#0160;&lt;em&gt;Advance Praise for REST in Practice &lt;/em&gt;I read this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8352/8398554956_7b7c171993_o.png" alt="Excerpt from the first page of REST in Practise (Advance Praise for REST in Practise)" /&gt;&lt;/p&gt;

&lt;p&gt;Here is the description from the&amp;#0160;&lt;a href="http://www.caelumobjects.com/opensource/" target="_blank"&gt;Caelum Objects&lt;/a&gt;&amp;#0160;website:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A restful framework based on the four constraints defined by Roy Fielding. It uses &lt;a href="http://en.wikipedia.org/wiki/HATEOAS" target="_blank" title="HATEOAS, an acronym for Hypermedia as the Engine of Application State, is a constraint of the REST application architecture that distinguishes it from most other network application architectures."&gt;HATEOAS&lt;/a&gt; within its core in order to be able to create loosely coupled distributed systems.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am looking forward trying &lt;a href="http://restfulie.caelum.com.br/" target="_blank" title="Restfulie - Restful made easy"&gt;Restfulie&lt;/a&gt;!&lt;em&gt;&amp;#0160;&lt;/em&gt;For those interested, I found the .NET version of the server&amp;#0160;&lt;a href="https://github.com/mauricioaniche/restfulie.net" target="_blank"&gt;here&lt;/a&gt;&amp;#0160;and the client implementation &lt;a href="https://github.com/caelum/restfulie-net" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Enterprise Library IContainerConfigurator implementation for Windsor</title>
    <link rel="alternate" href="/blog/2011/05/15/enterprise-library-icontainerconfigurator-implementation-for-windsor"/>
    <id>http://nikosbaxevanis.com/blog/2011/05/15/enterprise-library-icontainerconfigurator-implementation-for-windsor</id>
    <updated>2011-05-15T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Alternative title: &amp;ldquo;&lt;a title="Error Management Is Sometimes Exceptionally Difficult" href="http://www.nikosbaxevanis.com/bonus-bits/2011/05/error-management-is-sometimes-exceptionally-difficult.html" target="_blank"&gt;Error Management Is Sometimes Exceptionally Difficult&lt;/a&gt;, Part 2&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I &lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2011/05/error-management-is-sometimes-exceptionally-difficult.html" target="_blank"&gt;previously&lt;/a&gt;&amp;nbsp;tried to write an implementation of the &lt;a title="Implement this interface to create an object that can read a set of TypeRegistration objects representing the current Enterprise Library configuration and configure a dependency injection container with that information." href="http://msdn.microsoft.com/en-us/library/microsoft.practices.enterpriselibrary.common.configuration.containermodel.icontainerconfigurator(v=pandp.50).aspx" target="_blank"&gt;IContainerConfigurator&lt;/a&gt; interface. The most tricky part was extracting the container registration entry for constructing a specific type. The entry is provided in the &lt;a title="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel TypeRegistration(Of T) Class" href="http://msdn.microsoft.com/en-us/library/ff669651(v=pandp.50).aspx" target="_blank"&gt;TypeRegistration&lt;/a&gt; class as a LambdaExpression and additional metadata.&lt;/p&gt;

&lt;p&gt;The fact that &lt;a title="Entry point for the container infrastructure for Enterprise Library." href="http://msdn.microsoft.com/en-us/library/microsoft.practices.enterpriselibrary.common.configuration.enterpriselibrarycontainer(v=pandp.50).aspx" target="_blank"&gt;EnterpriseLibraryContainer&lt;/a&gt;&amp;nbsp;class is completely decoupled from a specific container implementation made me keep trying to figure out a way to get the entries from the LamdaExpressions.&lt;/p&gt;

&lt;p&gt;I posted two questions on StackOverflow, and I got all the necessary info:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a rel="nofollow" href="http://blogs.msdn.com/b/agile/archive/2009/06/25/enterprise-library-5-0-architectural-refactoring-complete.aspx"&gt;Architectural Refactoring overview&lt;/a&gt;&amp;nbsp;(from &lt;a title="Exception Handling Block - Manually registering the ExceptionManager class" href="http://stackoverflow.com/questions/5968725/exception-handling-block-manually-registering-the-exceptionmanager-class" target="_blank"&gt;this&lt;/a&gt;&amp;nbsp;question).&lt;/li&gt;
&lt;li&gt;Use of the&amp;nbsp;ParameterValue subclasses combined with the Visitor pattern over ParameterValues to make the code cleaner (from &lt;a href="http://stackoverflow.com/questions/5955813/enterprise-library-get-value-from-parametervalue-expression" title="Enterprise Library - Get value from ParameterValue Expression" target="_blank"&gt;this&lt;/a&gt;&amp;nbsp;question).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The support I had from the project team members &amp;nbsp;was accurate and detailed. That was great.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;a title="WindsorContainerConfigurator.cs" href="http://entlibcontrib.codeplex.com/SourceControl/changeset/63545" target="_blank"&gt;current&lt;/a&gt; implementation relies heavily on Windsor&amp;rsquo;s Property classes and it is based on the UnityContainerConfigurator.&lt;/p&gt;

&lt;p&gt;Below is the WindsorParameterVisitor,&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindsorParameterVisitor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ParameterValueVisitor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;InjectionParameters&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;VisitConstantParameterValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
         &lt;span class="n"&gt;ConstantParameterValue&lt;/span&gt; &lt;span class="n"&gt;parameterValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;MemberExpression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;parameterValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;InjectionParameters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="n"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameterValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;VisitResolvedParameterValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
         &lt;span class="n"&gt;ContainerResolvedParameter&lt;/span&gt; &lt;span class="n"&gt;parameterValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;InjectionParameters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="n"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameterValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameterValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;VisitEnumerableParameterValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
         &lt;span class="n"&gt;ContainerResolvedEnumerableParameter&lt;/span&gt; &lt;span class="n"&gt;parameterValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;InjectionParameters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parameterValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Names&lt;/span&gt;
           &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameterValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ElementType&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
           &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The ParameterValueVisitor class is needed because most TypeRegistrations are quite complex coming with both ConstructorParameters and InjectedProperties and all this stuff must be routed on the .DependsOn() method of Windsor (actually Castle.MicroKernel).&lt;/p&gt;

&lt;p&gt;Below is some basic setup for configuring the Enterprise Library to use Windsor,&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WindsorContainer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Add a SubResolver for components with IEnumerable&amp;lt;T&amp;gt; dependencies on .ctors.
&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resolver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSubResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CollectionResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Kernel&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// This is the Windsor specific impl. of IContainerConfigurator interface.
&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;configurator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WindsorContainerConfigurator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Configure the Enterprise Library Container to use Windsor internally.
&lt;/span&gt;&lt;span class="n"&gt;EnterpriseLibraryContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ConfigureContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configurator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;ConfigurationSourceFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// Set Current property to a new instance of the WindsorServiceLocator adapter.
&lt;/span&gt;&lt;span class="n"&gt;EnterpriseLibraryContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WindsorServiceLocator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The source can be found &lt;a href="http://entlibcontrib.codeplex.com/SourceControl/changeset/63545" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is tested with Exception Handling application block and I was able to resolve the ExceptionManager class.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Updates on Blog's Source Code Location</title>
    <link rel="alternate" href="/blog/2011/05/14/updates-on-blogs-source-code-location"/>
    <id>http://nikosbaxevanis.com/blog/2011/05/14/updates-on-blogs-source-code-location</id>
    <updated>2011-05-14T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Today I moved all the code samples to a single project named BonusBits.CodeSamples which can be found &lt;a href="https://github.com/moodmosaic/BonusBits.CodeSamples" target="_blank" title="BonusBits Blog source-code."&gt;here&lt;/a&gt;. &amp;#0160;I updated (almost) all the articles and blog posts to reference the new location.&lt;/p&gt;

&lt;p&gt;I think it&amp;#39;s easier to have everything under a single solution and get updates for everything with a single git-pull cmd ;)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Error Management Is Sometimes Exceptionally Difficult</title>
    <link rel="alternate" href="/blog/2011/05/11/error-management-is-sometimes-exceptionally-difficult"/>
    <id>http://nikosbaxevanis.com/blog/2011/05/11/error-management-is-sometimes-exceptionally-difficult</id>
    <updated>2011-05-11T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update:&amp;nbsp;&lt;/strong&gt;&amp;nbsp;Please also read &lt;a title="Enterprise Library IContainerConfigurator implementation for Windsor" href="http://www.nikosbaxevanis.com/bonus-bits/2011/05/enterpriselibrary-and-windsorcontainerconfigurator.html" target="_blank"&gt;Part 2&lt;/a&gt;. The source &lt;del&gt;is on github&lt;/del&gt; has been &lt;a href="http://entlibcontrib.codeplex.com/SourceControl/changeset/63545"&gt;merged&lt;/a&gt; in Enterprise Library Contrib.&lt;/p&gt;

&lt;p&gt;I tend to simplify exception handling at layer boundaries, when&amp;nbsp;designing a distributed application. Most of the time if an exception is propagated there I try to apply some kind of policy in order to log the exception and then re-throw&amp;nbsp;&amp;nbsp;a different exception.&lt;/p&gt;

&lt;p&gt;When I started using the&lt;span&gt;&amp;nbsp;Exception Handling Application Block from Enterprise Library I found out that I had to also deploy the Unity assemblies. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;The call below resolves the registered component for the ExceptionManager class:&lt;/span&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;EnterpriseLibraryContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetInstance&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ExceptionManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The IServiceLocator.Current property of EnterpriseLibraryContainer class sets by default the Unity container (via UnityServiceLocator adapter class).&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8508/8398554996_e06fa74d80_b.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;In fact, if I remove the Unity assemblies a FileNotFoundException is thrown, indicating that&amp;nbsp;Microsoft.Practices.Unity assembly or one of its dependencies could not be found.&lt;/p&gt;

&lt;p&gt;Since I use Windsor in that application I didn&amp;rsquo;t like the fact that I had to deploy it with two different IoC containers (!) so I started figuring out how I can call tell the EnterpriseLibraryContainer to resolve the ExceptionManager component using Windsor.&lt;/p&gt;

&lt;p&gt;The first thing I did was to compile the&amp;nbsp;&lt;a title="Castle Windsor Adapter - CommonServiceLocator" href="http://commonservicelocator.codeplex.com/wikipage?title=Castle%20Windsor%20Adapter&amp;amp;referringTitle=Home" target="_blank"&gt;Windsor adapter&lt;/a&gt; of the CommonServiceLocator against the current version of Windsor that I use (and also run the unit-tests and see if they pass).&lt;/p&gt;

&lt;p&gt;Next, I set the IServiceLocator.Current property of the EnterpriseLibraryContainer class:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;EntLibraryContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WindsorServiceLocator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The last thing I did was to call the ConfigureContainer method on the EnterpriseLibraryContainer class. This method takes an&amp;nbsp;IContainerConfigurator and an IConfigurationSource as parameters.&lt;/p&gt;

&lt;p&gt;Great, so I had to provide a class implementing the IContainerConfigurator interface for the Windsor container.&lt;/p&gt;

&lt;p&gt;The IContainerConfigurator interface contains a single method:&amp;nbsp;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RegisterAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="n"&gt;IConfigurationSource&lt;/span&gt; &lt;span class="n"&gt;configurationSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        
     &lt;span class="n"&gt;ITypeRegistrationsProvider&lt;/span&gt; &lt;span class="n"&gt;rootProvider&lt;/span&gt;
     &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Below is the (currently incomplete) implementation:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq.Expressions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Castle.MicroKernel.Registration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Castle.Windsor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Practices.EnterpriseLibrary.Common.Configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindsorContainerConfigurator&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IContainerConfigurator&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IWindsorContainer&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;WindsorContainerConfigurator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IWindsorContainer&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RegisterAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;IConfigurationSource&lt;/span&gt; &lt;span class="n"&gt;configurationSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ITypeRegistrationsProvider&lt;/span&gt; &lt;span class="n"&gt;rootProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TypeRegistration&lt;/span&gt; &lt;span class="n"&gt;registration&lt;/span&gt; 
            &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rootProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetRegistrations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configurationSource&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TypeRegistration&lt;/span&gt; &lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImplementationType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HasComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;componentRegistration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
                &lt;span class="n"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;For&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ImplementedBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConstructorParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetRegistrationDependencies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;componentRegistration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                    &lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConstructorParameters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;componentRegistration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
                    &lt;span class="n"&gt;componentRegistration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;AddLifeStyleToRegistration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;componentRegistration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lifetime&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IDictionary&lt;/span&gt; &lt;span class="n"&gt;GetRegistrationDependencies&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TInterface&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ComponentRegistration&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TInterface&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ParameterValue&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;constructorParameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Hashtable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParameterValue&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;constructorParameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;MemberExpression&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expression&lt;/span&gt;
                &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;MemberExpression&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// TODO: pv.Expression is a MethodCallExpression.
&lt;/span&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ComponentRegistration&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TInterface&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;AddLifeStyleToRegistration&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TInterface&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ComponentRegistration&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TInterface&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;TypeRegistrationLifetime&lt;/span&gt; &lt;span class="n"&gt;typeRegistrationLifetime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typeRegistrationLifetime&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; 
            &lt;span class="n"&gt;TypeRegistrationLifetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;registration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LifeStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typeRegistrationLifetime&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; 
            &lt;span class="n"&gt;TypeRegistrationLifetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;registration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LifeStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transient&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentOutOfRangeException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;typeRegistrationLifetime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s"&gt;&amp;quot;Only Transient and Singleton are supported.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;GetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Expression&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;objectMember&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;getterLambda&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lambda&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;objectMember&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;getterLambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Compile&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I really don&amp;rsquo;t know what to do in the case of a MethodCallExpression as you can see inside the &lt;em&gt;else&lt;/em&gt; block. However, after I can finish with the code inside that block I will be able to do this:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WindsorContainer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Add a SubResolver for components with IEnumerable&amp;lt;T&amp;gt; dependencies on .ctors.
&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resolver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSubResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CollectionResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Kernel&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// This is the Windsor specific impl. of IContainerConfigurator interface.
&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;configurator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WindsorContainerConfigurator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Configure the Enterprise Library Container to use Windsor internally.
&lt;/span&gt;&lt;span class="n"&gt;EnterpriseLibraryContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ConfigureContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configurator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;ConfigurationSourceFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// Set Current property to a new instance of the WindsorServiceLocator adapter.
&lt;/span&gt;&lt;span class="n"&gt;EnterpriseLibraryContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WindsorServiceLocator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I will try to update the code as soon as I have done any changes.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>NHibernate SessionPerRequest with WcfOperationSessionContext (Part 2)</title>
    <link rel="alternate" href="/blog/2011/04/15/nhibernate-sessionperrequest-with-wcfoperationsessioncontext-part-2"/>
    <id>http://nikosbaxevanis.com/blog/2011/04/15/nhibernate-sessionperrequest-with-wcfoperationsessioncontext-part-2</id>
    <updated>2011-04-15T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;In the &lt;a title="NHibernate Session Per Request with WcfOperationSessionContext." href="http://www.nikosbaxevanis.com/bonus-bits/2011/03/nhibernate-session-per-request-with-wcfoperationsessioncontext.html" target="_blank"&gt;previous&lt;/a&gt; post I gave a brief description on how&amp;nbsp;WcfOperationSessionContext can be configured to work.&amp;nbsp;In this post I am going through all the basic steps required to set up a &lt;em&gt;test project&lt;/em&gt; that uses WCF for out of process communication and NHibernate for persistence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hosting the WCF Service in a Managed Application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To host the service inside a managed application, define an endpoint for the service either imperatively in code, declaratively through configuration, or using default endpoints, and then create an instance of ServiceHost.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;svh&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ServiceHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WcfOperationSessionContextTestService&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;svh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddServiceEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ICurrentSessionContextTestService&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NetTcpBinding&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;net.tcp://localhost:56789&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Bootstrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;svh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Server ready. Press any key to exit..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;svh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Before putting the service to start receiving messages, initialize NHibernate by calling Boostrapper&amp;rsquo;s Initialize method. This creates the ISessionFactory instance that will be used through the entire application. Then call Open on ServiceHost. This creates and opens the listener for the service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building the default SessionFactory&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bootstrapper&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SessionFactoryHolder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultSessionFactory&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentSessionContext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WcfOperationSessionContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
           &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DataBaseIntegration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForSQLiteInMemory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyFactoryFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ProxyFactoryFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;())&lt;/span&gt;
           &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SessionFactory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GenerateStatistics&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;SessionFactoryHolder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultSessionFactory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BuildSessionFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ForSQLiteInMemory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;IDbIntegrationConfigurationProperties&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;data source=:memory:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionReleaseMode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConnectionReleaseMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnClose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dialect&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SQLiteDialect&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DriverConnectionProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SQLite20Driver&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BatchSize&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The above steps to build the SessionFactory are straightforward. The new&amp;nbsp;Loquacious extension methods are used for the configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a WCF Service for testing the&amp;nbsp;WcfOperationSessionContext&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;
&lt;span class="na"&gt;[NHibernateWcfContext]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;ServiceBehavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;InstanceContextMode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InstanceContextMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PerSession&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WcfOperationSessionContextTestService&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ICurrentSessionContextTestService&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ISessionFactory&lt;/span&gt; &lt;span class="n"&gt;sessionFactory&lt;/span&gt;
        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SessionFactoryHolder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultSessionFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RunTests&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Show the current session Id for each request.
&lt;/span&gt;        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SessionId={0}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="n"&gt;sessionFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetCurrentSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetSessionImplementation&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;SessionId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Calling GetCurrentSession 2 times returns the SAME instance.
&lt;/span&gt;        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReferenceEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;sessionFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetCurrentSession&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
            &lt;span class="n"&gt;sessionFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetCurrentSession&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Passed..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Since session is NOT thread-safe GetCurrentSession does
&lt;/span&gt;        &lt;span class="c1"&gt;// not work from other thread than the one it was created.
&lt;/span&gt;        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ManualResetEventSlim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;QueueUserWorkItem&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ISessionFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;GetCurrentSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NullReferenceException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Passed..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;sessionFactory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;You may find more information about the&amp;nbsp;NHibernateWcfContext attribute in&amp;nbsp;the&amp;nbsp;&lt;a title="NHibernate Session Per Request with WcfOperationSessionContext." href="http://www.nikosbaxevanis.com/bonus-bits/2011/03/nhibernate-session-per-request-with-wcfoperationsessioncontext.html" target="_blank"&gt;previous&lt;/a&gt;&amp;nbsp;post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above tests shows the current session Id for each request. This is useful when debugging in order to ensure that each session is different for each separate call.&lt;/p&gt;

&lt;p&gt;Then it checks that calling ISessionFactory&amp;rsquo;s GetCurrentSession method many times it will returns the same instance.&lt;/p&gt;

&lt;p&gt;Since the session is not thread-safe ISessionFactory&amp;rsquo;s GetCurrentSession will throw when called from a thread pool thread. (On a thread pool thread one may call ISessionFactory&amp;rsquo;s OpenSession method and work with the session).&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8475/8397465779_4d8f2fa782_o.png" alt=""/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WCF Client Configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is how the client connects to the service in order to run the test method.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Press any key when server is ready..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ChannelFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICurrentSessionContextTestSer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NetTcpBinding&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;net.tcp://localhost:56789&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ICurrentSessionContextTestService&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateChannel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Start our loop.
&lt;/span&gt;        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;'Q'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R=Run Tests, Q=Quit?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToUpper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;KeyChar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'R'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RunTests&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; 

        &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The code can be found &lt;a title="BonusBits Blog source-code." href="https://github.com/moodmosaic/BonusBits.CodeSamples" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>NHibernate SessionPerRequest with WcfOperationSessionContext</title>
    <link rel="alternate" href="/blog/2011/03/30/nhibernate-sessionperrequest-with-wcfoperationsessioncontext"/>
    <id>http://nikosbaxevanis.com/blog/2011/03/30/nhibernate-sessionperrequest-with-wcfoperationsessioncontext</id>
    <updated>2011-03-30T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update:&amp;#0160;&lt;/strong&gt;You may download a &lt;a href="https://github.com/moodmosaic/BonusBits.CodeSamples/tree/master/BonusBits.CodeSamples.NHibernate" target="_blank" title="WcfOperationSessionContext (Sample Application with Tests)"&gt;working example&lt;/a&gt; using NHibernate, WCF and SQLite in-memory. The example is described also &lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2011/04/nhibernate-session-per-request-with-wcfoperationsessioncontext-part2.html" target="_blank" title="NHibernate Session Per Request with WcfOperationSessionContext (Part 2)."&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NHibernate 3 comes with out of the box support for the scenario where we want to have a single Session for the lifetime of a WCF request.&lt;/p&gt;

&lt;p&gt;Using the &lt;a href="http://jameskovacs.com/2011/01/21/loquacious-configuration-in-nhibernate-3/" target="_blank" title="Loquacious Configuration in NHibernate 3."&gt;Loquacious&lt;/a&gt;&amp;#0160;configuration we can easily set the WcfOperationSessionContext to be the default&amp;#0160;current session context.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NHibernate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cfg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DataBaseIntegration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForMySQL5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentSessionContext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WcfOperationSessionContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyFactoryFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ProxyFactoryFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;())&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SessionFactory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GenerateStatistics&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We also need to inspect inbound and outbound application messages prior to dispatching a request message to an operation (for binding the Session) and before returning a reply (for unbinding the Session).&lt;/p&gt;

&lt;p&gt;Here is a specific&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.dispatcher.idispatchmessageinspector.aspx" target="_blank" title="Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications."&gt;IDispatchMessageInspector&lt;/a&gt; implementation for that:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NHibernateWcfContextInitializer&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDispatchMessageInspector&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ISessionFactory&lt;/span&gt; &lt;span class="n"&gt;sessionFactory&lt;/span&gt;
          &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resolve&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ISessionFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;AfterReceiveRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;IClientChannel&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;InstanceContext&lt;/span&gt; &lt;span class="n"&gt;instanceContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;CurrentSessionContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="n"&gt;sessionFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OpenSession&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;BeforeSendReply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;correlationState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CurrentSessionContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Unbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
               &lt;span class="n"&gt;sessionFactory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Next, we need to define a custom Service Behavior that applies to every single endpoint of a service. To do that we need to define a class that implements the &lt;a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.description.iservicebehavior.aspx" target="_blank" title="Provides a mechanism to modify or insert custom extensions across an entire service, including the ServiceHostBase."&gt;IServiceBehavior&lt;/a&gt; interface.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[AttributeUsage(AttributeTargets.Class)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NHibernateWcfContextAttribute&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IServiceBehavior&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;AddBindingParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ServiceDescription&lt;/span&gt; &lt;span class="n"&gt;serviceDescription&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;ServiceHostBase&lt;/span&gt; &lt;span class="n"&gt;serviceHostBase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceEndpoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;BindingParameterCollection&lt;/span&gt; &lt;span class="n"&gt;bindingParameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ApplyDispatchBehavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ServiceDescription&lt;/span&gt; &lt;span class="n"&gt;serviceDescription&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;ServiceHostBase&lt;/span&gt; &lt;span class="n"&gt;serviceHostBase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ChannelDispatcher&lt;/span&gt; &lt;span class="n"&gt;channelDispatcher&lt;/span&gt; 
            &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;serviceHostBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChannelDispatchers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;channelDispatcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Endpoints&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DispatchRuntime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MessageInspectors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NHibernateWcfContextInitializer&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ServiceDescription&lt;/span&gt; &lt;span class="n"&gt;serviceDescription&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;ServiceHostBase&lt;/span&gt; &lt;span class="n"&gt;serviceHostBase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We can now decorate any WCF service implementation with [NHibernateWcfContext] attribute and we can access the Session using the ISessionFactory&amp;#39;s GetCurrentSession method.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When using the&amp;#0160;&lt;a href="http://code.google.com/p/agatha-rrsl/" target="_blank" title="Implementation of the Request/Response Service Layer for .NET"&gt;agatha-rrsl&lt;/a&gt;&amp;#0160;project instead of providing a WcfRequestProcessor define a custom RequestProcessor (deriving from the&amp;#0160;WcfRequestProcessor) and decorating it with the [NHibernateWcfContext] attribute.&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[NHibernateWcfContext]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NHibernateWcfRequestProcessor&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Agatha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceLayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WCF&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WcfRequestProcessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I would generally recommend to try all of the NHibernate&amp;#39;s CurrentSessionContext-derived class in order to use the one that suits better for the given context. In some projects I use the WcfOperationSessionContext for the service layer and the ThreadLocalSessionContext when running&amp;#0160;Job Schedulers.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Data-driven NHibernate with .NET 4.0 and the DynamicEntity Class</title>
    <link rel="alternate" href="/blog/2011/03/28/data-driven-nhibernate-with-net-4-dot-0-and-the-dynamicentity-class"/>
    <id>http://nikosbaxevanis.com/blog/2011/03/28/data-driven-nhibernate-with-net-4-dot-0-and-the-dynamicentity-class</id>
    <updated>2011-03-28T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;The idea for this post came by a very good friend who wanted to modify his data access layer (DAL) in order to use NHibernate.&lt;/p&gt;

&lt;p&gt;The DAL contains a base class that generates SQL queries and the application were it&amp;#39;s used is completely data-driven. There is no domain, no classes, and the behaviour&amp;#0160;is bound in various event handler methods. Changes to the database (columns, row data, etc) dictate how the application behaves.&lt;/p&gt;

&lt;p&gt;The problem that comes when trying to port this kind of DAL to use NHibernate is that we have to create POCOs in order to persist everything to the database. Since the application is data-driven we would end up using an &lt;a href="http://www.martinfowler.com/bliki/AnemicDomainModel.html" target="_blank" title="The Anemic Domain Model is a term used to describe the use of a software domain model where the business logic is implemented outside the domain objects."&gt;anemic&lt;/a&gt; domain model holding just the data to persist to the database and no behaviour&amp;#0160;at all.&lt;/p&gt;

&lt;p&gt;The solution for the problem is to use&amp;#0160;dictionaries as entities, a&amp;#0160;little-known feature of NHibernate which&amp;#0160;allows us to define our entities as dictionaries instead of statically typed&amp;#0160;objects.&lt;/p&gt;

&lt;p&gt;Here is how to define a mapping, (notice the&amp;#0160;entity-name instead of a class name):&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8506/8397466511_abfc4b24be_o.png" alt="The entity-name in mapping" /&gt;&lt;/p&gt;

&lt;p&gt;The only thing we have is the mapping, no classes. In order to create a Currency object we create the following dictionary:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;currency&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ISOCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GBP&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;EnglishName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;United Kingdom Pound&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ExchangeRateEURtoCurrency&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.87780&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ExchangeRateUpdatedOn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UtcNow&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IsEnabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Symbol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, the above code is cumbersome. But we can do something about it.&lt;/p&gt;

&lt;p&gt;Taking advantage of the .NET 4.0 and the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.aspx" target="_blank" title="Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly."&gt;DynamicObject&lt;/a&gt;&amp;#0160;Class, we can create a type deriving from the DynamicObject Class and&amp;#0160;specify dynamic behaviour&amp;#0160;at run time.&amp;#0160;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s name our class, DynamicEntity. It must be able to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accept a string in the .ctor specifying the entity name.&lt;/li&gt;
&lt;li&gt;Set properties (PropertyName = key, PropertyValue = value) on the internal dictionary.&lt;/li&gt;
&lt;li&gt;Get properties (similar to above)&amp;#0160;from the internal dictionary.&lt;/li&gt;
&lt;li&gt;Being able to expose the internal dictionary as property for NHibernate usage.&lt;/li&gt;
&lt;li&gt;Being able to expose it&amp;#39;s name as property for NHibernate usage.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the DynamicEntity class:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Dynamic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DynamicEntity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DynamicObject&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;
        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;entityName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DynamicEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;entityName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entityName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entityName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entityName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;TryGetMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;GetMemberBinder&lt;/span&gt; &lt;span class="n"&gt;binder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;TryGetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;TrySetMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;SetMemberBinder&lt;/span&gt; &lt;span class="n"&gt;binder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ContainsKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, here is an integration test in action:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;NHibernateShouldBeAbleToPersistCurrency&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;currency&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DynamicEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Currency&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ISOCode&lt;/span&gt;                   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GBP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnglishName&lt;/span&gt;               &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;United Kingdom Pound&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExchangeRateEURtoCurrency&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.87780&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExchangeRateUpdatedOn&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UtcNow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsEnabled&lt;/span&gt;                 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Symbol&lt;/span&gt;                    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginTransaction&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Commit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginTransaction&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;loadedCurrency&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Commit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loadedCurrency&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In the above test, for Session I use the ISession.GetSession(EntityMode.Map).&lt;/p&gt;

&lt;p&gt;Download the sample code &lt;a href="https://github.com/downloads/moodmosaic/BonusBits.CodeSamples/DynamicEntity_Complete.zip" target="_self"&gt;here&lt;/a&gt;. Updated versions will be available &lt;a href="https://github.com/moodmosaic/BonusBits.CodeSamples/tree/master/BonusBits.CodeSamples.NHibernate" target="_blank" title="BonusBits Blog source-code for NHibernate."&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Persistence specification testing combined with AutoFixture</title>
    <link rel="alternate" href="/blog/2011/03/13/persistence-specification-testing-combined-with-autofixture"/>
    <id>http://nikosbaxevanis.com/blog/2011/03/13/persistence-specification-testing-combined-with-autofixture</id>
    <updated>2011-03-13T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;When working with NHibernate you need to make sure that your mappings are correct. At least, you have to make sure that when you&amp;nbsp;save an item you can also qet that item back.&lt;/p&gt;

&lt;p&gt;If you are using FluentNHibernate you can use the &lt;a href="https://github.com/jagregory/fluent-nhibernate/tree/master/src/FluentNHibernate/Testing" target="_blank"&gt;PersistenceSpecification&amp;lt;T&amp;gt; class&lt;/a&gt;. However, the&amp;nbsp;PersistenceSpecification&amp;lt;T&amp;gt; class requires that you pass the property to check and also a value for that property.&lt;/p&gt;

&lt;p&gt;By using &lt;a title="AutoFixture makes it easier for developers to do Test-Driven Development by automating non-relevant Test Fixture Setup, allowing the Test Developer to focus on the essentials of each test case." href="http://autofixture.codeplex.com/" target="_blank"&gt;AutoFixture&lt;/a&gt; you can easily create objects that you can pass inside the CheckXx methods:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ShouldVerifyTheMappings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PersistenceSpecification&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EventType&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CheckProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EventTypeId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CheckProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EventTypeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CheckProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExchangeServerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CheckProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastUpdatedOn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CheckProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NextMarketId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CheckReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bookmaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateAnonymous&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Bookmaker&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;VerifyTheMappings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Combining&amp;nbsp;AutoFixture with the PersistenceSpecification&amp;lt;T&amp;gt; class results in&amp;nbsp;writing less code when testing NHibernate mappings, specially when dealing with complex types.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Unit Testing Events (The SpinWait.SpinUntil Method)</title>
    <link rel="alternate" href="/blog/2011/03/13/unit-testing-events-the-spinwait-dot-spinuntil-method"/>
    <id>http://nikosbaxevanis.com/blog/2011/03/13/unit-testing-events-the-spinwait-dot-spinuntil-method</id>
    <updated>2011-03-13T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;The&amp;nbsp;&lt;a title="Spins until the specified condition is satisfied." href="http://msdn.microsoft.com/en-us/library/system.threading.spinwait.spinuntil.aspx" target="_blank"&gt;SpinWait.SpinUntil&lt;/a&gt;&amp;nbsp;method spins until a specified condition is satisfied.&amp;nbsp;This&amp;nbsp;greatly improves the unit testing of events.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see first, how we test an event using hybrid thread synchronization constructs:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FooEvent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;raised&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ManualResetEventSlim&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ManualResetEventSlim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;QueueUserWorkItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;delegate&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EventHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FooEventArgs&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;raised&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nf"&gt;RaiseFoo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raised&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here is how the above test looks like when using&amp;nbsp;the SpinWait.SpinUntil&amp;nbsp;method:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[Fact]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FooEvent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;raised&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;QueueUserWorkItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;delegate&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EventHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FooEventArgs&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;raised&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nf"&gt;RaiseFoo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SpinWait&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SpinUntil&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;raised&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raised&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The above tests are exactly the same. The one with the SpinWait.SpinUntil method is easier to read and it also requires less code. Pretty cool.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Creating Test Fixtures easily with AutoFixture</title>
    <link rel="alternate" href="/blog/2011/02/22/creating-test-fixtures-easily-with-autofixture"/>
    <id>http://nikosbaxevanis.com/blog/2011/02/22/creating-test-fixtures-easily-with-autofixture</id>
    <updated>2011-02-22T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;When doing TDD there are many times that we use an &lt;a href="http://martinfowler.com/bliki/ObjectMother.html" target="_blank" title="An object mother is a kind of class used in testing to help create example objects that you use for testing."&gt;ObjectMother&lt;/a&gt;&amp;#0160;class for test fixtures.&amp;#0160;In large domains, writing such classes can become tedious work. If we want random data things get even more complicated.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://autofixture.codeplex.com/" target="_blank" title="AutoFixture makes it easier for developers to do Test-Driven Development by automating non-relevant Test Fixture Setup, allowing the Test Developer to focus on the essentials of each test case."&gt;AutoFixture&lt;/a&gt; is a library written by&amp;#0160;&lt;a href="http://blog.ploeh.dk/default.aspx" target="_blank" title="Mark Seemann&amp;#39;s .NET blog"&gt;Mark Seemann&lt;/a&gt; and can&amp;#0160;automate test fixture creation thereby saving time and making tests cleaner, faster, flexible and customizable.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8052/8397466545_578ec5d2b7_o.png" alt="Unit Testing a class which contains an interface" style="display: block;" /&gt;&lt;/p&gt;

&lt;p&gt;Here I setup Moq to return a sequence of&amp;#0160;&lt;span style="color: #2b91af; font-family: monospace; font-size: 13px;"&gt;EventItem&amp;#0160;&lt;/span&gt;objects when I call the FindAll method. In the Setup method I pass a delegate where I use AutoFixture to create the sequence.&amp;#0160;What I&amp;#0160;&lt;span style="text-decoration: underline;"&gt;really like&lt;/span&gt;&amp;#0160;here is that even though the&amp;#0160;&lt;span style="color: #2b91af; font-family: monospace; font-size: 13px;"&gt;EventItem&lt;/span&gt;&amp;#0160;contains interfaces AutoFixture can successfully create the sequence.&lt;/p&gt;

&lt;p&gt;This is made possible by calling the Customize method and passing an instance of the&amp;#0160;&lt;span style="color: #2b91af; font-family: monospace; font-size: 13px;"&gt;AutoMoqCustomization&amp;#0160;&lt;/span&gt;type. This way we instruct AutoFixture to become an &lt;a href="http://blog.ploeh.dk/2010/08/19/AutoFixtureAsAnAutomockingContainer.aspx" target="_blank" title="AutoFixture as an auto-mocking container."&gt;auto-mocking container&lt;/a&gt;&amp;#0160;and mock the interface types.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8087/8397466531_9ab4150533_o.png" alt="One of the class properties which is an interface" /&gt;&lt;/p&gt;

&lt;p&gt;AutoFixture includes an assembly called Ploeh.AutoFixture.AutoMoq that uses Moq (which in turn Moq uses Castle DynamicProxy to&amp;#0160;generate proxies on the fly at runtime).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is also&amp;#0160;Ploeh.AutoFixture.Xunit assembly for xUnit.net &lt;a href="http://blog.ploeh.dk/2010/10/08/AutoDataTheoriesWithAutoFixture.aspx" target="_blank" title="AutoData Theories with AutoFixture"&gt;data theories&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All this stuff is amazing, and I would like to mention that the source code is perfectly written, contains a lot of patterns and best practises (like the&amp;#0160;&lt;a href="http://www.natpryce.com/articles/000714.html" target="_blank" title="Test Data Builders: an alternative to the Object Mother pattern"&gt;Test Data Builder&lt;/a&gt; pattern). I am very happy with it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Parameterized Tests with xUnit.net</title>
    <link rel="alternate" href="/blog/2011/02/17/parameterized-tests-with-xunit-dot-net"/>
    <id>http://nikosbaxevanis.com/blog/2011/02/17/parameterized-tests-with-xunit-dot-net</id>
    <updated>2011-02-17T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Sometimes you have several unit-tests implementing the same test algorithm. These tests are exactly the same, having only different data.&lt;/p&gt;

&lt;p&gt;With &lt;a href="http://research.microsoft.com/en-us/projects/pex/" target="_blank" title="Pex enables a new development experience in Visual Studio Team System, taking test-driven development to the next level."&gt;Pex&lt;/a&gt;&amp;#0160;you can cover your code with&amp;#0160;parameterized tests (there is also a tutorial&amp;#0160;&lt;a href="http://www.springerlink.com/content/f270xp230131pr93/" target="_blank" title="Parameterized Unit Testing with Pex (Tutorial)"&gt;here&lt;/a&gt;).&amp;#0160;However, you can also do it with&amp;#0160;&lt;a href="http://xunit.codeplex.com/" target="_blank" title="xUnit.net is a unit testing tool for the .NET Framework."&gt;xUnit.net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add a reference to xunit.extensions.dll and decorate any parameterized test methods with&amp;#0160;&lt;span style="font-family: monospace; font-size: 13px;"&gt;[&lt;span style="color: #2b91af;"&gt;Theory&lt;/span&gt;&lt;span style="color: black;"&gt;]&amp;#0160;&lt;/span&gt;&lt;/span&gt;attribute (instead of&amp;#0160;&lt;span style="font-family: monospace; font-size: 13px;"&gt;[&lt;span style="color: #2b91af;"&gt;Fact&lt;/span&gt;&lt;span style="color: black;"&gt;]&lt;/span&gt;&lt;/span&gt;). Then decorate it with&amp;#0160;&lt;span style="font-family: monospace; font-size: 13px;"&gt;[&lt;span style="color: #2b91af;"&gt;InlineData&lt;/span&gt;&lt;span style="color: black;"&gt;]&lt;/span&gt;&lt;/span&gt;attribute if the data is coming from inlined values.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8048/8397465711_5ba90cb909_o.png" alt=""/&gt;&lt;/p&gt;

&lt;p&gt;There are also additional attributes (each one taking parameters so xUnit.net can successfully locate the test data):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PropertyDataAttribute&lt;/li&gt;
&lt;li&gt;ExcelDataAttribute&lt;/li&gt;
&lt;li&gt;SqlServerDataAttribute&lt;/li&gt;
&lt;li&gt;OleDbDataAttribute&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Choose the one that suits your needs.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Edit and Continue with TestDriven.Net</title>
    <link rel="alternate" href="/blog/2011/02/11/edit-and-continue-with-testdriven-dot-net"/>
    <id>http://nikosbaxevanis.com/blog/2011/02/11/edit-and-continue-with-testdriven-dot-net</id>
    <updated>2011-02-11T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;TestDriven.Net (2.0 RTM and greater) comes with a (hidden) test runner&amp;#0160;for &lt;a href="http://msdn.microsoft.com/en-us/library/x17d7wxw.aspx" target="_blank" title="With Edit and Continue for C#, you can make changes to your code in break mode while debugging. The changes can be applied without having to stop and restart the debugging session. In run mode, the source editor is read-only."&gt;Edit and Continue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To enabled it, edit the&amp;#0160;&lt;em&gt;TestDriven.dll.config&lt;/em&gt;&amp;#0160;file and uncomment the lines with:&amp;#0160;&lt;em&gt;&amp;lt;button command=&amp;ldquo;DebuggerEaC&amp;rdquo; /&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8466/8397466345_ee491826a5_o.png" alt=""/&gt;&lt;/p&gt;

&lt;p&gt;Below are the places in the .config file where the command can be found, so you may choose which one of those you wish to uncomment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project and Solution Context Menus/Item&lt;/li&gt;
&lt;li&gt;Project and Solution Context Menus/Folder&lt;/li&gt;
&lt;li&gt;Project and Solution Context Menus/Project&lt;/li&gt;
&lt;li&gt;Project and Solution Context Menus/Cross Project Multi Project&lt;/li&gt;
&lt;li&gt;Project and Solution Context Menus/Reference Item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you restart Visual Studio you will have an additional option in the context menu:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8514/8397466333_c3c9374b84_o.png" alt="Debugger (E&amp;amp;C) additional option is now available in the context menu"/&gt;&lt;/p&gt;

&lt;p&gt;This test runner may &amp;#39;touch&amp;#39; project files when used with source control (this is why it&amp;#39;s disabled by default).&amp;#0160;You can also can read about it &lt;a href="http://www.testdriven.net/ReleaseNotes.html" target="_blank" title="705: Add (hidden) support for &amp;#39;Test With... E&amp;amp;C&amp;#39;"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I Love My MacBook Pro</title>
    <link rel="alternate" href="/blog/2011/01/21/why-i-love-my-macbook-pro"/>
    <id>http://nikosbaxevanis.com/blog/2011/01/21/why-i-love-my-macbook-pro</id>
    <updated>2011-01-21T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8045/8397459235_3a3e2fa062_o.png" alt="Apple logo" /&gt;&lt;/p&gt;

&lt;p&gt;It is the perfect solution if you want to work out, for example at Starbucks.&amp;nbsp;I take a long break every time I need to charge the &lt;a title="Apple - MacBook Pro - Learn all about the breakthrough battery." href="http://www.apple.com/macbookpro/battery/" target="_blank"&gt;battery&lt;/a&gt;. This means that every ~4-6* hours I will get a an hour off for full refreshment. :-)&lt;/p&gt;

&lt;p&gt;* with Visual Studio, VirtualBox and about 25-30 open tabs in Chrome.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Code Coverage without NCover</title>
    <link rel="alternate" href="/blog/2011/01/21/code-coverage-without-ncover"/>
    <id>http://nikosbaxevanis.com/blog/2011/01/21/code-coverage-without-ncover</id>
    <updated>2011-01-21T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Let&amp;#39;s analyze code coverage in the&amp;#0160;&lt;a href="http://dynamicviewmodel.codeplex.com/" target="_blank" title="This project aims to provide a way to implement the Model View ViewModel (MVVM) architectural pattern using Plain Old CLR Objects (POCOs) while taking full advantage of .NET 4.0 DynamicObject Class."&gt;DynamicViewModel&lt;/a&gt;&amp;#0160;project.&lt;/p&gt;

&lt;p&gt;I currently work with Visual Studio 2010 Premium. This product comes with Code Coverage so I thought I should give it a try with, the&amp;#0160;unit testing tool I use,&amp;#0160;&lt;a href="http://xunit.codeplex.com/" target="_blank" title="xUnit.net is a unit testing tool for the .NET Framework."&gt;xUnit.net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First of all, if you do a lot of unit testing, I suggest using the&amp;#0160;&lt;a href="http://www.google.gr/url?sa=t&amp;amp;source=web&amp;amp;cd=2&amp;amp;ved=0CBoQFjAB&amp;amp;url=http%3A%2F%2Fwww.testdriven.net%2F&amp;amp;ei=I3A5TeO8Dczssgbw2bzzBg&amp;amp;usg=AFQjCNFFiRlQapOFMcbUcbKyl37SNWRygw&amp;amp;sig2=B37qeEgk0LSAevdmGq5z_A" target="_blank" title="http://www.testdriven.net/"&gt;TestDriven.Net&lt;/a&gt;&amp;#0160;add-in for Visual Studio because it is fully integrated with xUnit.net (and many other unit testing tools).&lt;/p&gt;

&lt;p&gt;Right-Click on the project under test, select Test With &amp;gt; Coverage:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8500/8398555174_7a12f17243_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The Code Coverage Results tab shows the % of Not Covered/Covered Blocks:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8353/8398555110_237199b896_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Using the object explorer we navigate to the methods that are not fully covered:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8376/8398555104_1ff09f326f_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Right-Click on any method &amp;gt; Go to source code. This will navigates us to the target method:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8497/8397466461_7af064d53c_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;In the target method we can now see the portion of the code that is not covered.&amp;#0160;&lt;/p&gt;

&lt;p&gt;Here we can see that there are no unit tests covering the case for invalid property names when binding in the view model:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8330/8397466403_e126a224be_o.png" alt="Code not covered by tests"/&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s add a unit test for that:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8188/8397466387_3fd667c4b5_o.png" alt=""/&gt;&lt;/p&gt;

&lt;p&gt;Again, Right-Click on the project under test, select Test With &amp;gt; Coverage:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8356/8397466379_3ddd680253_o.png" alt="Code is covered by tests"/&gt;&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it!&amp;#0160;Visual Studio 2010 Cove Coverage feature (on Premium and Ultimate products) plays nicely with TestDriven.Net and xUnit.net!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Replace C# primitive types with FCL types in Visual Studio</title>
    <link rel="alternate" href="/blog/2011/01/01/replace-c-number-primitive-types-with-fcl-types-in-visual-studio"/>
    <id>http://nikosbaxevanis.com/blog/2011/01/01/replace-c-number-primitive-types-with-fcl-types-in-visual-studio</id>
    <updated>2011-01-01T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;A nice Visual Studio macro, for those who prefer not to use the C# language primitive types and use the&amp;#0160;corresponding&amp;#0160;FCL types instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many people writing C# code prefer to use the FCL types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Int32&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As far as I know in Visual Studio there is no way to automate this process. It would be good if you could just select some code and just hide built-in type names. For that reason I wrote &lt;a href="https://github.com/moodmosaic/BonusBits.CodeSamples/tree/master/VSMacros" target="_self"&gt;this&lt;/a&gt; Visual Studio macro.&lt;/p&gt;

&lt;p&gt;Download here,&amp;#0160;&lt;a href="http://www.nikosbaxevanis.com/bonus-bits/downloads/BonusBits.vsmacros" target="_blank"&gt;right-click save as&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Sneak Preview of WebSocket-enabled WCF Services</title>
    <link rel="alternate" href="/blog/2010/12/25/a-sneak-preview-of-websocket-enabled-wcf-services"/>
    <id>http://nikosbaxevanis.com/blog/2010/12/25/a-sneak-preview-of-websocket-enabled-wcf-services</id>
    <updated>2010-12-25T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Recently the Interoperability Bridges and Labs Center (run by the Microsoft Interoperability Strategy Group) released a prototype&amp;#0160;&amp;#0160;implementation (in managed code) of two drafts of the WebSockets protocol specification:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75" target="_blank" title="The Web Socket protocol draft-hixie-thewebsocketprotocol-75"&gt;draft-hixie-thewebsocketprotocol-75&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76" target="_blank" title="The WebSocket protocol draft-hixie-thewebsocketprotocol-76."&gt;draft-hixie-thewebsocketprotocol-76&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The prototype can be found at&amp;#0160;&lt;a href="http://html5labs.interoperabilitybridges.com/" target="_blank" title="The HTML5 Labs site is the place where Microsoft prototypes early and unstable web standard specifications from standards bodies such as the W3C."&gt;HTML5 Labs&lt;/a&gt;, however (at the time of this&amp;#0160;writing) the samples did not come with source code and they were delay signed (which means you have to &lt;a href="http://mailinglist.interoperabilitybridges.com/scripts/wa-INTEROP.exe?A2=HTML5_WEBSOCKETS;e6d276d8.1012" target="_self"&gt;follow the instructions&lt;/a&gt;&amp;#0160;to run them).&amp;#0160;After running the samples (and since I had no access to the source code) I opened with reflector and had a look under the hood.&lt;/p&gt;

&lt;p&gt;What I noticed is that a WebSocket-enabled service in .NET will be written like any other WCF service with &lt;span style="text-decoration: underline;"&gt;two differences&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;The service implementation has to derive from the base WebSocketService class:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;ServiceBehavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;InstanceContextMode&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;InstanceContextMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PerSession&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;ConcurrencyMode&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ConcurrencyMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Multiple&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotificationService&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;WebSocketsService&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The service host is a type deriving from the &lt;a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.servicehost.aspx" target="_blank" title="Provides a host for services."&gt;ServiceHost&lt;/a&gt;&amp;#0160;named&amp;#0160;WebSocketsHost:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;Uri&lt;/span&gt; &lt;span class="n"&gt;baseAddress&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;uriString goes here&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;            
&lt;span class="n"&gt;WebSocketsHost&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NotificationService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WebSocketsHost&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NotificationService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;baseAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddWebSocketsEndpoint&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Notice, that since your specify &lt;a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.concurrencymode.aspx" target="_self" title="Specifies whether a service class supports single-threaded or multi-threaded modes of operation."&gt;ConcurrencyMode.Multipe&lt;/a&gt; you have to manually handle synchronization and state using a synchronization construct. That means if the clients need only write-access to the data you can use a mutual exclusive lock (like the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.monitor.aspx" target="_blank" title="Provides a mechanism that synchronizes access to objects."&gt;Monitor Class&lt;/a&gt;)&amp;#0160;otherwise you can use a lock like the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.readerwriterlockslim.aspx" target="_blank" title="Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing."&gt;ReaderWriterLockSlim Class&lt;/a&gt;&amp;#0160;(or a faster one).&lt;/p&gt;

&lt;p&gt;Here is a summary of links about the WebSocket prototype for .NET:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML5 Labs, &lt;a href="http://html5labs.interoperabilitybridges.com/prototypes/available-for-download/websockets" target="_blank" title="HTML5 Labs, WebSockets."&gt;WebSockets prototype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tomasz Janczuk&amp;#39;s,&amp;#0160;&lt;a href="http://blogs.msdn.com/b/interoperability/archive/2010/12/21/introducing-the-websockets-prototype.aspx" target="_blank" title="Introducing the WebSockets prototype draft-montenegro-hybi-upgrade-hello-handshake-00"&gt;Blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Interoperability @ Microsoft, &lt;a href="http://blogs.msdn.com/b/interoperability/archive/2010/12/21/introducing-the-websockets-prototype.aspx" target="_blank" title="Introducing the WebSockets Prototype."&gt;Blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=5962224" rel="tag" style="display: none;"&gt;CodeProject&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>MVVM using POCOs with .NET 4.0 and the DynamicViewModel Class</title>
    <link rel="alternate" href="/blog/2010/12/17/mvvm-using-pocos-with-net-4-dot-0-and-the-dynamicviewmodel-class"/>
    <id>http://nikosbaxevanis.com/blog/2010/12/17/mvvm-using-pocos-with-net-4-dot-0-and-the-dynamicviewmodel-class</id>
    <updated>2010-12-17T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;This post aims to provide a way to implement the Model View ViewModel (MVVM) architectural pattern using Plain Old CLR Objects (POCOs) while taking full advantage of .NET 4.0 DynamicObject Class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to apply the Model View ViewModel (MVVM) architectural pattern we need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An instance of the View, (e.g. a UserControl type).&lt;/li&gt;
&lt;li&gt;An instance of the ViewModel, which in most scenarios is a class implementing the INotifyPropertyChanged interface (or inherits from a base class getting the implementation for free).&lt;/li&gt;
&lt;li&gt;An instance of the Model inside the ViewModel class, for getting the properties to display (and format them if necessary) and also for invoking commands on the model.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While we can not avoid step 1 (we need to have something to display to the user) and step 3 (we need to have something the user can read/edit), for basic scenarios we can try to avoid step 2.&amp;#0160;&lt;/p&gt;

&lt;p&gt;Taking advantage of the .NET 4.0 and the &lt;a href="http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.aspx" target="_blank" title="Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly."&gt;DynamicObject&lt;/a&gt;&amp;#0160;Class, we can create a type deriving from the DynamicObject Class and&amp;#0160;specify dynamic behavior at run time. Furthermore, we can implement the &lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx" target="_blank" title="Notifies clients that a property value has changed."&gt;INotifyPropertyChanged&lt;/a&gt;&amp;#0160;Interface on the derived type making it a good candidate for Data Binding.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s name our class, DynamicViewModel(Of TModel) Class. It must be able to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accept references types (any class - a model is usually a class).&lt;/li&gt;
&lt;li&gt;Invoke public instance methods.&lt;/li&gt;
&lt;li&gt;Invoke public instance methods with arguments passed as CommandParameters.&lt;/li&gt;
&lt;li&gt;Get public instance properties.&lt;/li&gt;
&lt;li&gt;Set public instance properties.&lt;/li&gt;
&lt;li&gt;Notify callers when property change by raising the PropertyChanged event.&lt;/li&gt;
&lt;li&gt;If a property change results in chaning other properties, the caller must receive the notification for the other property changes too.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the &lt;a href="http://dynamicviewmodel.codeplex.com/SourceControl/changeset/view/9e2b2d03b705#DynamicViewModel%2fDynamicViewModel.cs" target="_blank" title="The DynamicViewModel(Of TModel) Class adds dynamic ViewModel behavior to any class at runtime."&gt;DynamicViewModel(Of TModel)&lt;/a&gt; Class:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.ComponentModel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Dynamic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Reflection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DynamicViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DynamicObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;INotifyPropertyChanged&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;TModel&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MethodInfo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;methodInfos&lt;/span&gt;
        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetPublicInstanceMethods&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PropertyInfo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;propInfos&lt;/span&gt;
        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetPublicInstanceProperties&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;TModel&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;propertyValues&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DynamicViewModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TModel&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nf"&gt;NotifyChangedProperties&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DynamicViewModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;@delegate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;@delegate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;TryInvokeMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InvokeMemberBinder&lt;/span&gt; &lt;span class="n"&gt;binder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;MethodInfo&lt;/span&gt; &lt;span class="n"&gt;methodInfo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;methodInfos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;TryGetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;methodInfo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;methodInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nf"&gt;NotifyChangedProperties&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;TryGetMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetMemberBinder&lt;/span&gt; &lt;span class="n"&gt;binder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;propertyValues&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interlocked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CompareExchange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;propertyValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;GetPropertyValues&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;propertyValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;TryGetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;TrySetMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SetMemberBinder&lt;/span&gt; &lt;span class="n"&gt;binder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PropertyInfo&lt;/span&gt; &lt;span class="n"&gt;propInfo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;propInfos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;binder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;propInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nf"&gt;NotifyChangedProperties&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;NotifyChangedProperties&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Interlocked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CompareExchange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;propertyValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;GetPropertyValues&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;IDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;previousPropValues&lt;/span&gt;
            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;propertyValues&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;IDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;currentPropValues&lt;/span&gt;
            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetPropertyValues&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;propertyValues&lt;/span&gt;
            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentPropValues&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KeyValuePair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;propValue&lt;/span&gt;
            &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;currentPropValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Except&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;previousPropValues&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;RaisePropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MethodInfo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetPublicInstanceMethods&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;methodInfoDictionary&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MethodInfo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;MethodInfo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;methodInfos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TModel&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;GetMethods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Public&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodInfo&lt;/span&gt; &lt;span class="n"&gt;methodInfo&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;methodInfos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methodInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;get_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt;
                &lt;span class="n"&gt;methodInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;set_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;methodInfoDictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methodInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methodInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;methodInfoDictionary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PropertyInfo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nf"&gt;GetPublicInstanceProperties&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;propInfoDictionary&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PropertyInfo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;PropertyInfo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;propInfos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TModel&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;GetProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Public&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PropertyInfo&lt;/span&gt; &lt;span class="n"&gt;propInfo&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;propInfos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;propInfoDictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;propInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;propInfoDictionary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetPropertyValues&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bindingPaths&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;PropertyInfo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;propInfos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TModel&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;GetProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Public&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PropertyInfo&lt;/span&gt; &lt;span class="n"&gt;propInfo&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;propInfos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;bindingPaths&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;propInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;propInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bindingPaths&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RaisePropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;OnPropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PropertyChangedEventArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnPropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PropertyChangedEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PropertyChangedEventHandler&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;Interlocked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CompareExchange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;PropertyChanged&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;PropertyChangedEventHandler&lt;/span&gt; &lt;span class="n"&gt;PropertyChanged&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The sample application for this post comes with a simple ContactView which has no specific viewModel but instead uses the DynamicViewModel(Of TModel) class.&lt;/p&gt;

&lt;p&gt;The DynamicViewModel(Of TModel) Class is able to update the View which binds to an instance of this class.&lt;/p&gt;

&lt;p&gt;Here is what the sample application does:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Changing the First Name will result in changing the Full Name and the Reversed Full Name.&lt;/li&gt;
&lt;li&gt;The same rules apply when chaning the Last Name.&amp;#0160;&lt;/li&gt;
&lt;li&gt;The&amp;#0160;hyper-link is enabled only if the user presses the Clear Names button.&amp;#0160;&lt;/li&gt;
&lt;li&gt;The Clear Names button is enabled only when the Full Name text is not empty.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the POCO model class that I have used:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContactDetails&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;set&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nf"&gt;SetFullName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nf"&gt;SetReversedFullName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;set&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nf"&gt;SetFullName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nf"&gt;SetReversedFullName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;set&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ClearFullName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;LastName&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// Navigates to this contact's website.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;uriString&amp;quot;&amp;gt;The URI string.&amp;lt;/param&amp;gt;
&lt;/span&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;NavigateTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;uriString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Diagnostics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uriString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetFullName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// (Less important members not shown)
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As you notice, this class &lt;em&gt;does not implement any interface or base class&lt;/em&gt;. In fact, this class can be used successfully in ORM scenarios too (when you need to bind on the same classes that are used in your mappings).&lt;/p&gt;

&lt;p&gt;Finally, I would like to show how the View&amp;#39;s DataContext is initialized properly to accept the DynamicViewModel(Of TModel) Class wrapper around the model class:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
/// Interaction logic for ContactView.xaml
/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContactView&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UserControl&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;RoutedCommand&lt;/span&gt; &lt;span class="n"&gt;ClearNamesCommand&lt;/span&gt;
        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RoutedCommand&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;RoutedCommand&lt;/span&gt; &lt;span class="n"&gt;NavigateUriCommand&lt;/span&gt;
        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RoutedCommand&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ContactView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;InitializeComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Create a new instance. Once created
&lt;/span&gt;        &lt;span class="c1"&gt;// do not call methods directly on this
&lt;/span&gt;        &lt;span class="c1"&gt;// object. (Use the dynamic viewModel).
&lt;/span&gt;        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ContactDetails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Nikos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;LastName&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Baxevanis&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="n"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;viewModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DynamicViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ContactDetails&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Wire the ClearNamesCommand from the view to the viewModel.
&lt;/span&gt;        &lt;span class="n"&gt;CommandManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RegisterClassCommandBinding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContactView&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CommandBinding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;ClearNamesCommand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ClearFullName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CanExecute&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                     &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

        &lt;span class="c1"&gt;// Wire the NavigateUriCommand from the view to the viewModel.
&lt;/span&gt;        &lt;span class="n"&gt;CommandManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RegisterClassCommandBinding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContactView&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CommandBinding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;NavigateUriCommand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NavigateTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CanExecute&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;                
                    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

        &lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Notice that wiring between the &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.input.icommand.aspx" target="_blank" title="Defines a command."&gt;ICommand&lt;/a&gt;&amp;#0160;Interface and the model class is done outside the dynamic ViewModel wrapper using the &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.input.commandmanager.aspx" target="_blank" title="Provides command related utility methods that register CommandBinding and InputBinding objects for class owners and commands, add and remove command event handlers, and provides services for querying the status of a command."&gt;CommandManager&lt;/a&gt;&amp;#0160;Class which acts as a &lt;a href="http://en.wikipedia.org/wiki/Mediator_pattern" target="_blank" title="Provides a unified interface to a set of interfaces in a subsystem."&gt;mediator&lt;/a&gt; between the View and the ViewModel. This give us the flexibility to define static reusable commands or specific commands for each view (as I&amp;#39;ve done above).&lt;/p&gt;

&lt;p&gt;The sample application can be found &lt;a href="http://dynamicviewmodel.codeplex.com/releases/view/57761" target="_blank" title="moodmosaic / DynamicViewModel"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ComponentBase(Of T) Class for NHibernate Components</title>
    <link rel="alternate" href="/blog/2010/12/10/componentbase-of-t-class-for-nhibernate-components"/>
    <id>http://nikosbaxevanis.com/blog/2010/12/10/componentbase-of-t-class-for-nhibernate-components</id>
    <updated>2010-12-10T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;This post aims to provide a way to implement a base class for NHibernate components also known as Value Objects in Domain-driven design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8494/8398555268_0491f387b3_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;In my &lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2010/12/component-collections-in-nhibernate.html" target="_blank" title="Component Collections in NHibernate."&gt;previous post&lt;/a&gt; I discussed about the case where you want to map a component with NHibernate and introduced the ComponentBase(Of T) class. However, to make it&amp;#0160;straightforward&amp;#0160;that you need to override Equals (you also need to override GetHashCode) in your derived classes, I modified the ComponentBase(Of T) class to implement the &lt;a href="http://msdn.microsoft.com/en-us/library/ms131187.aspx" target="_blank" title="Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances."&gt;IEquatable(Of T)&lt;/a&gt; interface.&amp;#0160;Furthermore, since NHibernate works only with reference types (that is, a class) I also constrained it to accept only reference types.&lt;/p&gt;

&lt;p&gt;Here is the Component(Of T) class:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ComponentBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IEquatable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; 
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// Indicates whether the current object is equal to another
&lt;/span&gt;    &lt;span class="c1"&gt;/// object of the same type.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;other&amp;quot;&amp;gt;An object to compare with this object.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/param&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;true if the current object is equal to the other
&lt;/span&gt;    &lt;span class="c1"&gt;/// parameter; otherwise, false.&amp;lt;/returns&amp;gt;
&lt;/span&gt;    &lt;span class="nc"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// Serves as a hash function for a particular type,
&lt;/span&gt;    &lt;span class="c1"&gt;/// suitable for use in hashing
&lt;/span&gt;    &lt;span class="c1"&gt;/// algorithms and data structures such as a hash table.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// A hash code for this instance of the type.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/returns&amp;gt;
&lt;/span&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;GetHashCodeForType&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// Determines whether the specified &amp;lt;see cref=&amp;quot;System.Object&amp;quot;/&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// is equal to this instance.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;obj&amp;quot;&amp;gt;The &amp;lt;see cref=&amp;quot;System.Object&amp;quot;/&amp;gt; to
&lt;/span&gt;    &lt;span class="c1"&gt;/// compare with this instance.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/param&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;///     &amp;lt;c&amp;gt;true&amp;lt;/c&amp;gt; if the specified &amp;lt;see cref=&amp;quot;System.Object&amp;quot;/&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;///     is equal to this instance;
&lt;/span&gt;    &lt;span class="c1"&gt;///     otherwise, &amp;lt;c&amp;gt;false&amp;lt;/c&amp;gt;.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/returns&amp;gt;
&lt;/span&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// The given object to compare to can't be null.
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// If objects are different types, they can't be equal.
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// Returns a hash code for this instance.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// A hash code for this instance, suitable for
&lt;/span&gt;    &lt;span class="c1"&gt;/// use in hashing algorithms and data structures
&lt;/span&gt;    &lt;span class="c1"&gt;/// like a hash table.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/returns&amp;gt;
&lt;/span&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;GetHashCodeForType&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Below are some test cases:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ComponentBaseTest&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockType&lt;/span&gt; 
         &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ComponentBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MockType&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TheSameInstanceHasTheSameHashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MockType&lt;/span&gt; &lt;span class="n"&gt;mt1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MockType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;MockType&lt;/span&gt; &lt;span class="n"&gt;mt2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mt1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mt1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;mt2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DiffInstancesWithSameCtorParamsHaveTheSameHashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MockType&lt;/span&gt; &lt;span class="n"&gt;mt1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MockType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;MockType&lt;/span&gt; &lt;span class="n"&gt;mt3&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MockType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mt1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;mt3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TestDiffInstancesWithSameCtorParamsAreEqual&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MockType&lt;/span&gt; &lt;span class="n"&gt;mt1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MockType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;MockType&lt;/span&gt; &lt;span class="n"&gt;mt3&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MockType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// Objects are equal.
&lt;/span&gt;        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mt1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mt3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="c1"&gt;// References are not equal.
&lt;/span&gt;        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;False&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReferenceEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mt1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mt3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TestDiffInstancesWithDiffCtorParamsAreNotEqual&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MockType&lt;/span&gt; &lt;span class="n"&gt;mt1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MockType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;MockType&lt;/span&gt; &lt;span class="n"&gt;mt3&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MockType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// Objects are not equal.
&lt;/span&gt;        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;False&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mt1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mt3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="c1"&gt;// References are not equal.
&lt;/span&gt;        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;False&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReferenceEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mt1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mt3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You can use this class in your component collections. If you want to map a Set (that is, an unordered collection of unique entities where duplicates are not allowed)&amp;#0160;just derive your component types from ComponentBase(Of T).&amp;#0160;Derived types need to implement the&amp;#0160;strongly-typed version of Equals and also the GetHashCode methods.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Component Collections in NHibernate</title>
    <link rel="alternate" href="/blog/2010/12/09/component-collections-in-nhibernate"/>
    <id>http://nikosbaxevanis.com/blog/2010/12/09/component-collections-in-nhibernate</id>
    <updated>2010-12-09T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&amp;#0160;In &lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2010/12/component-base-class-nhibernate.html" target="_blank" title="ComponentBase(Of T) Class for NHibernate Components."&gt;this post&lt;/a&gt; I discuss further about the ComponentBase(Of T) Class.&lt;/p&gt;

&lt;p&gt;Objects that are used to describe certain&amp;#0160;aspects of a domain, and which do not have identity, are named&amp;#0160;Value Objects (do not confuse them with .NET Value Types). Value Object is a term used in &lt;a href="http://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" title="omain-driven design (DDD) is an approach to developing software for complex needs by deeply connecting the implementation to an evolving model of the core business concepts."&gt;Domain-driven design&lt;/a&gt; (DDD). In NHibernate, such kind of objects are declared using the &lt;i&gt;component&lt;/i&gt; tag. However, &lt;span style="text-decoration: underline;"&gt;collections of components&lt;/span&gt; are declared with a &lt;i&gt;composite-element&lt;/i&gt; tag.&lt;/p&gt;

&lt;p&gt;Here is an example with &lt;a href="http://www.fluentnhibernate.org/" target="_blank"&gt;Fluent NHibernate&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="cm"&gt;/*
&amp;lt;set name=&amp;quot;MandatoryCoverages&amp;quot;
    table=&amp;quot;CarUseMandatoryCoverageFees&amp;quot; mutable=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;key&amp;gt;
    &amp;lt;column name=&amp;quot;CarUse_id&amp;quot; /&amp;gt;
&amp;lt;/key&amp;gt;
&amp;lt;composite-element class=&amp;quot;Domain.Car.CarCoverageFee, ..&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;NetFeePercentage&amp;quot; type=&amp;quot;System.Double, ..&amp;quot;&amp;gt;
    &amp;lt;column name=&amp;quot;NetFeePercentage&amp;quot; /&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;many-to-one class=&amp;quot;Domain.Car.CarCoverageFee,
                fetch=&amp;quot;join&amp;quot; name=&amp;quot;Coverage&amp;quot;&amp;gt;
    &amp;lt;column name=&amp;quot;Coverage_id&amp;quot; /&amp;gt;
    &amp;lt;/many-to-one&amp;gt;
&amp;lt;/composite-element&amp;gt;
&amp;lt;/set&amp;gt;
*/&lt;/span&gt;
&lt;span class="n"&gt;HasMany&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CarCoverageFee&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MandatoryCoverages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AsSet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CarUseMandatoryCoverageFees&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fee&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;References&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Coverage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Coverage&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Fetch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;fee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NetFeePercentage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="cm"&gt;/*
&amp;lt;set name=&amp;quot;OptionalCoverages&amp;quot;
    table=&amp;quot;CarUseOptionalCoverageFees&amp;quot; mutable=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;key&amp;gt;
    &amp;lt;column name=&amp;quot;CarUse_id&amp;quot; /&amp;gt;
&amp;lt;/key&amp;gt;
&amp;lt;composite-element class=&amp;quot;Domain.Car.CarCoverageFee, ..&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;NetFeePercentage&amp;quot; type=&amp;quot;System.Double, ..&amp;quot;&amp;gt;
    &amp;lt;column name=&amp;quot;NetFeePercentage&amp;quot; /&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;many-to-one class=&amp;quot;Domain.Car.CarCoverageFee,
                fetch=&amp;quot;join&amp;quot; name=&amp;quot;Coverage&amp;quot;&amp;gt;
    &amp;lt;column name=&amp;quot;Coverage_id&amp;quot; /&amp;gt;
    &amp;lt;/many-to-one&amp;gt;
&amp;lt;/composite-element&amp;gt;
&amp;lt;/set&amp;gt;
*/&lt;/span&gt;
&lt;span class="n"&gt;HasMany&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CarCoverageFee&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OptionalCoverages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AsSet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CarUseOptionalCoverageFees&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fee&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;References&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Coverage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Coverage&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Fetch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;fee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NetFeePercentage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The&amp;#0160;CarCoverageFee class is a component (a Value Object for DDD) so &lt;span style="text-decoration: underline;"&gt;it does not have an identity field&lt;/span&gt;.&amp;#0160;This creates a lot of noise between the application and the database as we can see from the image below:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8183/8397466663_aa3d5e1fca_b.jpg" alt="Profiler output, without overriding Equals and GetHashCode" /&gt;&lt;/p&gt;

&lt;p&gt;We can define an abstract base class for our components. Inside this class we override the Equals method and immediately throw an exception to the caller indicating that this method must be overridden by the caller:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ComponentBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// Determines whether the specified
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;see cref=&amp;quot;System.Object&amp;quot;/&amp;gt; is equal
&lt;/span&gt;    &lt;span class="c1"&gt;/// to this instance.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;obj&amp;quot;&amp;gt;The &amp;lt;see cref=&amp;quot;System.Object&amp;quot;/&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// to compare with this instance.&amp;lt;/param&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;///     &amp;lt;c&amp;gt;true&amp;lt;/c&amp;gt; if the specified
&lt;/span&gt;    &lt;span class="c1"&gt;///     &amp;lt;see cref=&amp;quot;System.Object&amp;quot;/&amp;gt; is equal to this
&lt;/span&gt;    &lt;span class="c1"&gt;///     instance; otherwise, &amp;lt;c&amp;gt;false&amp;lt;/c&amp;gt;.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/returns&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;exception cref=&amp;quot;T:System.NullReferenceException&amp;quot;&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// The &amp;lt;paramref name=&amp;quot;obj&amp;quot;/&amp;gt; parameter is null.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/exception&amp;gt;
&lt;/span&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MethodAccessException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Components must be compared using property values.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// Returns a hash code for this instance.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// A hash code for this instance, suitable for
&lt;/span&gt;    &lt;span class="c1"&gt;/// use in hashing algorithms and data structures
&lt;/span&gt;    &lt;span class="c1"&gt;/// like a hash table.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/returns&amp;gt;
&lt;/span&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MethodAccessException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Components must be hashed using property values.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here is the class, modified to inherit from the ComponentBase class:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CarCoverageFee&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ComponentBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// Gets or sets the coverage.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;value&amp;gt;The coverage.&amp;lt;/value&amp;gt;
&lt;/span&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Coverage&lt;/span&gt; &lt;span class="n"&gt;Coverage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// Gets or sets the fee.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;value&amp;gt;The fee.&amp;lt;/value&amp;gt;
&lt;/span&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;NetFeePercentage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// Determines whether the specified
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;see cref=&amp;quot;System.Object&amp;quot;/&amp;gt; is equal
&lt;/span&gt;    &lt;span class="c1"&gt;/// to this instance.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;obj&amp;quot;&amp;gt;The &amp;lt;see cref=&amp;quot;System.Object&amp;quot;/&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// to compare with this instance.&amp;lt;/param&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;///     &amp;lt;c&amp;gt;true&amp;lt;/c&amp;gt; if the specified
&lt;/span&gt;    &lt;span class="c1"&gt;///     &amp;lt;see cref=&amp;quot;System.Object&amp;quot;/&amp;gt; is equal to this
&lt;/span&gt;    &lt;span class="c1"&gt;///     instance; otherwise, &amp;lt;c&amp;gt;false&amp;lt;/c&amp;gt;.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/returns&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;exception cref=&amp;quot;T:System.NullReferenceException&amp;quot;&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// The &amp;lt;paramref name=&amp;quot;obj&amp;quot;/&amp;gt; parameter is null.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/exception&amp;gt;
&lt;/span&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// The given object to compare to can't be null.
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// If objects are different types, they can't be equal.
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// At this point, we really know that obj is really
&lt;/span&gt;        &lt;span class="c1"&gt;// a CarCoverageFee object. Cast obj to CarCoverageFee.
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Coverage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;CarCoverageFee&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Coverage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// Returns a hash code for this instance.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// A hash code for this instance, suitable for
&lt;/span&gt;    &lt;span class="c1"&gt;/// use in hashing algorithms and data structures
&lt;/span&gt;    &lt;span class="c1"&gt;/// like a hash table.
&lt;/span&gt;    &lt;span class="c1"&gt;/// &amp;lt;/returns&amp;gt;
&lt;/span&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Coverage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
             &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Coverage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;After overriding Equals and GetHashCode methods, I compared the Sessions:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8079/8398555276_1b307eb2dd_b.jpg" alt="The Diff after overriding Equals and GetHashCode" /&gt;&lt;/p&gt;

&lt;p&gt;Now, everything looks fine; No necessary inserts and deletes.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building a Metro UI with WPF</title>
    <link rel="alternate" href="/blog/2010/12/01/building-a-metro-ui-with-wpf"/>
    <id>http://nikosbaxevanis.com/blog/2010/12/01/building-a-metro-ui-with-wpf</id>
    <updated>2010-12-01T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8075/8397466987_1b6913aa26_o.png" alt="A very metro-ish image" /&gt;&lt;/p&gt;

&lt;p&gt;Have you ever used the &lt;a href="http://www.zune.net/" target="_blank" title="The Zune software organizes the media in its library and allows users to add to the library by ripping from CDs, syncing with a Zune device, and downloading from the Zune Marketplace. The Zune software also allows one to organize song metadata. It can automatically download album art and metadata tag data for content in the library."&gt;Zune&lt;/a&gt; software? I guess so, but I haven&amp;#39;t until version&amp;#0160;4.7.1404.0 came out. This version comes with significant changes:&amp;#0160;Windows Phone 7 support and integration with Windows Live Essentials 2011 among other.&lt;/p&gt;

&lt;p&gt;When I first run the software I got amazed by the user interface (UI). I told to myself, &amp;ldquo;this must not be WPF, no way!&amp;rdquo;. The text was so clear and the UI was so responsive. I also looked in &lt;a href="http://en.wikipedia.org/wiki/Zune#Zune_software" target="_blank" title="Zune software History"&gt;Wikipedia&lt;/a&gt; and read that the first versions of Zune software were released back in 2006. At this time WPF was about to be released with .NET 3.0 (release date was Nov 2006).&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8091/8398555764_9d52a62608_o.png" alt="Zune" /&gt;&lt;/p&gt;

&lt;p&gt;Since the UI is not built with WPF then what kind of technology did the Zune team used? Could it be MFC or some other unmanaged UI? To find out, I&amp;#0160;launched the &lt;a href="http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx" target="_blank" title="Process Explorer, also known as procexp.exe, shows you information about which handles and DLLs processes have opened or loaded."&gt;Process Explorer&lt;/a&gt;&amp;#0160;utility and looked for the Zune executable. By default, .NET Processes are highlighted with yellow as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8368/8397467077_6cca0076df_o.png" alt="Zune process in Process Explorer" /&gt;&lt;/p&gt;

&lt;p&gt;Great, so Zune software is a managed application, or better, if it&amp;#39;s an unmanaged application at least it hosts the CLR in it&amp;#39;s process. (Any Windows application can host the CLR). A quick look in the installation directory yield the following output:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8508/8398555562_ee8f743d37_o.png" alt="Zune assemblies" /&gt;&lt;/p&gt;

&lt;p&gt;Followed by a quick view with Reflector:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8331/8398555552_8b74a6d427_o.png" alt="Zune UIX assembly in Reflector" /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the root namespace is &lt;em&gt;Microsoft.Iris&lt;/em&gt;. A quick search returned this blog&amp;#0160;&lt;a href="http://www.istartedsomething.com/20071116/microsoft-iris-uix-framework-zune/" target="_blank" title="Mysterious Microsoft Iris UI Framework “UIX” behind the new Zune software eye-candy."&gt;post&lt;/a&gt;&amp;#0160;and&amp;#0160;this &lt;a href="http://www.withinwindows.com/2010/03/17/what-the-heck-is-microsoft-iris-here-are-my-notes-thus-far/" target="_blank" title="What is Microsoft Iris? Here are my notes thus far."&gt;one&lt;/a&gt;. It looks like some kind of WPF&amp;#0160;ancestor combined with &lt;a href="http://msdn.microsoft.com/en-us/library/bb189388.aspx" target="_blank" title="Media Center Markup Language Reference"&gt;MCML&lt;/a&gt;.&amp;#0160;&lt;/p&gt;

&lt;p&gt;Is it possible to build a similar UI with WPF?&lt;/p&gt;

&lt;p&gt;The first difficulties came when setting the &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.windowstyle.aspx" target="_blank" title="WindowStyle Enumeration"&gt;WindowStyle&lt;/a&gt;&amp;#0160;enumeration to None. We need that because with this style only the client area is visible - the title bar and border are not shown.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8051/8397466915_dc8ae4c3ce_o.png" alt="First attempt to create a Zune style window" /&gt;&lt;/p&gt;

&lt;p&gt;The image above is not what we want. We need to hide the window boundaries. This can be done by setting the &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.resizemode.aspx" target="_blank" title="Specifies whether a window can be resized and, if so, how it can be resized."&gt;ResizeMode&lt;/a&gt; enumeration to NoResize. But now, we can&amp;#39;t move the window, we can&amp;#39;t resize it and the mouse events are not raised! Here is a very nice blog &lt;a href="http://blogs.msdn.com/b/dwayneneed/archive/2008/09/08/transparent-windows-in-wpf.aspx" target="_blank" title="Transparent Windows in WPF"&gt;post&lt;/a&gt; discussing in very detail (among other) the reason for that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can we move the window?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By adding a Shape (ex. a &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.shapes.rectangle.aspx" target="_blank" title="Draws a rectangle."&gt;Rectangle&lt;/a&gt;) and registering on it&amp;#39;s&amp;#0160;PreviewMouseDown event:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="c1"&gt;// Is this a double-click?
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headerLastClicked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;doubleClick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Execute the code inside the event handler for the
&lt;/span&gt;    &lt;span class="c1"&gt;// restore button click passing null for the sender
&lt;/span&gt;    &lt;span class="c1"&gt;// and null for the event args.
&lt;/span&gt;    &lt;span class="nf"&gt;HandleRestoreClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headerLastClicked&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mouse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LeftButton&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MouseButtonState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pressed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;DragMove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;How can we resize the window?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By adding Shapes (ex.&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.shapes.rectangle.aspx" target="_blank" title="Draws a rectangle."&gt;Rectangles&lt;/a&gt;) one on each side of the window (left, top, right, bottom) and registering on it&amp;#39;s&amp;#0160;PreviewMouseDown event:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;Rectangle&lt;/span&gt; &lt;span class="n"&gt;clickedRectangle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clickedRectangle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;top&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cursors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SizeNS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nf"&gt;ResizeWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ResizeDirection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bottom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cursors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SizeNS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nf"&gt;ResizeWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ResizeDirection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bottom&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// ...
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here is the code for resizing the window. It uses the underlying &lt;a href="http://en.wikipedia.org/wiki/Windows_User" target="_blank" title="Windows USER is a component of the Microsoft Windows operating system that provides core functionality for building simple user interfaces. The component has existed in all versions of Windows, and includes functionality for window management, message passing, input processing and standard controls."&gt;Windows USER&lt;/a&gt; component.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
/// Resizes the window.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;direction&amp;quot;&amp;gt;The direction.&amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ResizeWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ResizeDirection&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NativeMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hwndSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WM_SYSCOMMAND&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="m"&gt;61440&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;[DllImport(&amp;quot;user32.dll&amp;quot;, CharSet = CharSet.Auto)]&lt;/span&gt;
&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="nf"&gt;SendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;hWnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UInt32&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;wParam&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;lParam&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;How can we add a drop shadow to the window?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the time of this&amp;#0160;writing, I know two ways of doing this:&lt;/p&gt;

&lt;p&gt;The first one (which is described &lt;a href="http://groups.google.com/group/wpf-disciples/browse_thread/thread/82d408e569e0b5f9" target="_blank" title="OS Composed DropShadows on WPF Windows with Custom Chrome Options."&gt;here&lt;/a&gt;) uses the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/aa969540(VS.85).aspx" target="_blank" title="The desktop composition feature, introduced in Windows Vista, fundamentally changed the way applications display pixels on the screen. When desktop composition is enabled, individual windows no longer draw directly to the screen or primary display device as they did in previous versions of Windows. Instead, their drawing is redirected to off-screen surfaces in video memory, which are then rendered into a desktop image and presented on the display."&gt;Desktop Window Manager&lt;/a&gt;&amp;#0160;(DWM)&amp;#0160;API. Specifically it uses the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/aa969524(VS.85).aspx" target="_blank" title="Sets the value of the specified attributes for non-client rendering to apply to the window."&gt;DwmSetWindowAttribute&lt;/a&gt; Function combined with the &amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/aa969512(VS.85).aspx" target="_blank" title="Extends the window frame behind the client area."&gt;DwmExtendFrameIntoClientArea &lt;/a&gt;Function to place a drop shadow around the window area. This method works by registering at the &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.window.sourceinitialized.aspx" target="_blank" title="This event is raised to support interoperation with Win32."&gt;SourceInitialized&lt;/a&gt; event. When this event is raised, it is a good place to call any code that can&amp;#0160;interoperate&amp;#0160;with the underlying Win32 window.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
/// Raises the &amp;lt;see cref=&amp;quot;FrameworkElement.Initialized&amp;quot;/&amp;gt; event.
/// This method is invoked whenever
/// &amp;lt;see cref=&amp;quot;P:FrameworkElement.IsInitialized&amp;quot;/&amp;gt;
/// is set to true internally.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;e&amp;quot;&amp;gt;The &amp;lt;see cref=&amp;quot;T:RoutedEventArgs&amp;quot;/&amp;gt;
/// that contains the event data.&amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnInitialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;AllowsTransparency&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ResizeMode&lt;/span&gt;            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ResizeMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoResize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Height&lt;/span&gt;                &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;480&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Width&lt;/span&gt;                 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;852&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="n"&gt;WindowStartupLocation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WindowStartupLocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CenterScreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;WindowStyle&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WindowStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;SourceInitialized&lt;/span&gt;    &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;HandleSourceInitialized&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OnInitialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
/// Handles the source initialized.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;sender&amp;quot;&amp;gt;The sender.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;e&amp;quot;&amp;gt;The &amp;lt;see cref=&amp;quot;System.EventArgs&amp;quot;/&amp;gt;
/// instance containing the event data.&amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HandleSourceInitialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hwndSource&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HwndSource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;PresentationSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromVisual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Returns the HwndSource object for the window
&lt;/span&gt;    &lt;span class="c1"&gt;// which presents WPF content in a Win32 window.
&lt;/span&gt;    &lt;span class="n"&gt;HwndSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromHwnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hwndSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;AddHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HwndSourceHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowProc&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// http://msdn.microsoft.com/en-us/library/aa969524(VS.85).aspx
&lt;/span&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;DWMWA_NCRENDERING_POLICY&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;NativeMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DwmSetWindowAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hwndSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;DWMWA_NCRENDERING_POLICY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;DWMWA_NCRENDERING_POLICY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// http://msdn.microsoft.com/en-us/library/aa969512(VS.85).aspx
&lt;/span&gt;    &lt;span class="n"&gt;NativeMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ShowShadowUnderWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hwndSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8212/8397466875_a3a92be9ed_o.png" alt="Metro window Without the drop shadow" /&gt;&lt;/p&gt;

&lt;p style="text-align: center;"&gt;&lt;em&gt;&lt;span style="font-size: 8pt;"&gt;Without the drop shadow&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8075/8398555504_6cf93d7b35_o.png" alt="Metro window with the drop shadow" /&gt;&lt;/p&gt;

&lt;p style="text-align: center;"&gt;&lt;em&gt;&lt;span style="font-size: 8pt;"&gt;With the drop shadow&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is a problem here though. If the user goes to System Properties, Performance Options and uncheck the &amp;ldquo;Show shadows under windows&amp;rdquo; checkbox, the shadow will not be visible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Zune software still keeps it&amp;#39;s drop shadow visible even if the &amp;ldquo;Show shadows under windows&amp;rdquo; checkbox is unchecked.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;How can this possibly be? &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, the Zune software does not use the DWM API to place drop shadows. Instead, it uses four external, transparent, windows on each size to create an illusion of a drop shadow. The drop shadow is actually &amp;ldquo;composed&amp;rdquo; by four transparent windows on each side.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8192/8398555496_21ef88e090_o.png" alt="The drop shadows as they are composed by four transparent windows on each side" /&gt;&lt;/p&gt;

&lt;p&gt;The second way, of placing the drop shadows, via external windows is the main reason for this post.
&lt;p&gt;Here is what I had to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a transparent window in code (and also set it&amp;#39;s background).&lt;/li&gt;
&lt;li&gt;Find the Main Window position on screen. Fortunately I could access the Left and Top properties and by it&amp;#39;s width and height I could calculate the window boundary.&lt;/li&gt;
&lt;li&gt;Calculate position for each external window.&lt;/li&gt;
&lt;li&gt;When moving the Main Window the external windows had to &amp;ldquo;glue&amp;rdquo; or better &amp;ldquo;dock&amp;rdquo; with the Main Window.&lt;/li&gt;
&lt;li&gt;When resizing the Main Window the external windows had to resize as well, according to the Main Window size.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;..Sounds like a lot of work to do for displaying a drop shadow that remains visible even if the user&amp;#0160;unchecks the &amp;ldquo;Show shadows under windows&amp;rdquo; checkbox!&lt;/p&gt;
&lt;p&gt;Creating the transparent window in code was easy:&lt;/p&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
/// Initializes the surrounding windows.
/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;InitializeSurrounds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Top.
&lt;/span&gt;    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndT&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;CreateTransparentWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Left.
&lt;/span&gt;    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndL&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;CreateTransparentWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Bottom.
&lt;/span&gt;    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndB&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;CreateTransparentWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Right.
&lt;/span&gt;    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndR&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;CreateTransparentWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nf"&gt;SetSurroundShadows&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
/// Creates an empty window.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt; &lt;span class="nf"&gt;CreateTransparentWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Window&lt;/span&gt; &lt;span class="n"&gt;wnd&lt;/span&gt;             &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;wnd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AllowsTransparency&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;wnd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShowInTaskbar&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;wnd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowStyle&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WindowStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;wnd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wnd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
/// Sets the artificial drop shadow.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;active&amp;quot;&amp;gt;if set to &amp;lt;c&amp;gt;true&amp;lt;/c&amp;gt; [active].&amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetSurroundShadows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;active&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;cornerRadius&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1.75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Images/ACTIVESHADOWTOP.PNG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Images/ACTIVESHADOWLEFT.PNG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cornerRadius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Images/ACTIVESHADOWBOTTOM.PNG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Images/ACTIVESHADOWRIGHT.PNG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cornerRadius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Images/INACTIVESHADOWTOP.PNG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Images/INACTIVESHADOWLEFT.PNG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Images/INACTIVESHADOWBOTTOM.PNG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Images/INACTIVESHADOWRIGHT.PNG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;[DebuggerStepThrough]&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Decorator&lt;/span&gt; &lt;span class="nf"&gt;GetDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;imageUri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Border&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Border&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CornerRadius&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CornerRadius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ImageBrush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;BitmapImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseUriHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetBaseUri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;imageUri&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Calculating the position, width and height for each external window was also not difficult:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
/// Raises the &amp;lt;see cref=&amp;quot;FrameworkElement.Initialized&amp;quot;/&amp;gt; event.
/// This method is invoked whenever
/// &amp;lt;see cref=&amp;quot;FrameworkElement.IsInitialized&amp;quot;/&amp;gt;
/// is set to true internally.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;e&amp;quot;&amp;gt;The &amp;lt;see cref=&amp;quot;T:RoutedEventArgs&amp;quot;/&amp;gt;
/// that contains the event data.&amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnInitialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...
&lt;/span&gt;
    &lt;span class="n"&gt;LocationChanged&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;HandleLocationChanged&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;SizeChanged&lt;/span&gt;     &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;HandleLocationChanged&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;StateChanged&lt;/span&gt;    &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;HandleWndStateChanged&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nf"&gt;InitializeSurrounds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;ShowSurrounds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OnInitialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
/// Handles the location changed.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;sender&amp;quot;&amp;gt;The sender.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;e&amp;quot;&amp;gt;The &amp;lt;see cref=&amp;quot;System.EventArgs&amp;quot;/&amp;gt;
/// instance containing the event data.&amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HandleLocationChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Left&lt;/span&gt;  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;edgeWndSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Top&lt;/span&gt;   &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Width&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;edgeWndSize&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;edgeWndSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Left&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;edgeWndSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Left&lt;/span&gt;  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;edgeWndSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Top&lt;/span&gt;   &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Width&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;edgeWndSize&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;edgeWndSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Left&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;edgeWndSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wndR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
/// Handles the windows state changed.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;sender&amp;quot;&amp;gt;The sender.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;e&amp;quot;&amp;gt;The &amp;lt;see cref=&amp;quot;System.EventArgs&amp;quot;/&amp;gt;
/// instance containing the event data.&amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HandleWndStateChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowState&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WindowState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;ShowSurrounds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;HideSurrounds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8225/8398555440_33b04b6bea_o.png" alt="The final result as composed by four transparent windows on each side" /&gt;&lt;/p&gt;

&lt;p&gt;I hope you find this post useful, there is a lot of information around but I think this post connects the pieces.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/moodmosaic/BonusBits.CodeSamples/tree/master/BonusBits.CodeSamples.MetroUI" target="_blank" title="BonusBits Blog source-code for Windows Presentation Foundation"&gt;solution&lt;/a&gt; contains two projects. The first one uses the 1st method for displaying the drop shadow. The second one uses the method described above.&lt;/p&gt;

&lt;p&gt;Due to popular demand, you can download the sample projects &lt;a href="https://github.com/downloads/moodmosaic/BonusBits.CodeSamples/MetroUI-1.zip" target="_blank" title="MetroUI Sample 1"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/downloads/moodmosaic/BonusBits.CodeSamples/MetroUI-2.zip" target="_blank" title="MetroUI Sample 2"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=5962224" rel="tag" style="display: none;"&gt;CodeProject&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>SingleInstance(Of T) Class for Windows Phone 7</title>
    <link rel="alternate" href="/blog/2010/11/20/singleinstance-of-t-class-for-windows-phone-7"/>
    <id>http://nikosbaxevanis.com/blog/2010/11/20/singleinstance-of-t-class-for-windows-phone-7</id>
    <updated>2010-11-20T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;When building applications for&amp;nbsp;a mobile operating system such as Windows Phone 7 (WP7) you might want (at times) to defer the creation of large objects, &amp;nbsp;specifically when this creation is going to increase memory consumption.&lt;/p&gt;

&lt;p&gt;While in the desktop CLR there is the &lt;a title="Provides support for lazy initialization." href="http://msdn.microsoft.com/en-us/library/dd642331.aspx" target="_blank"&gt;Lazy(Of T) Class&lt;/a&gt;, when working on WP7 this class does not exist (at least not at the time of this writing).&lt;/p&gt;

&lt;p&gt;I find it a very&amp;nbsp;repetitive task to manually produce a single instance object:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make it&amp;rsquo;s constructor private.&lt;/li&gt;
&lt;li&gt;Write the code for initialization.&lt;/li&gt;
&lt;li&gt;Provide a getter method that returns the one and only instance.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While you can not avoid step 2, it is possible to create a generic class that produces step 1 and step 3. Then, from the class constructor, you can pass the code that creates the object using a &lt;a title="Encapsulates a method that has no parameters and returns a value of the type specified by the TResult parameter." href="http://msdn.microsoft.com/en-us/library/bb534960.aspx" target="_blank"&gt;Func(TResult) Delegate&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SingleInstance(Of T) Class&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SingleInstance&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;  &lt;span class="n"&gt;lockObj&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;@delegate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isDelegateInvoked&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;@value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;SingleInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;SingleInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;@delegate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;@delegate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;@delegate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;Instance&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isDelegateInvoked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;@delegate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;Interlocked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CompareExchange&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;@value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;lockTaken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;try&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// WP7 does not support the overload with the
&lt;/span&gt;                    &lt;span class="c1"&gt;// Boolean indicating if the lock was taken.
&lt;/span&gt;                    &lt;span class="n"&gt;Monitor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lockObj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;lockTaken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isDelegateInvoked&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;finally&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lockTaken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Monitor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lockObj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;@value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The code inside the &amp;ldquo;T Instance&amp;rdquo; public property&amp;nbsp;uses interlocked constructs to&amp;nbsp;produce a single T object. It has been discussed in the book CLR via C#, 3rd Edition, Microsoft Press, page&amp;nbsp;846.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The SingleInstance(Of T) class has many differences from the &amp;nbsp;System.Lazy(Of T)&amp;nbsp;class in the desktop CLR.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The System.Lazy(Of T) class takes a&amp;nbsp;&lt;a title="Specifies how a System.Lazy(Of T) instance synchronizes access among multiple threads." href="http://msdn.microsoft.com/en-us/library/system.threading.lazythreadsafetymode.aspx" target="_self"&gt;LazyThreadSafetyMode&lt;/a&gt;&amp;nbsp;enumeration. This enumeration contains 3 members (None, PublicationOnly, ExecutionAndPublication). The SingleInstance(Of T) class uses the interlocked constructs to produce a single instance. This is similar with passing LazyThreadSafetyMode.ExecutionAndPublication in the System.Lazy(Of T) class.&lt;/li&gt;
&lt;li&gt;The System.Lazy(Of T) class works with classes (reference types) and structs (value types). The value types are boxed internally. The SingleInstance(Of T) class works only with reference types.&lt;/li&gt;
&lt;li&gt;Finally, the System.Lazy(Of T) class is written, tested and supported by Microsoft, while the SingleInstance(Of T) is not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that the SingleInstance(Of T)&amp;nbsp;class uses a&amp;nbsp;Func(TResult) Delegate.&amp;nbsp;There is a known performance hit when calling delegates compared to direct method calls. (See the Delegates section &lt;a title="Writing Faster Managed Code: Know What Things Cost by Jan Gray." href="http://msdn.microsoft.com/en-us/library/ms973852.aspx" target="_blank"&gt;here&lt;/a&gt;).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Going Asynchronous with Sterling for Windows Phone 7</title>
    <link rel="alternate" href="/blog/2010/11/13/going-asynchronous-with-sterling-for-windows-phone-7"/>
    <id>http://nikosbaxevanis.com/blog/2010/11/13/going-asynchronous-with-sterling-for-windows-phone-7</id>
    <updated>2010-11-13T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;In this post I discuss about the various programming models that can be used with Sterling Isolated Storage Database for Windows Phone 7. Further, I discuss how one can benefit from the Power Threading Library when using Sterling.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8376/8398554602_56f1f5bce8_o.png" alt="Extension methods for the ISterlingDatabaseInstance interface" /&gt;&lt;/p&gt;

&lt;p&gt;I have &lt;a href="http://www.nikosbaxevanis.com/bonus-bits/2010/11/testing-domain-driven-design-with-sterling-for-windows-phone-7.html" target="_blank" title="Testing Domain-Driven Design with Sterling for Windows Phone 7."&gt;already discussed&lt;/a&gt; about the basics of Sterling Isolated Storage Database (Sterling)&amp;#0160;when building application for Windows Phone 7 (WP7). At times you might want to do some operation on the background while your code executes something else.&lt;/p&gt;

&lt;p&gt;Sterling supports the&amp;#0160;Event-based Asynchronous Pattern (EAP) which means you can write the following code against the&amp;#0160;&lt;a href="http://sterling.codeplex.com/SourceControl/changeset/view/68865#1253296" target="_blank" title="Wintellect.Sterling.ISterlingDatabaseInstance"&gt;ISterlingDatabaseInstance&lt;/a&gt; interface:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ExecuteWithEventBased&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;IList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cargo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cargos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cargo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Cargo&lt;/span&gt; &lt;span class="n"&gt;cargo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CargoFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateNew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Glyfada&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Perachora&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cargos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cargo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaveAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cargo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;cargos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunWorkerCompleted&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;SetStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Event-based completed.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StatusState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ready&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RunWorkerAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I can imagine, the reason the EAP is implemented is because you can have progress notification while the I/O executes in the background and also for handling the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.aspx" target="_blank" title="Provides the basic functionality for propagating a synchronization context in various synchronization models."&gt;SynchronizationContext&lt;/a&gt;&amp;#0160;and/or the &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatcher.aspx" target="_blank" title="Provides services for managing the queue of work items for a thread."&gt;Dispatcher&lt;/a&gt;&amp;#0160;internally.&lt;/p&gt;

&lt;p&gt;In my applications, I prefer to use the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/magazine/cc163467.aspx" target="_blank" title="Implementing the CLR Asynchronous Programming Model by Jeffrey Richter."&gt;IAsyncResult&lt;/a&gt;, the CLR’s Asynchronous Programming Model (APM). For that reason, I wrote some extension methods for the ISterlingDatabaseInstance interface that allows you to use the APM when working with Sterling.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8324/8398554702_77b7df68b4_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Power Threading library comes with an implementation of the IAsyncResult interface, so one can take a method that executes synchronously and implement the APM. In the code above you can see the APM for the&amp;#0160;&lt;span style="font-family: Consolas; font-size: 13px;"&gt;&lt;span style="color: blue;"&gt;object&lt;/span&gt; Save&amp;lt;T&amp;gt;(T instance) &lt;span style="color: blue;"&gt;where&lt;/span&gt; T : &lt;span style="color: blue;"&gt;class&lt;/span&gt;, &lt;span style="color: blue;"&gt;new&lt;/span&gt;();&amp;#0160;&lt;/span&gt;method in ISterlingDatabaseInstance interface.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
/// Asynchronous version of ISterlingDatabaseInstance Save method (Begin part).
/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="n"&gt;BeginSave&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;ISterlingDatabaseInstance&lt;/span&gt; &lt;span class="n"&gt;sterling&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;AsyncCallback&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create IAsyncResult object identifying the asynchronous operation.
&lt;/span&gt;    &lt;span class="n"&gt;AsyncResult&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AsyncResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Use a thread pool thread to perform the operation.
&lt;/span&gt;    &lt;span class="n"&gt;ThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;QueueUserWorkItem&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;asyncResult&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AsyncResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Perform the operation.
&lt;/span&gt;            &lt;span class="n"&gt;sterling&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;asyncResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetAsCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// If operation fails, set the exception.
&lt;/span&gt;            &lt;span class="n"&gt;asyncResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetAsCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Return the IAsyncResult to the caller.
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;///&amp;lt;summary&amp;gt;
/// Asynchronous version of ISterlingDatabaseInstance Save method (End part).
/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;EndSave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;ISterlingDatabaseInstance&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="n"&gt;asyncResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;AsyncResult&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AsyncResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;asyncResult&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndInvoke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;AsyncResult class resides in the PowerThreading library. It is written by Jeffrey Richter and can be obtained from the&amp;#0160;&lt;a href="http://www.wintellect.com/" target="_blank" title="Wintellect is a nationally recognized consulting, training and debugging firm dedicated to helping companies build better software, faster through a concentration on .NET and Windows technologies."&gt;Wintellect&lt;/a&gt;&amp;#0160;website.&amp;#0160;&lt;/p&gt;
&lt;p&gt;Sterling Isolated Storage Database can be obtained from the &lt;a href="http://sterling.codeplex.com/" target="_blank" title="Sterling Isolated Storage Database with LINQ for Silverlight and Windows Phone 7."&gt;CodePlex&lt;/a&gt; website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Armed with the above extension method you can write the following code which combines the APM implementation with the &lt;a href="http://msdn.microsoft.com/en-gb/magazine/cc546608.aspx" target="_blank" title="Simplified APM With The AsyncEnumerator by Jeffrey Richter."&gt;AsyncEnumerator&lt;/a&gt; class.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="c1"&gt;// Inside your method create an instance of an AsyncEnumerator class,
// specifying the iterator method to be driven by the AsyncEnumerator.
&lt;/span&gt;&lt;span class="n"&gt;AsyncEnumerator&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AsyncEnumerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ExecuteWithAsyncEnumerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndExecute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;ExecuteWithAsyncEnumerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AsyncEnumerator&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Cargo&lt;/span&gt; &lt;span class="n"&gt;cargo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CargoFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateNew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Glyfada&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Perachora&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginSave&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cargo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;cargo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;End&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// AsyncEnumerator captures the calling thread's SynchronizationContext.
&lt;/span&gt;    &lt;span class="c1"&gt;// Set the SyncContext to null so that the callback continues
&lt;/span&gt;    &lt;span class="c1"&gt;// on a ThreadPool thread.
&lt;/span&gt;    &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SyncContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Int32&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndSave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DequeueAsyncResult&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// AsyncEnumerator captures the synchronization context.
&lt;/span&gt;    &lt;span class="nf"&gt;SetStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AsyncEnumerator completed.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StatusState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ready&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The sample Windows Phone 7 application can be found &lt;a href="https://github.com/moodmosaic/BonusBits.CodeSamples" target="_blank" title="BonusBits Blog source-code."&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Testing Domain-Driven Design with Sterling for Windows Phone 7</title>
    <link rel="alternate" href="/blog/2010/11/10/testing-domain-driven-design-with-sterling-for-windows-phone-7"/>
    <id>http://nikosbaxevanis.com/blog/2010/11/10/testing-domain-driven-design-with-sterling-for-windows-phone-7</id>
    <updated>2010-11-10T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8084/8397459857_48e3dfb8a6_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;When building applications targeting the Windows Phone 7 (WP7) you often need to create and maintain any kind of data. And while (for security reasons we all understand)&amp;#0160;you can&amp;#39;t access the local&amp;#0160;file system, you can benefit from the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/ff402541(VS.92).aspx" target="_blank" title="Isolated Storage Overview for Windows Phone."&gt;Isolated Storage&lt;/a&gt;. It&amp;#39;s API is similar with the one exposed in the Silverlight namespace.&amp;#0160;&lt;/p&gt;

&lt;p&gt;A good design of a&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Domain_model" target="_blank" title="A domain model, or Domain Object Model (DOM) in problem solving and software engineering can be thought of as a conceptual model of a domain of interest (often referred to as a problem domain) which describes the various entities, their attributes and relationships, plus the constraints that govern the integrity of the model elements comprising that problem domain."&gt;Domain model&lt;/a&gt;&amp;#0160;knows nothing about persistence. You can use an in-memory database, a relational database, or ..&lt;strong&gt;&amp;ldquo;&lt;strong&gt;an&amp;#0160;Object-Oriented Database&amp;#0160;for WP7 that works with Isolated Storage classes and&amp;#0160;supports full LINQ to Object queries over keys and indexes for fast retrieval of information from large data sets!&lt;/strong&gt;&amp;rdquo;&amp;#0160;&lt;/strong&gt;Enter&amp;#0160;&lt;a href="http://sterling.codeplex.com/" target="_blank" title="Sterling is a lightweight object-oriented database implementation for Silverlight and Windows Phone 7 that works with your existing class structures. Sterling supports full LINQ to Object queries over keys and indexes for fast retrieval of information from large data sets."&gt;Sterling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a sample repository implementation using Sterling to store and retrieve data:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SterlingRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;LoadById&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TKey&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;TKey&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;TKey&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;var&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TKey&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
                                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LazyValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ICollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FindAll&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TKey&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TKey&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
                                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LazyValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;In the sample application I use the domain&amp;#0160;model based on the cargo example used in&amp;#0160;&lt;a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1238687848&amp;amp;sr=8-1" target="_blank" title="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/"&gt;Eric Evans&amp;#39; book&lt;/a&gt;&amp;#0160;which can be found&amp;#0160;&lt;a href="http://dddsamplenet.codeplex.com/" target="_blank" title="A .NET implementation of Domain Driven Design (DDD) sample application based on Eric Evans&amp;#39; examples included in his great book. Project is intended to be used in training, demonstration and experiments."&gt;here&lt;/a&gt;.&amp;#0160;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;CargoRepository&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CargoRepository&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;SterlingRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cargo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;ICargoRepository&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cargo&lt;/span&gt; &lt;span class="n"&gt;cargo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cargo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Cargo&lt;/span&gt; &lt;span class="nf"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TrackingId&lt;/span&gt; &lt;span class="n"&gt;trackingId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;LoadById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trackingId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IdString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ICollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cargo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;FindAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FindAll&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;CargoFactory&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CargoFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Cargo&lt;/span&gt; &lt;span class="nf"&gt;CreateNew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Method implementation can be found in the sample application.
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Armed with the above classes you can create a Cargo, save it using the CargoRepository and load it. Sterling will save the whole object graph and when you load, it will &amp;#0160;defer the creation of the whole object using the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/dd642331.aspx" target="_blank" title="http://msdn.microsoft.com/en-us/library/dd642331.aspx"&gt;Lazy&amp;lt;T&amp;gt;&lt;/a&gt; class.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CargoPageViewModel&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PropertyChangedBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ICargoRepository&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;SterlingPageViewModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ICargoRepository&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;StoreAndFind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Cargo&lt;/span&gt; &lt;span class="n"&gt;cargo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CargoFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateNew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Glyfada&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Perachora&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cargo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Cargo&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cargo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrackingId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cargo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RouteSpecification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;saved&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RouteSpecification&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cargo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delivery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;saved&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delivery&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cargo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;saved&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Your domain model classes can be&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Plain_Old_CLR_Object" target="_blank" title="Plain Old CLR Object or POCO is a play on the term POJO, from the Java EE programming world, and is used by developers targeting the Common Language Runtime of the .NET Framework."&gt;POCOs&lt;/a&gt;. That is, you don&amp;#39;t have to inherit from anything in order to persist an instance of a type in the database. It just works!&lt;/p&gt;

&lt;p&gt;The documentation can be found &lt;a href="http://sterling.codeplex.com/documentation" target="_blank"&gt;here&lt;/a&gt;. The sample application can be found &lt;a href="https://github.com/moodmosaic/BonusBits.CodeSamples" target="_blank" title="BonusBits Blog source-code."&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using Reflection to Dynamically Invoke the NHibernate Profiler</title>
    <link rel="alternate" href="/blog/2010/11/03/using-reflection-to-dynamically-invoke-the-nhibernate-profiler"/>
    <id>http://nikosbaxevanis.com/blog/2010/11/03/using-reflection-to-dynamically-invoke-the-nhibernate-profiler</id>
    <updated>2010-11-03T00:00:00+02:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;If you are using NHibernate&amp;#0160;as your Object-relational mapping (ORM) solution, then chances are you are also using the &lt;a href="http://nhprof.com" target="_blank" title="NHibernate Profiler is a real-time visual debugger allowing a development team to gain valuable insight and perspective into their usage of NHibernate. The product is architected with input coming from many top industry leaders within the NHibernate community."&gt;NHibernate Profiler&lt;/a&gt;. You can see the exact SQL queries sent to the database and also detect&amp;#0160;&lt;a href="http://nhprof.com/Learn/Alerts" target="_blank" title="Alerts are presented in a concise code-review manner indicating patterns of misuse by your application."&gt;common pitfalls&lt;/a&gt;, among others.&lt;/p&gt;

&lt;p&gt;NHibernate Profiler&amp;#0160;is developed by Hibernating Rhinos and&amp;#0160;Blue Spire Consulting, Inc. The &lt;a href="http://nhprof.com/About" target="_blank" title="The NHibernate Profiler was developed by Hibernating Rhinos. The user interface was built by Blue Spire Consulting, Inc."&gt;main contributers&lt;/a&gt; behind this tool are Oren Eini (NHibernate, Castle Project, RavenDB), Christopher Bennage (Sams Teach Yourself WPF in 24 Hours) and Rob Eisenberg (Sams Teach Yourself WPF in 24 Hours, Caliburn, Caliburn Micro). As you can see, this tool is not only interesting for what it does, but it has also interesting people behind it.&lt;/p&gt;

&lt;p&gt;Using the NHibernate Profiler in your application is very easy:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Add a reference&lt;/strong&gt; to HibernatingRhinos.Profiler.Appender.dll assembly.&lt;/li&gt;
&lt;li&gt;Invoke the NHibernateProfiler.Initialize method from your code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The problem is, you (might) need to remove the referenced assembly&amp;#0160;every time you ship. Even if you decide to keep it, you need to invoke the Initialize method from your code inside a method marked with the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.conditionalattribute.aspx" target="_blank" title="Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined."&gt;ConditionalAttribute&lt;/a&gt;&amp;#0160;class so the compiler ignores it unless you are running in debug mode.&lt;/p&gt;

&lt;p&gt;You can avoid adding a reference (step 1), and invoke the Initialize method dynamically&amp;#0160;using reflection:&lt;/p&gt;

&lt;p&gt;1. In the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/aa903313(VS.71).aspx" target="_blank" title="Contains custom application settings. This is a predefined configuration section provided by the .NET Framework."&gt;&amp;lt;appSettings&amp;gt;&lt;/a&gt; element include the following keys:&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;appSettings&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NHibernate_ProfilerAssembly&amp;quot;&lt;/span&gt;
         &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HibernatingRhinos.Profiler.Appender.dll&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NHibernate_ProfilerDirectory&amp;quot;&lt;/span&gt;
         &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;your_path&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NHibernate_ProfilerMethod&amp;quot;&lt;/span&gt;
         &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Initialize&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NHibernate_ProfilerType&amp;quot;&lt;/span&gt;
         &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NHibernateProfiler&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;appSettings&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;2. For housekeeping you can define an interface.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;IIntegrateProfiler&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetNHibernateProfiler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;assembly&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;CanUseProfiler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ProfilerPath&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;3. Inside the&amp;#0160;your bootstrapper class, or the class where the&amp;#0160;&lt;a href="http://nhibernate.svn.sourceforge.net/viewvc/nhibernate/trunk/nhibernate/src/NHibernate/ISessionFactory.cs?revision=5259&amp;amp;view=markup" target="_blank" title="Usually an application has a single SessionFactory. Threads servicing client requests obtain ISession&amp;#39;s from the factory."&gt;ISessionFactory&lt;/a&gt;&amp;#0160;is built, implement the above interface.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p style="text-align: justify;"&gt;In the example below the ValidateDirectory and ValidateFileName methods are not included as well as the&amp;#0160;this.profilerPath &amp;#0160;private instance field.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetNHibernateProfiler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;assembly&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ValidateDirectory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;profilerPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assembly&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ValidateFileName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profilerPath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;profilerPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;profilerPath&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;profilerPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;CanUseProfiler&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;profilerPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ProfilerPath&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;profilerPath&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;4. Finally, from your code you can check whether the&amp;#0160;&lt;span style="font-family: Consolas; font-size: 13px;"&gt;CanUseProfiler&amp;#0160;&lt;/span&gt;property returns true and call the&amp;#0160;&lt;span style="font-family: Consolas; font-size: 13px;"&gt;InitializeProfiler&amp;#0160;&lt;/span&gt;method below:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;InitializeProfiler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Assembly&lt;/span&gt; &lt;span class="n"&gt;asm&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LoadFileLoadFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProfilerPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;profiler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetExportedTypes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ConfigurationManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppSettings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NHibernate_ProfilerType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profiler&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;MethodInfo&lt;/span&gt; &lt;span class="n"&gt;initialize&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;profiler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetMethods&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
           &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ConfigurationManager&lt;/span&gt;
             &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppSettings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NHibernate_ProfilerMethod&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p style="text-align: justify;"&gt;Actually, the same technique can be used for the other profilers too (&lt;a href="http://efprof.com/" target="_blank" title="Entity Framework Profiler is a real-time visual debugger allowing a development team to gain valuable insight and perspective into their usage of Entity Framework. The product is architected with input coming from many top industry leaders within the OR/M community."&gt;EFProf&lt;/a&gt;,&amp;#0160;&lt;a href="http://l2sprof.com/" target="_blank" title="Linq to Sql Profiler is a real-time visual debugger allowing a development team to gain valuable insight and perspective into their usage of Linq to Sql. The product is architected with input coming from many top industry leaders within the OR/M community."&gt;L2SProf&lt;/a&gt;, etc).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don&amp;#39;t forget to remove the&amp;#0160;referenced assembly from your project.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Task-based Asynchronous Pattern - Part 1 (The Basics)</title>
    <link rel="alternate" href="/blog/2010/10/31/the-task-based-asynchronous-pattern-part-1-the-basics"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/31/the-task-based-asynchronous-pattern-part-1-the-basics</id>
    <updated>2010-10-31T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;The future of asynchronous programming in C# adheres to&amp;#0160;a new language feature and a new framework pattern.&amp;#0160;&lt;/p&gt;
&lt;p&gt;Asynchronous&amp;#0160;programming will be similar to synchronous programming.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today hosting in the cloud has become popular. You’re paying for each virtual machine (VM) that is running so your service must scale or else you have to pay for another VM to handle the load.&amp;#0160;&amp;#0160;Both the classic APM and the EAP require you to split your code in a callback function so many people even chose to write their code synchronous.&amp;#0160;No matter if you call a web service or access a file on disk (that is,&amp;#0160;I/O-Bound Asynchronous Operations) or if you want to compute PI (a Periodic Compute-Bound Operation) your&amp;#0160;application has to be scalable and responsive.&amp;#0160;&amp;#0160; &amp;#0160;&lt;/p&gt;

&lt;p&gt;I have&amp;#0160;&lt;a href="http://nikosbaxevanis.com/categories/Windows_Phone/" target="_blank" title="Exposing asynchronous features to client code."&gt;already&amp;#0160;discussed&lt;/a&gt;&amp;#0160;about the two patterns that are available in the .NET Framework for&amp;#0160;asynchronous&amp;#0160;programming.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Callback-based&amp;#0160;Asynchronous Pattern&amp;#0160;(APM)&lt;/li&gt;
&lt;li&gt;Event-based&amp;#0160;Asynchronous Pattern (EAP) &amp;#0160; &amp;#0160;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like the APM because with a good IAsyncResult implementation in hand you can easily expose&amp;#0160;asynchronous&amp;#0160;features to all versions of the .NET Framework (1.0-today) and also target Microsoft&amp;#0160;Silverlight, Windows Phone 7, etc.&amp;#0160;&lt;/p&gt;

&lt;p&gt;To start, here is some code that executes&amp;#0160;synchronously:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FetchStockQuotesSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebService&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This blocks. You don't know when the FetchStockQuotes
&lt;/span&gt;    &lt;span class="c1"&gt;// method returns. It may takes from minutes, to hours or
&lt;/span&gt;    &lt;span class="c1"&gt;// it may not return at all.
&lt;/span&gt;    &lt;span class="n"&gt;IStockQuote&lt;/span&gt; &lt;span class="n"&gt;qt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FetchStockQuotes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Fortunately the WebService class implements the &lt;a href="http://msdn.microsoft.com/en-us/library/system.iasyncresult.aspx" target="_blank" title="Represents the status of an asynchronous operation."&gt;IAsyncResult&lt;/a&gt; interface, so the same code can be executed asynchronously:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FetchStockQuotesApm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebService&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This never blocks. Your code returns immediately.
&lt;/span&gt;    &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginFetchStockQuotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FetchStockQuotesApmCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FetchStockQuotesApmCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The operation completed asynchrnously.
&lt;/span&gt;    &lt;span class="n"&gt;WebService&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsyncState&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;IStockQuote&lt;/span&gt; &lt;span class="n"&gt;qt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndFetchStockQuotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Event if the WebService class does not implement the IAsyncResult interface, you can define a delegate and invoke it&amp;#0160;asynchronously,&amp;#0160;via BeginInvoke.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p style="text-align: justify;"&gt;The following code below is here just for the demo.&amp;#0160;There is a known performance hit when calling delegates compared to direct method calls. (See the Delegates section &lt;a href="http://msdn.microsoft.com/en-us/library/ms973852.aspx" target="_blank" title="Writing Faster Managed Code: Know What Things Cost by Jan Gray."&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FetchStockQuotesApm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebService&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This never blocks. Your code returns immediately.
&lt;/span&gt;    &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IStockQuote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;@delegate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FetchStockQuotes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;@delegate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginInvoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FetchStockQuotesApmCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;@delegate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FetchStockQuotesApmCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The operation completed asynchrnously.
&lt;/span&gt;    &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IStockQuote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;@delegate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IStockQuote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsyncState&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;IStockQuote&lt;/span&gt; &lt;span class="n"&gt;qt&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;@delegate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndInvoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p style="text-align: justify;"&gt;Unfortunately,&amp;#0160;it turns out that the APM does not look so sexy and most of the developers just don&amp;#39;t use it.&amp;#0160;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The future of asynchronous programming in C# adheres to a new framework pattern called the &lt;strong&gt;Task-based Asynchronous Pattern (TAP)&lt;/strong&gt;.
&lt;/p&gt;

&lt;p&gt;The new language features &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; and the TAP allow you to do this:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FetchStockQuotesAsyncCtp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebService&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;IStockQuote&lt;/span&gt; &lt;span class="n"&gt;qt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FetchStockQuotesTaskAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Well, this is exciting. &amp;#0160;The method is marked as async. This means that the method body is compiled specially, allowing parts of&amp;#0160;it to be turned into callbacks.&amp;#0160;The FetchStockQuotesTaskAsync method returns a Task&amp;lt;IStockQuote&amp;gt; by converting the BeginFetchStockQuotes/EndFetchStockQuotes methods into a task. Until the task completes, there is nothing to do but await for it.&lt;/p&gt;

&lt;p&gt;Here is how the&amp;#0160;FetchStockQuotesTaskAsync method is written:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IStockQuote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;FetchStockQuotesTaskAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IWebService&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IStockQuote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="n"&gt;Factory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginFetchStockQuotes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// BeginPart
&lt;/span&gt;        &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndFetchStockQuotes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;// EndPart
&lt;/span&gt;        &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                     &lt;span class="c1"&gt;// State, Options
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p style="text-align: justify;"&gt;FetchStockQuotesTaskAsync&amp;#0160;is an extension method, because adding this feature directly to the WebService class will break compatibility with previous versions of the .NET Framework (1.0, 1.1, 2.0). Also, if you don&amp;#39;t own the code of the WebService class you would define it as an extension method anyway.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It becomes very clear that in the near future it&amp;#39;s the programming language that will handle most of the asynchronous stuff and not the programmer. Currently, you can download and install the &lt;a href="http://go.microsoft.com/fwlink/?LinkId=203690" target="_blank" title="Download a CTP with new syntax and APIs for asynchronous development."&gt;Async CTP&lt;/a&gt;. For more information around the new features you can visit the official website&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/vstudio/async.aspx" target="_blank" title="Asynchronous Programming for C# and Visual Basic"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The sample application can be found &lt;a href="https://github.com/moodmosaic/BonusBits.CodeSamples" target="_blank" title="BonusBits Blog source-code."&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>An alternative (.NET 2.0) to the Task-based Asynchronous Pattern</title>
    <link rel="alternate" href="/blog/2010/10/31/an-alternative-dot-net-2-dot-0-to-the-task-based-asynchronous-pattern"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/31/an-alternative-dot-net-2-dot-0-to-the-task-based-asynchronous-pattern</id>
    <updated>2010-10-31T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Write code that looks like&amp;#0160;synchronous but actually executes&amp;#0160;asynchronously with the PowerThreading library and the AsyncEnumerator class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the &lt;a href="http://nikosbaxevanis.com/2010/10/31/the-task-based-asynchronous-pattern-part-1-the-basics/" target="_blank" title="The Task-based Asynchronous Pattern - Part 1 (The Basics)"&gt;previous post&lt;/a&gt; I discussed about the new language features that will help the developers write&amp;#0160;asynchronous&amp;#0160;code easily without having to split their flow in callback methods. In this post I want to show you an alternative way of doing this using the AsyncEnumerator class. This works for .NET 2.0+ and it is very similar with the upcoming features.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AsyncEnumerator class resides in the PowerThreading library. It is written by Jeffrey Richter and can be obtained from the&amp;#0160;&lt;a href="http://www.wintellect.com/" target="_blank" title="Wintellect is a nationally recognized consulting, training and debugging firm dedicated to helping companies build better software, faster through a concentration on .NET and Windows technologies."&gt;Wintellect&lt;/a&gt;&amp;#0160;website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will start, again, with some code that executes&amp;#0160;synchronously:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FetchStockQuotesSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebService&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This blocks. You don't know when the FetchStockQuotes
&lt;/span&gt;    &lt;span class="c1"&gt;// method returns. It may takes from minutes, to hours or
&lt;/span&gt;    &lt;span class="c1"&gt;// it may not return at all.
&lt;/span&gt;    &lt;span class="n"&gt;IStockQuote&lt;/span&gt; &lt;span class="n"&gt;qt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FetchStockQuotes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Fortunately the WebService class implements the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/system.iasyncresult.aspx" target="_blank" title="Represents the status of an asynchronous operation."&gt;IAsyncResult&lt;/a&gt;&amp;#0160;interface, so the same code can be executed asynchronously using the AsyncEnumerator class:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="c1"&gt;// Inside your method create an instance of an AsyncEnumerator class,
// specifying the iterator method to be driven by the AsyncEnumerator.
&lt;/span&gt;&lt;span class="n"&gt;AsyncEnumerator&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AsyncEnumerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;GetStockQuotesAsyncEnumerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndExecute&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetStockQuotesAsyncEnumerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;AsyncEnumerator&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebService&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginGetStockQuotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;End&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;IStockQuote&lt;/span&gt; &lt;span class="n"&gt;qt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndGetStockQuotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DequeueAsyncResult&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This technique is similar to the &lt;a href="http://msdn.microsoft.com/en-us/vstudio/async.aspx" target="_blank" title="Async CTP"&gt;new language features&lt;/a&gt; for asynchronous programming. In fact, what I&amp;#39;ve discussed works from .NET 2.0 up to any future version.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A very interesting&amp;#0160;topic regarding the AsyncEnumerator class and the Async CTP can be found at the PowerTheading &lt;a href="http://tech.groups.yahoo.com/group/PowerThreading/message/836" target="_blank" title="Where do you see AsyncEnumurator in regards to the Async CTP."&gt;discussion group&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Until the Async CTP is shipped you can benefit from what already exists. I have been using the AsyncEnumerator class for quite a long time and I am very happy with it. However, the Async CTP looks promising but it would be very interesting to see some performance measurements in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=5962224" rel="tag" style="display: none;"&gt;CodeProject&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The sample application can be found &lt;a href="https://github.com/moodmosaic/BonusBits.CodeSamples" target="_blank" title="BonusBits Blog source-code."&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A pragmatic approach on open source software</title>
    <link rel="alternate" href="/blog/2010/10/27/a-pragmatic-approach-on-open-source-software"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/27/a-pragmatic-approach-on-open-source-software</id>
    <updated>2010-10-27T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Using a product because you can view or modify the source code is not the point. It is like watching a movie that is split in 2 parts (or 2 disks) and you are in the beginning of the first one. Can you guess the ending yet? (Only if you are not watching it for the first time). Some people are&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Cinephilia" target="_blank" title="Cinephilia is the term used to refer to a passionate interest in cinema, film theory and film criticism. The term is a portmanteau of the words cinema and philia, one of the four ancient Greek words for love.[1] A person with a passionate interest in cinema is called a cinephile."&gt;cinephile&lt;/a&gt;&amp;#0160;and can really guess a lot still from the&amp;#0160;beginning. But such kind of people are not the majority.&lt;/p&gt;

&lt;p&gt;The same applies when building a product. You need to be an experienced architect in order to choose the right tools from the beginning, trying to look as far as possible in the future to prevent drawbacks and bottlenecks.&lt;/p&gt;

&lt;p&gt;There are really too many kinds of combinations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Those that don&amp;#39;t have a clue about open-source software, (period).&lt;/li&gt;
&lt;li&gt;Those that don&amp;#39;t have a clue about open-source software,&amp;#0160;but they are using it.&lt;/li&gt;
&lt;li&gt;Those that know what open-source software is, but don&amp;#39;t actually use it, maybe because they are retired, or whatever (I don&amp;#39;t want to be negative).&lt;/li&gt;
&lt;li&gt;Those that know what open-source software is, they use it, but they never modify it (the majority).&lt;/li&gt;
&lt;li&gt;Those that know what open-source software is, they use it, modify it, send patches (maybe they commit also).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the above, if I run a company (&lt;a href="http://en.wikipedia.org/wiki/Independent_software_vendor" target="_blank" title="Independent software vendor (ISV) is a business term for companies specializing in making or selling software, designed for mass marketing or for niche markets."&gt;ISV&lt;/a&gt;) or if I was a manager in a large organization doing&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Enterprise_software" target="_blank" title="Enterprise software, also known as enterprise application software (EAS), is software used in organizations, such as a business or government, as opposed to software chosen by individuals (for example, retail software)."&gt;enterprise software&lt;/a&gt;,&amp;#0160;I would only chose to work with people from the last 2 bullets. Do you know why? Well let me give you an example: &lt;em&gt;What components do you need for an enterprise software using .NET?&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AOP&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Data Access&lt;/li&gt;
&lt;li&gt;DI&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;Policy&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Validation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ask now a few which tools they would use for the above? You will get answers like &amp;ldquo;NHibernate for Data Access&amp;rdquo; and &amp;ldquo;Castle Windsor or StructureMap for DI&amp;rdquo;. These are the most popular not to say the de facto.&amp;#0160;So, why bother writing your own ORM since you can use NHibernate, why bother writing your own DI container since you can use an existing (and mature) one?&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s be pragmatic.&lt;/p&gt;

&lt;p&gt;Why we are getting paid? We are getting paid to deliver a responsive, scalable, working product. In order to achieve this we need to get&amp;#0160;equipped with the components mentioned above. Why not write our owns? Because (repeat) &amp;ldquo;we are getting paid to deliver a responsive, scalable, working product&amp;rdquo; we are not getting paid to build a specific reusable application block. But since we need to reuse as much code as possible we try to build around reusable application blocks.&amp;#0160;Why we are not using commercial (closed-source) products? Because if something fails in 02:00 AM we won&amp;#39;t have access to the source code? This is a false statement, in 02:00 AM even if you have access to the source, you have no brain to study it. Actually you may, even, need some time to to build from source and start debuggin.&amp;#0160;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wake up at 02:00 AM and try to workaround on what I have&amp;#0160;&lt;a href="http://nikosbaxevanis.com/2010/10/20/adventures-using-rhino-servicebus/" target="_blank" title="Adventures using Rhino ServiceBus"&gt;previously discussed&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;#39;s say though, you build the source, find the bug and fix it. Then what? You would send a patch and hope that it will be out with the next release. If not, then you need to maintain your local copy and keep it sync with the current public stable release.&amp;#0160;&lt;/p&gt;

&lt;p&gt;What happens if you don&amp;#39;t find the bug? Or don&amp;#39;t know how to fix it? Or you can&amp;#39;t get support in the forums? Do you know that there are companies out there selling commercial support for open-source software? Yes, you read it, commercial support for open-source software! What&amp;#39;s the difference with using a commercial product now?&amp;#0160;The difference is the community :-) It&amp;#39;s about the community of the open-source users, the culture, and knowledge sharing in forums, discussion groups and blogs. Yes, I buy this! But I don&amp;#39;t buy commercial support for an open-source product. If I had to chose this way, I would prefer to change career.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Knockout! MVVM with HTML + JavaScript</title>
    <link rel="alternate" href="/blog/2010/10/24/knockout-mvvm-with-html-plus-javascript"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/24/knockout-mvvm-with-html-plus-javascript</id>
    <updated>2010-10-24T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;ul&gt;
&lt;li&gt;Download notepad2.&lt;/li&gt;
&lt;li&gt;Unzip, Run.&lt;/li&gt;
&lt;li&gt;Copy-paste the markup below.&lt;/li&gt;
&lt;li&gt;Save.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight html"&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/html; charset=utf-8&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://knockoutjs.com/js/knockout-2.1.0.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        In this example, the two text boxes are bound to
        &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;observable&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; variables on a data model. The &amp;quot;full name&amp;quot;
        display is bound to a &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;dependent observable&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt;, whose value
        is computed in terms of the observables.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
        Live example&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
          First name:
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;data-bind=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value: firstName&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
          Last name:
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;data-bind=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value: lastName&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
          Hello, &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;data-bind=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text: fullName&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;viewModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ko&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="na"&gt;lastName&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ko&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;};&lt;/span&gt;
          &lt;span class="nx"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ko&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dependentObservable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="nx"&gt;ko&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyBindings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Don&amp;#39;t forget to visit the &lt;a href="http://knockoutjs.com/" title="Knockout is a JavaScript library that helps you to create rich, responsive display and editor user interfaces with a clean underlying data model. Any time you have sections of UI that update dynamically (e.g., changing depending on the user’s actions or when an external data source changes), KO can help you implement it more simply and maintainably." target="_blank"&gt;Knockout&lt;/a&gt; website.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hosting Agatha in a Managed Application</title>
    <link rel="alternate" href="/blog/2010/10/23/hosting-agatha-in-a-managed-application"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/23/hosting-agatha-in-a-managed-application</id>
    <updated>2010-10-23T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;When designing your &lt;a href="http://en.wikipedia.org/wiki/Enterprise_Service_Layer" target="_blank" title="The Enterprise Service Layer (ESL) is the highest level of abstraction in a SOA architecture."&gt;Service Layer&lt;/a&gt; you need to choose a communication mechanism according to your needs. Duplex, Fire and Forget, Reliable Sessions and &lt;a href="http://en.wikipedia.org/wiki/Request-response" target="_blank" title="Request-response, also known as request-reply, is a message exchange pattern in which a requestor sends a request message to a replier system which receives and processes the request, ultimately returning a message in response."&gt;Request Response&lt;/a&gt; are the most common messaging patterns.&lt;/p&gt;

&lt;p&gt;With Request-response, the client expects to receive a response for every message that&amp;#39;s been sent. You can design such a Service Layer using an &lt;a href="http://en.wikipedia.org/wiki/Enterprise_service_bus#ESB_architecture" target="_blank" title="In an enterprise architecture making use of an ESB, an application will communicate via the bus, which acts as a message broker between applications."&gt;ESB architecture&lt;/a&gt; if you need to connect different applications (even from different platforms). Though, if you need to write a typical client - back-end - database application you can choose not to go with an ESB (Rhino ServiceBus, NServiceBus) and use WCF.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When using NHibernate in an enterprise application the most common issue is how to automatically open and close a Session (per Request). With WCF you need to follow the steps described &lt;a href="http://igloocoder.com/archive/2008/07/21/nhibernate-on-wcf.aspx" target="_blank" title="NHibernate on WCF"&gt;here&lt;/a&gt;. Also&amp;#0160;for each of your services you need to expose an&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/aa480190.aspx#introt_topic2" target="_blank" title="The mnemonic &amp;quot;ABC&amp;quot; can be used to remember Address / Binding / Contract."&gt;ABC&lt;/a&gt;&amp;#0160;via app.config.&amp;#0160;On the other hand using Rhino ServiceBus and NServiceBus makes your life a lot easier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Davy Brion mentions &lt;a href="http://davybrion.com/blog/2009/07/why-i-dislike-classic-or-typical-wcf-usage/" target="_blank" title="Why I Dislike Classic Or Typical WCF Usage."&gt;here&lt;/a&gt;&amp;#0160;with more detail what I&amp;#39;ve discussed above and he provides the &lt;a href="http://code.google.com/p/agatha-rrsl/" target="_blank" title="agatha-rrsl - Implementation of the Request/Response Service Layer for .NET."&gt;Agatha&lt;/a&gt; project. With it, you define &lt;a href="http://code.google.com/p/agatha-rrsl/source/browse/trunk/Agatha.ServiceLayer/RequestHandler.cs" target="_blank" title="Agatha.ServiceLayer.RequestHandler"&gt;RequestHandlers&lt;/a&gt; (like &lt;a href="http://github.com/hibernating-rhinos/rhino-esb/blob/master/Rhino.ServiceBus/ConsumerOf.cs" target="_blank" title="Rhino.ServiceBus.ConsumerOf&amp;lt;T&amp;gt;"&gt;Consumers&lt;/a&gt; in the ESB world) and Agatha infrastructure will handle the rest. Everything is done with a single endpoint which makes you forget about app.config and ABCs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With Agatha NHibernate Session-per-Request is easy. You can use your favorite DI container and have a session provided through your handler&amp;#39;s constructor. You can even abstract the session by following the steps described &lt;a href="http://davybrion.com/blog/2009/12/using-nhibernate-in-your-service-layer/" target="_blank" title="Using NHibernate In Your Service Layer"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With Agatha, you can host your services easily on IIS or in a Console Application using &lt;a href="http://www.coretechnologies.com/products/AlwaysUp/" target="_blank" title="AlwaysUp runs your application (32/64-bit executable, batch file, shortcut, java, perl, etc.) as a Windows Service, managing and monitoring it constantly to ensure 100% uptime."&gt;AlwaysUp&lt;/a&gt;. If you choose the latter there are a few things to do inside your Main() method.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;  &lt;span class="n"&gt;baseAddress&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;uriString goes here&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ServiceHost&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ServiceHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WcfRequestProcessor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;baseAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Agatha's WcfRequestProcessor handles the requests.
// Your service is up. There is really nothing else to do here.
&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here I create an instance of the &lt;a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.servicehost.aspx" target="_blank" title="Provides a host for services."&gt;ServiceHost&lt;/a&gt; class, passing a &lt;a href="http://code.google.com/p/agatha-rrsl/source/browse/trunk/Agatha.ServiceLayer/WCF/WcfRequestProcessor.cs" target="_blank" title="Agatha.ServiceLayer.WCF.WcfRequestProcessor"&gt;WcfRequestProcessor&lt;/a&gt;&amp;#0160;type that represents the service type and the base address Uniform Resource Identifier (URI) to the ServiceHost.&lt;/p&gt;

&lt;p&gt;Here is the generic app.config that Agatha needs:&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serviceModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Agatha.ServiceLayer.WCF.WcfRequestProcessor&amp;quot;&lt;/span&gt;
               &lt;span class="n"&gt;behaviorConfiguration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RequestProcessorBehavior&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
                  &lt;span class="n"&gt;contract&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Agatha.Common.WCF.IWcfRequestProcessor&amp;quot;&lt;/span&gt;
                  &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="n"&gt;ding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;basicHttpBinding&amp;quot;&lt;/span&gt;
                  &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="n"&gt;dingConfiguration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RequestProcessorBinding&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="n"&gt;dings&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;basicHttpBinding&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="n"&gt;ding&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RequestProcessorBinding&amp;quot;&lt;/span&gt;
                 &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="n"&gt;ReceivedMessageSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2147483647&amp;quot;&lt;/span&gt;
                 &lt;span class="n"&gt;receiveTimeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;00:30:00&amp;quot;&lt;/span&gt;
                 &lt;span class="n"&gt;sendTimeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;00:30:00&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;readerQuotas&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="n"&gt;StringContentLength&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2147483647&amp;quot;&lt;/span&gt;
                        &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="n"&gt;ArrayLength&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2147483647&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;security&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;None&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="n"&gt;ding&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;basicHttpBinding&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="n"&gt;dings&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;behaviors&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;serviceBehaviors&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RequestProcessorBehavior&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;serviceMetadata&lt;/span&gt; &lt;span class="n"&gt;httpGetEnabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;serviceDebug&lt;/span&gt; &lt;span class="n"&gt;includeExceptionDetailInFaults&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dataContractSerializer&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="n"&gt;ItemsInObjectGraph&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2147483647&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;serviceThrottling&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="n"&gt;ConcurrentCalls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;500&amp;quot;&lt;/span&gt;
                             &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="n"&gt;ConcurrentInstances&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;500&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;behavior&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;serviceBehaviors&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;behaviors&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serviceModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;startup&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;supportedRuntime&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v4.0&amp;quot;&lt;/span&gt;
                      &lt;span class="n"&gt;sku&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.NETFramework,Version=v4.0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;startup&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;gcServer&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I included the&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/ms229357.aspx" target="_blank" title="Specifies whether the common language runtime runs server garbage collection."&gt;&amp;lt;gcServer&amp;gt;&lt;/a&gt;&amp;#0160;element to instruct CLR to use&amp;#0160;server garbage collection. Inside your Main() method you can include the code below:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{0} is {1}running with server GC.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetEntryAssembly&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;GetName&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;GCSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsServerGC&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;not &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I would really like to share how it looks in &lt;a href="http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx" target="_blank" title="Process Explorer by Mark Russinovich"&gt;Process Explorer&lt;/a&gt; when handling 6000 requests using Agatha.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8194/8397465885_bb9b3f236e_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p style="text-align: center;"&gt;&lt;strong&gt;&amp;#0160;&lt;/strong&gt;&lt;span style="font-size: small;"&gt;&lt;em&gt;Agatha 6000 request-response synchronous&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8366/8398554490_8d5c2ec5cd_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p style="text-align: center;"&gt;&lt;strong&gt;&amp;#0160;&lt;/strong&gt;&lt;span style="font-size: small;"&gt;&lt;em&gt;Agatha 6000 request-response asynchronous&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why in the&amp;#0160;asynchronous case&amp;#0160;the memory consumption is a little higher? Well, this is something expected. Every asynchronous call creates an &lt;a href="http://msdn.microsoft.com/en-us/library/system.iasyncresult.aspx" target="_blank" title="Represents the status of an asynchronous operation."&gt;IAsyncResult&lt;/a&gt; object. So even that the calls are non-blocking we have an overhead of 6000 IAsyncResult objects on the heap (yes, on the heap since they are not value types). Though, as you can see from the screenshot, when the GC &amp;#0160;kicks in the memory is reclaimed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well that&amp;#39;s it! Agatha works great, it&amp;#39;s great, I really like it. Goodbye to the existing (and conservative, and painful) WCF usage.&lt;/p&gt;

&lt;p&gt;The sample application can be found &lt;a href="https://github.com/moodmosaic/BonusBits.CodeSamples" target="_blank" title="BonusBits Blog source-code."&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Make sure you are running the application with elevated priviledges else a System.ServiceModel.AddressAccessDeniedException will be thrown indicating that your process does not have access rights to get registered at the base address were your service is hosted.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Adventures using Rhino ServiceBus</title>
    <link rel="alternate" href="/blog/2010/10/20/adventures-using-rhino-servicebus"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/20/adventures-using-rhino-servicebus</id>
    <updated>2010-10-20T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8513/8397467253_db8789c486_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Recently, with the team I work,&amp;#0160;we tried&amp;#0160;&lt;a href="http://hibernatingrhinos.com/open-source/rhino-service-bus" target="_blank" title="A developer friendly service bus for .NET"&gt;Rhino ServiceBus&lt;/a&gt;&amp;#0160;on a project. The fact that it has it&amp;#39;s own queuing subsystem&amp;#0160;&lt;a href="http://github.com/ayende/rhino-queues" target="_blank" title="An open source, Xcopy-deployed queuing subsystem."&gt;Rhino Queues&lt;/a&gt;&amp;#0160;(which requires no installation or administration) and it is integrated with the IoC container (we had already chosen for that project), Castle Windsor, made it a good candidate for spending some weeks trying it.&lt;/p&gt;

&lt;p&gt;While we were doing some sort of&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Stress_testing" target="_self" title="Stress testing is a form of testing that is used to determine the stability of a given system or entity."&gt;stress testing&lt;/a&gt;&amp;#0160;(about 6000 requests), we noticed that&amp;#0160;the memory was increasing (like it does in a memory leak situation).&amp;#0160;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8515/8397467157_129af3b874_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Since the behavior was unexpected, we spent some time on ways to workaround it, incl. reading the source code, building with the latest and greatest.&amp;#0160;&lt;span style="text-decoration: line-through;"&gt;My colleague,&lt;/span&gt; &lt;a href="http://open-voip.blogspot.com/" target="_blank" title="open-voip.blogspot.com is the single destination Blog for VOIP, IP Telephony, IPPBX, Open Souce voip, voip news and voip info based on voice over ip ..."&gt;G. Nikolaropoulos&lt;/a&gt;,&amp;#0160;started also a &lt;a href="http://groups.google.com/group/rhino-tools-dev/browse_thread/thread/df8ce259df2cdd04" target="_blank" title="Memory Consumption of rhino-esb"&gt;thread&lt;/a&gt;&amp;#0160;on the Rhino Tools Dev discussion group. We got feedback very fast:&amp;#0160;&lt;em&gt;the memory is held inside Rhino Queues, to avoid replying with the same message more than once&amp;#0160;in case of network loss. Every 3 minutes, Rhino Queues cleans the list up and memory is freed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We built a very basic sample application but we also tested the&amp;#0160;&lt;a href="http://github.com/ayende/alexandria" target="_blank" title="Sample netflix like application for books."&gt;article code&lt;/a&gt;&amp;#0160;that was&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/magazine/ff796225.aspx" target="_blank" title="Building Distributed Apps with NHibernate and Rhino Service Bus by Oren Eini."&gt;published&lt;/a&gt;&amp;#0160;on MSDN (there is also a&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/magazine/ff872394.aspx" target="_blank" title="Building Distributed Apps with NHibernate and Rhino Service Bus, Part 2 by Oren Eini"&gt;second part&lt;/a&gt;). The behavior was the same even after 3 minutes wait (not to say worse).&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8330/8398555766_539fc0df48_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We thought it should be fair to investigate even further and ask in person via E-mail. We got a reply fast, instructing that we should set the &lt;a href="http://en.wikipedia.org/wiki/Extensible_Storage_Engine" target="_blank" title="Extensible Storage Engine (ESE), also known as JET Blue, is an Indexed Sequential Access Method (ISAM) data storage technology from Microsoft."&gt;Extensible Storage Engine&lt;/a&gt; (ESE) CacheSizeMax parameter to 1024. Rhino Queues use ESE internally for message storage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the sample application which can be found on &lt;a href="https://github.com/moodmosaic/BonusBits.CodeSamples" target="_blank" title="BonusBits Blog source-code."&gt;here&lt;/a&gt;,&amp;#0160;I set the CacheSizeMax&amp;#0160;to 512.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But what exactly is the CacheSizeMax parameter?&lt;/p&gt;

&lt;p&gt;Well, Rhino Queues uses &amp;#0160;the &lt;a href="http://managedesent.codeplex.com/" target="_blank" title="ManagedEsent provides managed access to ESENT, the embeddable database engine native to Windows. ManagedEsent uses the esent.dll that is part of Microsoft Windows so there are no extra unmanaged binaries to download and install."&gt;ManagedEsent&lt;/a&gt; library which provides managed access to ESE. I opened the library with Reflector and searched for the CacheSizeMax which is declared &amp;#0160;inside the JET_param enum.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8491/8398555724_309f969cb5_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;Microsoft.Isam.Esent.Interop.JET_param, CacheSizeMax&lt;/span&gt;&amp;#0160;&lt;em&gt;This parameter configures the maximum size of the database page cache. The size is in database pages. If this parameter is left to its default value, then the maximum size of the cache will be set to the size of physical memory when JetInit is called.&amp;#0160;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8500/8398555748_e1575041cd_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Setting the Microsoft.Isam.Esent.Interop.SystemParameters.CacheSizeMax to 1024 or 512 seems to solve the problem with the increasing memory usage.&amp;#0160;The question is, if this call sets a global variable then it may have a negative impact to the rest applications using the ESE (ex. Microsoft Exchange).&lt;/p&gt;

&lt;p&gt;I decided to contact &lt;a href="http://blogs.msdn.com/b/laurionb/" target="_blank" title="ESE/ESENT Database Stuff"&gt;Laurion Burchall&lt;/a&gt;, a Software Engineer on the ESE/ESENTteam, with my question.&amp;#0160;The answer: &lt;em&gt;The setting is per-process so it won’t cause problems with other applications that use ESENT.&amp;#0160;By default ESENT will automatically manage the cache size so you shouldn’t need to worry. We look at the amount of free memory on the system, the amount of paging activity and the amount of database I/O when deciding on the cache size. Although the cache is growing you should find that the system isn’t paging and that if you start using memory in other applications ESENT will actually shrink its cache.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is very easy to use and deploy with Rhino ServiceBus.&amp;#0160;If you are planning to use it, I hope you find this&amp;#0160;information&amp;#0160;useful.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Exposing asynchronous features to client code for Windows Phone 7</title>
    <link rel="alternate" href="/blog/2010/10/17/exposing-asynchronous-features-to-client-code-for-windows-phone-7"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/17/exposing-asynchronous-features-to-client-code-for-windows-phone-7</id>
    <updated>2010-10-17T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Today, line of Internet and multimedia-enabled smartphones have become popular. Fortunately if you are a .NET developer&amp;#0160;you can use your existing skills and language and target some of the most popular &lt;a href="http://en.wikipedia.org/wiki/Mobile_operating_system" target="_blank" title="A mobile operating system, also known as a mobile OS, a mobile platform, or a handheld operating system, is the operating system that controls a mobile device."&gt;mobile operating systems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Windows Phone 7 is a mobile operating system developed by Microsoft, and is the successor to their Windows Mobile platform.&amp;#0160;&lt;/p&gt;

&lt;p&gt;You can expose asynchronous features to client code using one of the following .NET Framework&amp;#39;s&amp;#0160;Asynchronous&amp;#0160;Programming Models:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IAsyncResult &lt;em&gt;The CLR’s Asynchronous Programming Model (APM)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Event-based Asynchronous Pattern &lt;em&gt;(EAP)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IAsyncResult has been around since .NET 1.0 and has been used in most&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Base_Class_Library" target="_blank" title="The Base Class Library (BCL) is a standard library available to all languages using the .NET Framework."&gt;BCL&lt;/a&gt; classes, while the main benefit of the EAP is that it integrates with the Visual Studio UI designers.&amp;#0160;You can learn how to properly implement the IAsyncResult interface (APM) from the excellent article on MSDN, &lt;em&gt;&lt;a href="http://msdn.microsoft.com/en-us/magazine/cc163467.aspx" target="_self" title="Implementing the CLR Asynchronous Programming Model"&gt;Implementing the CLR Asynchronous Programming Model&lt;/a&gt;&lt;/em&gt;, by Jeffrey Richter.&lt;/p&gt;

&lt;p&gt;In this post I will show you how easy it to use types implementing the IAsyncResult interface on Windows Phone 7. I will use the PowerThreading library because it provides a similar (not to say an improved) implementation of the one described in the original MSDN article. I will explain how to use it and how this becomes easier using the AsyncEnumerator class.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AsyncEnumerator class resides in the PowerThreading library. It is written by Jeffrey Richter and can be obtained from the &lt;a href="http://www.wintellect.com/" target="_blank" title="Wintellect is a nationally recognized consulting, training and debugging firm dedicated to helping companies build better software, faster through a concentration on .NET and Windows technologies."&gt;Wintellect&lt;/a&gt; website.&lt;/p&gt;
&lt;p&gt;The sample Windows Phone 7 application can be found &lt;a href="https://github.com/moodmosaic/BonusBits.CodeSamples" target="_blank" title="BonusBits Blog source-code."&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8497/8397466171_850dc3a0c9_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sync I/O&amp;#0160;pauses the UI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8217/8398554750_01c3311321_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The code below shows how&amp;#0160;ExecuteWithSyncIO method is implemented. The application shows a MessageBox to the user that the UI will pause while the execution is in progress.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ExecuteWithSyncIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;webService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetStockQuotes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;SetStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sync/IO completed.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StatusState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ready&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Delegate&amp;#39;s BeginInvoke method is not supported&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8507/8397466099_216efe6f78_o.png" alt="" /&gt;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ExecuteWithDelegateBeginInvoke&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IStockQuote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stockQuoteDelegate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;webService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetStockQuotes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// NOTE: Calling delegates asynchronously is NOT supported in WP7.
&lt;/span&gt;    &lt;span class="n"&gt;stockQuoteDelegate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginInvoke&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;stockQuoteDelegate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndInvoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The code below shows how ExecuteWithDelegateBeginInvoke method is implemented. &lt;/p&gt;

&lt;p&gt;This method is here just for the demo, since it is not allowed to invoke a delegate asynchronously in the Compact Framework.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ExecuteWithDelegateBeginInvoke&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IStockQuote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stockQuoteDelegate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;webService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetStockQuotes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// NOTE: Calling delegates asynchronously is NOT supported in WP7.
&lt;/span&gt;    &lt;span class="n"&gt;stockQuoteDelegate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginInvoke&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;stockQuoteDelegate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndInvoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8085/8398554712_4190f00280_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IAsyncResult interface&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The code below shows how the ExecuteWithIAsyncResult method is implemented. The only problem is that, when using the IAsyncResult, you need to specify a method to be called when a corresponding asynchronous operation completes. This can result in using synchronization constructs to avoid race conditions. It also splits the flow of your code. You can inline the callback method using &lt;a href="http://msdn.microsoft.com/en-us/library/0yw3tz5k(VS.80).aspx" target="_blank" title="In versions of C# previous to 2.0, the only way to declare a delegate was to use named methods. C# 2.0 introduces anonymous methods."&gt;Anonymous Methods&lt;/a&gt; or&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/bb397687.aspx" target="_blank" title="In the C# programming language a lambda expression is an anonymous function that can contain expressions and statements."&gt;Lamda Expressions&lt;/a&gt; as shown below but if your logic is complicated your code will not be beautiful.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ExecuteWithIAsyncResult&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;SetStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Working..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StatusState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Busy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;webService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginGetStockQuotes&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Callback method inlined using Lamda Expressions.
&lt;/span&gt;
            &lt;span class="c1"&gt;// NOTE: Code can become ugly here, specially if you need to do 
&lt;/span&gt;            &lt;span class="c1"&gt;// a lot of stuff that touch properties bounded with UI elements.
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interlocked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numDone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OnUIThread&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;SetStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IAsyncResult APM completed.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;StatusState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ready&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;AsyncEnumerator class&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The code below shows how&amp;#0160;ExecuteWithAsyncEnumerator method is implemented. As you can see this method makes your code looks like it&amp;#39;s executing synchronously but actually it executes asynchronously. You do not have to split your code in callback methods or inlined delegates. You do not need to marshall calls in the UI thread using the Dispacher or the SynchronizationContext. All this stuff is handled by the AsyncEnumerator class.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;ExecuteWithAsyncEnumerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AsyncEnumerator&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;webService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BeginGetStockQuotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;End&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// AsyncEnumerator captures the calling thread's SynchronizationContext.
&lt;/span&gt;    &lt;span class="c1"&gt;// Set the Wintellect.Threading.AsyncProgModel.SynchronizationContext to
&lt;/span&gt;    &lt;span class="c1"&gt;// null so that the callback continues on a ThreadPool thread.
&lt;/span&gt;    &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SyncContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;webService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndGetStockQuotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DequeueAsyncResult&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// AsyncEnumerator captures the synchronization context.
&lt;/span&gt;    &lt;span class="nf"&gt;SetStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AsyncEnumerator completed.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StatusState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ready&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8092/8397466137_b21abe090c_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;While what I&amp;#39;ve discussed in this post applies to&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Mobile_application_development" target="_blank" title="Mobile application development is the process by which applications are developed for small low-power handheld devices such as personal digital assistants, enterprise digital assistants or mobile phones."&gt;Mobile application development&lt;/a&gt;, the same principles can be applied to&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Rich_Internet_application" target="_blank" title="A Rich Internet Application (RIA) is a web application that has many of the characteristics of desktop applications, typically delivered either by way of a site-specific browser, via a browser plug-in, independent sandboxes, or virtual machines."&gt;Rich Internet applications&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Smart_client" target="_blank" title="A &amp;quot;Smart Client&amp;quot; application can be created in several very different technologies."&gt;Smart client&lt;/a&gt;. I have been using the AsyncEnumerator class for over two years and I have to say that it changed the way I think about using the APM. At the &lt;em&gt;end&lt;/em&gt;.. delivering responsive applications makes the &lt;em&gt;end&lt;/em&gt;-users happy.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GitHub + Visual Studio = Love</title>
    <link rel="alternate" href="/blog/2010/10/14/github-plus-visual-studio-equals-love"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/14/github-plus-visual-studio-equals-love</id>
    <updated>2010-10-14T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;I love&amp;#0160;&lt;a href="http://www.github.com/" target="_blank" title="Online project hosting using Git. Includes source-code browser, in-line editing, wikis, and ticketing. Free for public open-source code."&gt;GitHub&lt;/a&gt;.&amp;#0160;It&amp;#39;s&amp;#0160;&lt;a href="http://github.com/blog/39-say-hello-to-the-network-graph-visualizer" target="_blank" title="Say hello to the Network Graph Visualizer"&gt;Network Graph Visualizer&lt;/a&gt;&amp;#0160;is outstanding! It solves one of the biggest challenges in open-source world; keeping track of what other people have done with the code base.&lt;/p&gt;

&lt;p&gt;If you use Windows for&amp;#0160;writing&amp;#0160;your code you can use the tools described &lt;a href="http://nikosbaxevanis.com/2010/10/07/building-castle-activerecord-from-source-at-github/" target="_self"&gt;here&lt;/a&gt;&amp;#0160;to have&amp;#0160;Git on shell context-menu. For Visual Studio support you can use &lt;a href="http://code.google.com/p/gitextensions/" target="_blank" title="Git Extensions is a small toolset to make working with Git under Windows a little more intuitive."&gt;GitExtensions&lt;/a&gt;&amp;#0160;and/or Joshua Flanagan&amp;#39;s &lt;a href="http://github.com/joshuaflanagan/gitmacros" target="_blank" title="Visual Studio macros for viewing a file on GitHub."&gt;GitMacros&lt;/a&gt;. The last one requires you to do some steps for adding the macros manually but it&amp;#39;s worth it, since you can have some basic GitHub functionality in minutes (like&amp;#0160;opening&amp;#0160;the GitHub page for the current file).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>List of software engineering topics</title>
    <link rel="alternate" href="/blog/2010/10/14/list-of-software-engineering-topics"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/14/list-of-software-engineering-topics</id>
    <updated>2010-10-14T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/List_of_software_engineering_topics"&gt;This&lt;/a&gt; list along with &lt;a href="http://en.wikipedia.org/wiki/List_of_software_development_philosophies" target="_blank" title="List of software development philosophies - Wikipedia, the free encyclopedia"&gt;this one&lt;/a&gt;&amp;#0160;completes the list of topics a software engineer should be aware of (well, almost!).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Allowing only one instance of a WPF application to execute</title>
    <link rel="alternate" href="/blog/2010/10/11/allowing-only-one-instance-of-a-wpf-application-to-execute"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/11/allowing-only-one-instance-of-a-wpf-application-to-execute</id>
    <updated>2010-10-11T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;Sometimes, for any reason, you want to have only one instance per application.&lt;/p&gt;

&lt;p&gt;Search on the internet and you will find&amp;nbsp;&lt;a href="http://www.google.gr/search?sourceid=chrome&amp;amp;ie=UTF-8&amp;amp;q=wpf+single+instance" target="_blank"&gt;many different ways&lt;/a&gt; of doing this. However, inside Jeffrey Ricther&amp;rsquo;s &lt;a title="CLR via C#, Third Edition" href="http://www.microsoft.com/learning/en/us/book.aspx?ID=13874" target="_blank"&gt;excellent book&lt;/a&gt;&amp;nbsp;there is a way&amp;nbsp;of allowing only one instance of an application (Console, WinForms, WPF) to execute at any given time using kernel-mode constructs.&lt;/p&gt;

&lt;p&gt;Using what has been described in the book and searching at &lt;a href="http://www.pinvoke.net/default.aspx/user32/ShowWindow.html" target="_blank"&gt;P/Invoke.net&lt;/a&gt;, I wrote some code that works with WPF applications. The code also attempts to set focus on the window and if it&amp;rsquo;s minimized it will attempt to restore it.&amp;nbsp;&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Diagnostics&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Reflection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Runtime.InteropServices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Windows&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;Semaphore&lt;/span&gt; &lt;span class="n"&gt;singleInstanceWatcher&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;createdNew&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Ensure other instances of this application are not running.
&lt;/span&gt;        &lt;span class="n"&gt;singleInstanceWatcher&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Semaphore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Initial count.
&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Maximum count.
&lt;/span&gt;            &lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetExecutingAssembly&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;GetName&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;createdNew&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createdNew&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// This thread created the kernel object so no other instance
&lt;/span&gt;            &lt;span class="c1"&gt;// of this application must be running.
&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// This thread opened an existing kernel object with the same
&lt;/span&gt;            &lt;span class="c1"&gt;// string name; another instance of this app must be running now.
&lt;/span&gt;
            &lt;span class="c1"&gt;// Gets a new System.Diagnostics.Process component and the
&lt;/span&gt;            &lt;span class="c1"&gt;// associates it with currently active process.
&lt;/span&gt;            &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetCurrentProcess&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="c1"&gt;// Enumerate through all the process resources on the share
&lt;/span&gt;            &lt;span class="c1"&gt;// local computer that the specified process name.
&lt;/span&gt;            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
                 &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetProcessesByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProcessName&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;NativeMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetForegroundWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainWindowHandle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;NativeMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ShowWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainWindowHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                        &lt;span class="n"&gt;WindowShowStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Restore&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// Terminate this process and gives the underlying operating 
&lt;/span&gt;            &lt;span class="c1"&gt;// system the specified exit code.
&lt;/span&gt;            &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NativeMethods&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// Brings the thread that created the specified window into the
&lt;/span&gt;        &lt;span class="c1"&gt;/// foreground and activates the window. Keyboard input is directed
&lt;/span&gt;        &lt;span class="c1"&gt;/// to the window, and various visual cues are changed for the user.
&lt;/span&gt;        &lt;span class="c1"&gt;/// The system assigns a slightly higher priority to the thread that
&lt;/span&gt;        &lt;span class="c1"&gt;/// created the foreground window than it does to other threads.
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;hWnd&amp;quot;&amp;gt;A handle to the window that should be
&lt;/span&gt;        &lt;span class="c1"&gt;/// activated and brought to the foreground.
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;/param&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;If the window was brought to the foreground, the
&lt;/span&gt;        &lt;span class="c1"&gt;/// return value is nonzero. &amp;lt;/returns&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;DllImport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;user32.dll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;SetForegroundWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;hWnd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Shows a Window&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;para&amp;gt;To perform certain special effects when showing or hiding a
&lt;/span&gt;        &lt;span class="c1"&gt;/// window, use AnimateWindow.&amp;lt;/para&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;para&amp;gt;The first time an application calls ShowWindow, it should use
&lt;/span&gt;        &lt;span class="c1"&gt;/// the WinMain function's nCmdShow parameter as its nCmdShow ..
&lt;/span&gt;        &lt;span class="c1"&gt;/// Subsequent calls to ShowWindow must use one of the values in the
&lt;/span&gt;        &lt;span class="c1"&gt;/// given list, instead of the one specified by the WinMain function's
&lt;/span&gt;        &lt;span class="c1"&gt;/// nCmdShow parameter.&amp;lt;/para&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;para&amp;gt;As noted in the discussion of the nCmdShow parameter, the
&lt;/span&gt;        &lt;span class="c1"&gt;/// nCmdShow value is ignored in the first call to ShowWindow if the
&lt;/span&gt;        &lt;span class="c1"&gt;/// program that launched the application specifies startup information
&lt;/span&gt;        &lt;span class="c1"&gt;/// in the structure. In this case, ShowWindow uses the information
&lt;/span&gt;        &lt;span class="c1"&gt;/// specified in the STARTUPINFO structure to show the window. On
&lt;/span&gt;        &lt;span class="c1"&gt;/// subsequent calls, the application must call ShowWindow with ..
&lt;/span&gt;        &lt;span class="c1"&gt;/// set to SW_SHOWDEFAULT to use the startup information provided by ..
&lt;/span&gt;        &lt;span class="c1"&gt;/// program that launched the application. This behavior is designed ..
&lt;/span&gt;        &lt;span class="c1"&gt;/// the following situations: &amp;lt;/para&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;list type=&amp;quot;&amp;quot;&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;///    &amp;lt;item&amp;gt;Applications create their main window by calling ..
&lt;/span&gt;        &lt;span class="c1"&gt;///    with the WS_VISIBLE flag set. &amp;lt;/item&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;///    &amp;lt;item&amp;gt;Applications create their main window by calling ..
&lt;/span&gt;        &lt;span class="c1"&gt;///    with the WS_VISIBLE flag cleared, and later call ShowWindow ..
&lt;/span&gt;        &lt;span class="c1"&gt;///    SW_SHOW flag set to make it visible.&amp;lt;/item&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;/list&amp;gt;&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;hWnd&amp;quot;&amp;gt;Handle to the window.&amp;lt;/param&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;nCmdShow&amp;quot;&amp;gt;Specifies how the window is to be shown.
&lt;/span&gt;        &lt;span class="c1"&gt;/// This parameter is ignored the first time an application calls
&lt;/span&gt;        &lt;span class="c1"&gt;/// ShowWindow, if the program that launched the application provides a
&lt;/span&gt;        &lt;span class="c1"&gt;/// STARTUPINFO structure. Otherwise, the first time ShowWindow .. ,
&lt;/span&gt;        &lt;span class="c1"&gt;/// the value should be the value obtained by the WinMain function ..
&lt;/span&gt;        &lt;span class="c1"&gt;/// nCmdShow parameter. In subsequent calls, this parameter ..
&lt;/span&gt;        &lt;span class="c1"&gt;/// the WindowShowStyle members.&amp;lt;/param&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// If the window was previously visible, the return value is nonzero.
&lt;/span&gt;        &lt;span class="c1"&gt;/// If the window was previously hidden, the return value is zero.
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;/returns&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;DllImport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;user32.dll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;ShowWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;hWnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;WindowShowStyle&lt;/span&gt; &lt;span class="n"&gt;nCmdShow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;/// Enumeration of the different ways of showing a window.&amp;lt;/summary&amp;gt;
&lt;/span&gt;    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;WindowShowStyle&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Hides the window and activates another window.&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_HIDE&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;Hide&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Activates and displays a window. If the window ..
&lt;/span&gt;        &lt;span class="c1"&gt;/// or maximized, the system restores it to its original size and
&lt;/span&gt;        &lt;span class="c1"&gt;/// position. An application should specify this flag when displaying
&lt;/span&gt;        &lt;span class="c1"&gt;/// the window for the first time.&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_SHOWNORMAL&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;ShowNormal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Activates the window and displays it ..&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_SHOWMINIMIZED&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;ShowMinimized&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Activates the window and displays it ..&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_SHOWMAXIMIZED&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;ShowMaximized&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Maximizes the specified window.&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_MAXIMIZE&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;Maximize&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Displays a window in its most recent size and position.
&lt;/span&gt;        &lt;span class="c1"&gt;/// This value is similar to &amp;quot;ShowNormal&amp;quot;, except the window is not
&lt;/span&gt;        &lt;span class="c1"&gt;/// actived.&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_SHOWNOACTIVATE&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;ShowNormalNoActivate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Activates the window and displays it in its current size
&lt;/span&gt;        &lt;span class="c1"&gt;/// and position.&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_SHOW&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Minimizes the specified window and activates the next
&lt;/span&gt;        &lt;span class="c1"&gt;/// top-level window in the Z order.&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_MINIMIZE&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;Minimize&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Displays the window as a minimized window. This value is
&lt;/span&gt;        &lt;span class="c1"&gt;/// similar to &amp;quot;ShowMinimized&amp;quot;, except the window ..&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_SHOWMINNOACTIVE&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;ShowMinNoActivate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Displays the window in its current size and position. This
&lt;/span&gt;        &lt;span class="c1"&gt;/// value is similar to &amp;quot;Show&amp;quot;, except the window ..&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_SHOWNA&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;ShowNoActivate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Activates and displays the window. If the window is
&lt;/span&gt;        &lt;span class="c1"&gt;/// minimized or maximized, the system restores it to its original size
&lt;/span&gt;        &lt;span class="c1"&gt;/// and position. An application should specify this flag ..
&lt;/span&gt;        &lt;span class="c1"&gt;/// a minimized window.&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_RESTORE&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;Restore&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Sets the show state based on the SW_ value specified ..
&lt;/span&gt;        &lt;span class="c1"&gt;/// STARTUPINFO structure passed to the CreateProcess function by the
&lt;/span&gt;        &lt;span class="c1"&gt;/// program that started the application.&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_SHOWDEFAULT&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;ShowDefault&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Windows 2000/XP: Minimizes a window, even if the thread
&lt;/span&gt;        &lt;span class="c1"&gt;/// that owns the window is hung. This flag should only be used when
&lt;/span&gt;        &lt;span class="c1"&gt;/// minimizing windows from a different thread.&amp;lt;/summary&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;See SW_FORCEMINIMIZE&amp;lt;/remarks&amp;gt;
&lt;/span&gt;        &lt;span class="n"&gt;ForceMinimized&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;One improvement would be to restore the window only if it&amp;rsquo;s minimized by checking the return value of SetForegroundWindow method. I leave this to you, go on and adapt it to your own needs.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Quick Comparison of NHibernate Books</title>
    <link rel="alternate" href="/blog/2010/10/11/quick-comparison-of-nhibernate-books"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/11/quick-comparison-of-nhibernate-books</id>
    <updated>2010-10-11T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://sourceforge.net/projects/nhibernate/" target="_blank"&gt;NHibernate&lt;/a&gt;&amp;#0160;is an &lt;a href="http://en.wikipedia.org/wiki/Object-relational_mapping" target="_blank" title="Object-relational mapping (ORM, O/RM, and O/R mapping) in computer software is a programming technique for converting data between incompatible type systems ..."&gt;Object-relational mapping&lt;/a&gt; (ORM) solution for the Microsoft .NET platform. It provides a framework for mapping an object-oriented domain model to a traditional relational database. It is open-source, easy to use (if you are familiar with good design principles) and offers a lot of extensibility points (logging and interception to name a few). The story begins with &lt;a href="http://www.hibernate.org/" target="_blank" title="Hibernate an open source Java persistence framework project. Perform powerful object relational mapping and query databases using HQL and ..."&gt;Hibernate&lt;/a&gt; in Java. In fact, there are &lt;a href="http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&amp;amp;field-keywords=hibernate&amp;amp;x=0&amp;amp;y=0" target="_blank"&gt;many books&lt;/a&gt; out there for Hibernate but only a few for NHibernate (so far):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.manning.com/kuate/" target="_blank"&gt;NHibernate In Action&lt;/a&gt; (Manning, 2009)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.packtpub.com/nhibernate-2-x-beginners-guide/book" target="_blank"&gt;NHibernate 2 Beginner&amp;#39;s Guide&lt;/a&gt; (Packt Publishing, 2010)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.packtpub.com/nhibernate-3-0-cookbook/book" target="_blank"&gt;NHibernate 3.0 Cookbook&lt;/a&gt; (Pack Publishing, 2010)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NHibernate In Action is written by members of NHibernate (Pierre Henri Kuaté, Tobin Harris)&amp;#0160;and Hibernate (Christian Bauer, Gavin King) team. It contains a lot of stuff about the internals, such as,&amp;#0160;the persistence lifecycle, the persistence manager, transitive persistence, the NHibernate type system, advanced query techniques, optimizing object retrieval (I could go on).&lt;/p&gt;

&lt;p&gt;NHibernate 2 Beginner&amp;#39;s Guide, written by Aaron Cure,&amp;#0160;targets those who have not used an ORM yet. It helps you find&amp;#0160;about what is NHibernate, why would you use it, where do you get it, and more. It guides you on how to create mappings (XML and &lt;a href="http://fluentnhibernate.org/" target="_blank" title="Fluent NHibernate, a statically compiled alternative to NHibernate&amp;#39;s standard hbm xml mapping."&gt;Fluently&lt;/a&gt;), types, relationships and more. It contains a whole chapter about Code Generation and even talks about&amp;#0160;&lt;a href="http://nhforge.org/wikis/burrow/introduction.aspx" target="_blank" title="NHibernate.Burrow is a light weight middleware developed to support .NET applications using NHibernate as ORM framework by providing advanced and smart session/transaction management and other facilitates."&gt;Burrow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NHibernate 3.0 Cookbook, written by&amp;#0160;Jason Dentler, is the most recent and most updated. In the chapter about mappings, (besides XML and Fluently) it discuss about creating mappings in code using&amp;#0160;&lt;a href="http://code.google.com/p/codeconform/" target="_blank" title="ORM configuration by code."&gt;ConfORM&lt;/a&gt;.&amp;#0160;It describes the Conversation per Business Transaction pattern, the use of Futures, NHibernate Spatial and more! It focus on testing and describes the use of NHibernate Profiler and the Fluent NHibernate Persistence Tester among other. It even promotes design patterns and talks about using &lt;a href="http://en.wikipedia.org/wiki/Dependency_injection" target="_blank" title="Dependency injection (DI) in object-oriented computer programming is a design pattern with a core principle of separating behavior from dependency ..."&gt;dependency injection&lt;/a&gt; with entities.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Let's Pack! Nubular, HornGet and NuPack</title>
    <link rel="alternate" href="/blog/2010/10/08/lets-pack-nubular-hornget-and-nupack"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/08/lets-pack-nubular-hornget-and-nupack</id>
    <updated>2010-10-08T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update: &lt;/strong&gt;At the time of this writting &lt;a href="http://nuget.codeplex.com/" target="_blank" title="NuGet is a Visual Studio extension that makes it easy to install and update third-party libraries and tools."&gt;NuGet&lt;/a&gt; was called NuPack.&lt;/p&gt;

&lt;p&gt;Package Management is not easy, unless you are doing very (very) small projects. It can be quite complex if your project is &amp;#0160;developed in-house for a company (enterprise).&lt;/p&gt;

&lt;p&gt;If you haven&amp;#39;t tried anything yet, have a look at the following Package Management tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nu.wikispot.org/Current_Packages" target="_blank" title="The Nu Project provides a framework and tools to deal with the current .NET package delivery..."&gt;Nubular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/dagda1/horn_src" target="_blank" title="The initial mission statement is to take control of building a common set of open source packages that are probably similar to many in the ALT.NET space..."&gt;HornGet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nupack.codeplex.com/" target="_blank" title="NuPack is a free, open source developer focused package management system for the .NET platform intent on simplifying the process of incorporating third party libraries into a .NET application during development."&gt;NuPack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nubular was pretty much the same with &lt;a href="http://rubygems.org/" target="_blank" title="RubyGems.org is the Ruby community&amp;#39;s gem hosting service. Instantly publish your gems and install them. Use the API to interact and find out more..."&gt;RubyGems.org&lt;/a&gt;&amp;#0160;There are pre-uploaded packages that you can download and use in your project. For example, to use Castle Active Record you don&amp;#39;t need to follow the steps described &lt;a href="http://nikosbaxevanis.com/2010/10/07/building-castle-activerecord-from-source-at-github/" target="_blank"&gt;here&lt;/a&gt;. Just grab the package, unpack and you are done.&amp;#0160;&lt;/p&gt;

&lt;p&gt;What many don&amp;#39;t understand is the situation where you reference for example &lt;a href="http://code.google.com/p/moq/" target="_blank" title="The simplest mocking library for .NET 3.5 and Silverlight with deep C# 3.0 integration."&gt;Moq&lt;/a&gt;, &lt;a href="http://github.com/jbogard/automapper" target="_blank" title="A convention-based object-object mapper in .NET"&gt;AutoMapper&lt;/a&gt;&amp;#0160;and &lt;a href="http://github.com/castleproject/Castle.InversionOfControl" target="_blank" title="Castle Project offers two Inversion of Control Containers. The MicroKernel and the Windsor Container."&gt;Castle Windsor&lt;/a&gt;, all in one project &lt;em&gt;(version numbers are&amp;#0160;fictional)&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Moq uses Castle.DynamicProxy.dll v1.1&lt;/li&gt;
&lt;li&gt;AutoMapper uses Castle.DynamicProxy.dll v1.2&lt;/li&gt;
&lt;li&gt;Castle Windsor uses Castle.DynamicProxy.dll v.1.3 &lt;em&gt;(in fact, latest public release of Windsor has DynamicProxy merged in the same assembly).&amp;ldquo;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HornGet was able to deal with this situation, it could build Moq using the latest and greatest, AutoMapper and Windsor too. You end up with three assemblies that referenced the same version of the depenency/ies.&lt;/p&gt;

&lt;p&gt;Even if you choose this path, it is the hardest one because you need to run all the unit-tests in the projects (Moq, AutoMapper, Windsor) and make sure they pass with the latest version in /trunk of DynamicProxy. And this is not enough, you need to run all the tests (unit and intergration) of your project. After all the above pass, you can go home early. But I am sure that it is already early afternoon and you spent at least 4 hours doing this.&lt;/p&gt;

&lt;p&gt;Of course you may not choose to go with this path and install the different versions of Castle.DynamicProxy.dll in&amp;#0160;&lt;a href="http://en.wikipedia.org/wiki/Global_Assembly_Cache" target="_blank" title="GAC is a machine-wide .NET assemblies cache for Microsoft&amp;#39;s CLR platform."&gt;GAC&lt;/a&gt;. That way Nubular worked great!&lt;/p&gt;

&lt;p&gt;NuPack is a new Package Management tool for the .NET Framework that aims to make your life a lot more easier. It integrates with Visual Studio 2010 and there are a some interesting&amp;#0160;&lt;a href="http://nupack.codeplex.com/team/view" target="_blank"&gt;people&lt;/a&gt;&amp;#0160;behind it.&lt;/p&gt;

&lt;p&gt;Have a look at the &lt;a href="http://nupack.codeplex.com/documentation?title=Getting%20Started" target="_blank" title="The Getting Started guide will help you start using NuPack right away."&gt;documentation&lt;/a&gt; and start using it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>BindingBase.StringFormat Property (System.Windows.Data)</title>
    <link rel="alternate" href="/blog/2010/10/07/bindingbase-dot-stringformat-property-system-dot-windows-dot-data"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/07/bindingbase-dot-stringformat-property-system-dot-windows-dot-data</id>
    <updated>2010-10-07T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;By default the WPF binding engine uses 2 fractional digits when displaying double values. When those digits are zero though, they are omitted. You can override this by specifying the StringFormat Property on the binding.&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Binding Path=Price, StringFormat={}{0:0.00}}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.bindingbase.stringformat.aspx"&gt;StringFormat&lt;/a&gt; can be a predefined, composite, or custom string format. For more information about string formats, see Formatting Types &lt;a href="http://msdn.microsoft.com/en-us/library/26etazsy.aspx"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building Castle ActiveRecord from Source at GitHub</title>
    <link rel="alternate" href="/blog/2010/10/07/building-castle-activerecord-from-source-at-github"/>
    <id>http://nikosbaxevanis.com/blog/2010/10/07/building-castle-activerecord-from-source-at-github</id>
    <updated>2010-10-07T00:00:00+03:00</updated>
    <author>
      <name>Nikos Baxevanis</name>
    </author>
    <content type="html">&lt;p&gt;To follow the steps described in the post you will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://code.google.com/p/tortoisegit/" target="_blank" title="TortoiseGit The coolest Interface to (Git) Version Control"&gt;TortoiseGit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.google.com/p/msysgit/downloads/list" target="_blank" title="Git for Windows. Please use the download links in the right sidebar, the link starting with &amp;quot;Git&amp;quot; is for the desktop version, the link starting with &amp;quot;PortableGit&amp;quot; is for the portable version."&gt;msysgit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Visit&amp;#0160;&lt;a href="https://github.com/castleproject/ActiveRecord" target="_blank"&gt;https://github.com/castleproject/ActiveRecord&lt;/a&gt;&amp;#0160;and copy to clipboard the URL for Read-Only access.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8513/8398555422_2c15a13e0d_b.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Create an empty directory and select the entry named &amp;ldquo;Git Clone&amp;hellip;&amp;rdquo; on the Windows Explorer Context Menu.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8195/8397466785_84623942e0_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Click OK in the next screen and wait while Git is downloading the project files.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8230/8397466895_e063ab6f9b_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;When finished, you can browse the project files in the specified directory.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8513/8398555346_f79731838d_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The default is to build for version 4.0 of the .NET Framework. If you need to build for an older version you&amp;#0160;can edit the build.cmd file (it is actually a batch file).&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8367/8398555368_d89d8bf827_b.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The project&amp;#39;s build platform is&amp;#0160;&lt;a href="http://msdn.microsoft.com/en-us/library/wea2sca5(VS.90).aspx" target="_blank" title="MSBuild is the new build platform for Microsoft and Visual Studio. This section contains conceptual information about MSBuild."&gt;MSBuild&lt;/a&gt;&amp;#0160;as you can see from the Console Output above.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8330/8397466683_0d83ce3950_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Open folder &amp;ldquo;build&amp;rdquo; which is the project&amp;#39;s build output.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8363/8397466669_92a7f93348_o.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;As you may notice, the project now uses &lt;a href="https://www.re-motion.org/" title="re-motion is an Open Source development framework targeted at .NET enterprise applications."&gt;Remotion&amp;#39;s&lt;/a&gt;&amp;#0160;&lt;a href="https://www.re-motion.org/download/re-linq.pdf" title="A General Purpose LINQ Foundation"&gt;re-linq&lt;/a&gt;&amp;#0160;provider.&lt;/p&gt;

&lt;p&gt;To have a working data access layer in minutes, add a reference to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Castle.ActiveRecord.dll&lt;/li&gt;
&lt;li&gt;Castle.Components.Validator.dll&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The documentation is &lt;a href="http://stw.castleproject.org/Active%20Record.MainPage.ashx" title="Castle Active Record"&gt;here&lt;/a&gt;. Feel free to contribute.&lt;/p&gt;
</content>
  </entry>
</feed>
